
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Member
 * 
 */
export type Member = $Result.DefaultSelection<Prisma.$MemberPayload>
/**
 * Model Group
 * 
 */
export type Group = $Result.DefaultSelection<Prisma.$GroupPayload>
/**
 * Model GroupMember
 * 
 */
export type GroupMember = $Result.DefaultSelection<Prisma.$GroupMemberPayload>
/**
 * Model JourneyTemplate
 * 
 */
export type JourneyTemplate = $Result.DefaultSelection<Prisma.$JourneyTemplatePayload>
/**
 * Model Milestone
 * 
 */
export type Milestone = $Result.DefaultSelection<Prisma.$MilestonePayload>
/**
 * Model JourneyStage
 * 
 */
export type JourneyStage = $Result.DefaultSelection<Prisma.$JourneyStagePayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model EventAttendance
 * 
 */
export type EventAttendance = $Result.DefaultSelection<Prisma.$EventAttendancePayload>
/**
 * Model CareLog
 * 
 */
export type CareLog = $Result.DefaultSelection<Prisma.$CareLogPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model MemberTag
 * 
 */
export type MemberTag = $Result.DefaultSelection<Prisma.$MemberTagPayload>
/**
 * Model EventTag
 * 
 */
export type EventTag = $Result.DefaultSelection<Prisma.$EventTagPayload>
/**
 * Model GroupFile
 * 
 */
export type GroupFile = $Result.DefaultSelection<Prisma.$GroupFilePayload>
/**
 * Model MemberFamily
 * 
 */
export type MemberFamily = $Result.DefaultSelection<Prisma.$MemberFamilyPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  PASTOR: 'PASTOR',
  CARE_TEAM: 'CARE_TEAM',
  GROUP_LEADER: 'GROUP_LEADER',
  MEMBER: 'MEMBER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const MaritalStatus: {
  SINGLE: 'SINGLE',
  MARRIED: 'MARRIED',
  DIVORCED: 'DIVORCED',
  WIDOWED: 'WIDOWED'
};

export type MaritalStatus = (typeof MaritalStatus)[keyof typeof MaritalStatus]


export const GroupType: {
  MINISTRY: 'MINISTRY',
  LIFEGROUP: 'LIFEGROUP',
  TEAM: 'TEAM'
};

export type GroupType = (typeof GroupType)[keyof typeof GroupType]


export const StageStatus: {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

export type StageStatus = (typeof StageStatus)[keyof typeof StageStatus]


export const CalendarType: {
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  ONEOFF: 'ONEOFF'
};

export type CalendarType = (typeof CalendarType)[keyof typeof CalendarType]


export const CareType: {
  PRAYER: 'PRAYER',
  VISIT: 'VISIT',
  COUNSELING: 'COUNSELING',
  CALL: 'CALL'
};

export type CareType = (typeof CareType)[keyof typeof CareType]


export const TagCategory: {
  MEMBER: 'MEMBER',
  EVENT: 'EVENT',
  GROUP: 'GROUP'
};

export type TagCategory = (typeof TagCategory)[keyof typeof TagCategory]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type MaritalStatus = $Enums.MaritalStatus

export const MaritalStatus: typeof $Enums.MaritalStatus

export type GroupType = $Enums.GroupType

export const GroupType: typeof $Enums.GroupType

export type StageStatus = $Enums.StageStatus

export const StageStatus: typeof $Enums.StageStatus

export type CalendarType = $Enums.CalendarType

export const CalendarType: typeof $Enums.CalendarType

export type CareType = $Enums.CareType

export const CareType: typeof $Enums.CareType

export type TagCategory = $Enums.TagCategory

export const TagCategory: typeof $Enums.TagCategory

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.member`: Exposes CRUD operations for the **Member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.member.findMany()
    * ```
    */
  get member(): Prisma.MemberDelegate<ExtArgs>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<ExtArgs>;

  /**
   * `prisma.groupMember`: Exposes CRUD operations for the **GroupMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupMembers
    * const groupMembers = await prisma.groupMember.findMany()
    * ```
    */
  get groupMember(): Prisma.GroupMemberDelegate<ExtArgs>;

  /**
   * `prisma.journeyTemplate`: Exposes CRUD operations for the **JourneyTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JourneyTemplates
    * const journeyTemplates = await prisma.journeyTemplate.findMany()
    * ```
    */
  get journeyTemplate(): Prisma.JourneyTemplateDelegate<ExtArgs>;

  /**
   * `prisma.milestone`: Exposes CRUD operations for the **Milestone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Milestones
    * const milestones = await prisma.milestone.findMany()
    * ```
    */
  get milestone(): Prisma.MilestoneDelegate<ExtArgs>;

  /**
   * `prisma.journeyStage`: Exposes CRUD operations for the **JourneyStage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JourneyStages
    * const journeyStages = await prisma.journeyStage.findMany()
    * ```
    */
  get journeyStage(): Prisma.JourneyStageDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.eventAttendance`: Exposes CRUD operations for the **EventAttendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventAttendances
    * const eventAttendances = await prisma.eventAttendance.findMany()
    * ```
    */
  get eventAttendance(): Prisma.EventAttendanceDelegate<ExtArgs>;

  /**
   * `prisma.careLog`: Exposes CRUD operations for the **CareLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CareLogs
    * const careLogs = await prisma.careLog.findMany()
    * ```
    */
  get careLog(): Prisma.CareLogDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.memberTag`: Exposes CRUD operations for the **MemberTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MemberTags
    * const memberTags = await prisma.memberTag.findMany()
    * ```
    */
  get memberTag(): Prisma.MemberTagDelegate<ExtArgs>;

  /**
   * `prisma.eventTag`: Exposes CRUD operations for the **EventTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventTags
    * const eventTags = await prisma.eventTag.findMany()
    * ```
    */
  get eventTag(): Prisma.EventTagDelegate<ExtArgs>;

  /**
   * `prisma.groupFile`: Exposes CRUD operations for the **GroupFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupFiles
    * const groupFiles = await prisma.groupFile.findMany()
    * ```
    */
  get groupFile(): Prisma.GroupFileDelegate<ExtArgs>;

  /**
   * `prisma.memberFamily`: Exposes CRUD operations for the **MemberFamily** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MemberFamilies
    * const memberFamilies = await prisma.memberFamily.findMany()
    * ```
    */
  get memberFamily(): Prisma.MemberFamilyDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Member: 'Member',
    Group: 'Group',
    GroupMember: 'GroupMember',
    JourneyTemplate: 'JourneyTemplate',
    Milestone: 'Milestone',
    JourneyStage: 'JourneyStage',
    Event: 'Event',
    EventAttendance: 'EventAttendance',
    CareLog: 'CareLog',
    Tag: 'Tag',
    MemberTag: 'MemberTag',
    EventTag: 'EventTag',
    GroupFile: 'GroupFile',
    MemberFamily: 'MemberFamily'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "member" | "group" | "groupMember" | "journeyTemplate" | "milestone" | "journeyStage" | "event" | "eventAttendance" | "careLog" | "tag" | "memberTag" | "eventTag" | "groupFile" | "memberFamily"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Member: {
        payload: Prisma.$MemberPayload<ExtArgs>
        fields: Prisma.MemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findFirst: {
            args: Prisma.MemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findMany: {
            args: Prisma.MemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          create: {
            args: Prisma.MemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          createMany: {
            args: Prisma.MemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          delete: {
            args: Prisma.MemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          update: {
            args: Prisma.MemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          deleteMany: {
            args: Prisma.MemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          aggregate: {
            args: Prisma.MemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMember>
          }
          groupBy: {
            args: Prisma.MemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberCountArgs<ExtArgs>
            result: $Utils.Optional<MemberCountAggregateOutputType> | number
          }
        }
      }
      Group: {
        payload: Prisma.$GroupPayload<ExtArgs>
        fields: Prisma.GroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findFirst: {
            args: Prisma.GroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findMany: {
            args: Prisma.GroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          create: {
            args: Prisma.GroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          createMany: {
            args: Prisma.GroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          delete: {
            args: Prisma.GroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          update: {
            args: Prisma.GroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          deleteMany: {
            args: Prisma.GroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          aggregate: {
            args: Prisma.GroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroup>
          }
          groupBy: {
            args: Prisma.GroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupCountArgs<ExtArgs>
            result: $Utils.Optional<GroupCountAggregateOutputType> | number
          }
        }
      }
      GroupMember: {
        payload: Prisma.$GroupMemberPayload<ExtArgs>
        fields: Prisma.GroupMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          findFirst: {
            args: Prisma.GroupMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          findMany: {
            args: Prisma.GroupMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>[]
          }
          create: {
            args: Prisma.GroupMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          createMany: {
            args: Prisma.GroupMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>[]
          }
          delete: {
            args: Prisma.GroupMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          update: {
            args: Prisma.GroupMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          deleteMany: {
            args: Prisma.GroupMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          aggregate: {
            args: Prisma.GroupMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupMember>
          }
          groupBy: {
            args: Prisma.GroupMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupMemberCountArgs<ExtArgs>
            result: $Utils.Optional<GroupMemberCountAggregateOutputType> | number
          }
        }
      }
      JourneyTemplate: {
        payload: Prisma.$JourneyTemplatePayload<ExtArgs>
        fields: Prisma.JourneyTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JourneyTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JourneyTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyTemplatePayload>
          }
          findFirst: {
            args: Prisma.JourneyTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JourneyTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyTemplatePayload>
          }
          findMany: {
            args: Prisma.JourneyTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyTemplatePayload>[]
          }
          create: {
            args: Prisma.JourneyTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyTemplatePayload>
          }
          createMany: {
            args: Prisma.JourneyTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JourneyTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyTemplatePayload>[]
          }
          delete: {
            args: Prisma.JourneyTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyTemplatePayload>
          }
          update: {
            args: Prisma.JourneyTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyTemplatePayload>
          }
          deleteMany: {
            args: Prisma.JourneyTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JourneyTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JourneyTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyTemplatePayload>
          }
          aggregate: {
            args: Prisma.JourneyTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJourneyTemplate>
          }
          groupBy: {
            args: Prisma.JourneyTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<JourneyTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.JourneyTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<JourneyTemplateCountAggregateOutputType> | number
          }
        }
      }
      Milestone: {
        payload: Prisma.$MilestonePayload<ExtArgs>
        fields: Prisma.MilestoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MilestoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MilestoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          findFirst: {
            args: Prisma.MilestoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MilestoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          findMany: {
            args: Prisma.MilestoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[]
          }
          create: {
            args: Prisma.MilestoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          createMany: {
            args: Prisma.MilestoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MilestoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[]
          }
          delete: {
            args: Prisma.MilestoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          update: {
            args: Prisma.MilestoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          deleteMany: {
            args: Prisma.MilestoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MilestoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MilestoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          aggregate: {
            args: Prisma.MilestoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMilestone>
          }
          groupBy: {
            args: Prisma.MilestoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<MilestoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.MilestoneCountArgs<ExtArgs>
            result: $Utils.Optional<MilestoneCountAggregateOutputType> | number
          }
        }
      }
      JourneyStage: {
        payload: Prisma.$JourneyStagePayload<ExtArgs>
        fields: Prisma.JourneyStageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JourneyStageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyStagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JourneyStageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyStagePayload>
          }
          findFirst: {
            args: Prisma.JourneyStageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyStagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JourneyStageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyStagePayload>
          }
          findMany: {
            args: Prisma.JourneyStageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyStagePayload>[]
          }
          create: {
            args: Prisma.JourneyStageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyStagePayload>
          }
          createMany: {
            args: Prisma.JourneyStageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JourneyStageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyStagePayload>[]
          }
          delete: {
            args: Prisma.JourneyStageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyStagePayload>
          }
          update: {
            args: Prisma.JourneyStageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyStagePayload>
          }
          deleteMany: {
            args: Prisma.JourneyStageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JourneyStageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JourneyStageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyStagePayload>
          }
          aggregate: {
            args: Prisma.JourneyStageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJourneyStage>
          }
          groupBy: {
            args: Prisma.JourneyStageGroupByArgs<ExtArgs>
            result: $Utils.Optional<JourneyStageGroupByOutputType>[]
          }
          count: {
            args: Prisma.JourneyStageCountArgs<ExtArgs>
            result: $Utils.Optional<JourneyStageCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      EventAttendance: {
        payload: Prisma.$EventAttendancePayload<ExtArgs>
        fields: Prisma.EventAttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventAttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventAttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendancePayload>
          }
          findFirst: {
            args: Prisma.EventAttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventAttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendancePayload>
          }
          findMany: {
            args: Prisma.EventAttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendancePayload>[]
          }
          create: {
            args: Prisma.EventAttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendancePayload>
          }
          createMany: {
            args: Prisma.EventAttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventAttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendancePayload>[]
          }
          delete: {
            args: Prisma.EventAttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendancePayload>
          }
          update: {
            args: Prisma.EventAttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendancePayload>
          }
          deleteMany: {
            args: Prisma.EventAttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventAttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventAttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendancePayload>
          }
          aggregate: {
            args: Prisma.EventAttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventAttendance>
          }
          groupBy: {
            args: Prisma.EventAttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventAttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventAttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<EventAttendanceCountAggregateOutputType> | number
          }
        }
      }
      CareLog: {
        payload: Prisma.$CareLogPayload<ExtArgs>
        fields: Prisma.CareLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CareLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CareLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareLogPayload>
          }
          findFirst: {
            args: Prisma.CareLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CareLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareLogPayload>
          }
          findMany: {
            args: Prisma.CareLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareLogPayload>[]
          }
          create: {
            args: Prisma.CareLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareLogPayload>
          }
          createMany: {
            args: Prisma.CareLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CareLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareLogPayload>[]
          }
          delete: {
            args: Prisma.CareLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareLogPayload>
          }
          update: {
            args: Prisma.CareLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareLogPayload>
          }
          deleteMany: {
            args: Prisma.CareLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CareLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CareLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareLogPayload>
          }
          aggregate: {
            args: Prisma.CareLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCareLog>
          }
          groupBy: {
            args: Prisma.CareLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<CareLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.CareLogCountArgs<ExtArgs>
            result: $Utils.Optional<CareLogCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      MemberTag: {
        payload: Prisma.$MemberTagPayload<ExtArgs>
        fields: Prisma.MemberTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberTagPayload>
          }
          findFirst: {
            args: Prisma.MemberTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberTagPayload>
          }
          findMany: {
            args: Prisma.MemberTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberTagPayload>[]
          }
          create: {
            args: Prisma.MemberTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberTagPayload>
          }
          createMany: {
            args: Prisma.MemberTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemberTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberTagPayload>[]
          }
          delete: {
            args: Prisma.MemberTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberTagPayload>
          }
          update: {
            args: Prisma.MemberTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberTagPayload>
          }
          deleteMany: {
            args: Prisma.MemberTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemberTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MemberTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberTagPayload>
          }
          aggregate: {
            args: Prisma.MemberTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMemberTag>
          }
          groupBy: {
            args: Prisma.MemberTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemberTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberTagCountArgs<ExtArgs>
            result: $Utils.Optional<MemberTagCountAggregateOutputType> | number
          }
        }
      }
      EventTag: {
        payload: Prisma.$EventTagPayload<ExtArgs>
        fields: Prisma.EventTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTagPayload>
          }
          findFirst: {
            args: Prisma.EventTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTagPayload>
          }
          findMany: {
            args: Prisma.EventTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTagPayload>[]
          }
          create: {
            args: Prisma.EventTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTagPayload>
          }
          createMany: {
            args: Prisma.EventTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTagPayload>[]
          }
          delete: {
            args: Prisma.EventTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTagPayload>
          }
          update: {
            args: Prisma.EventTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTagPayload>
          }
          deleteMany: {
            args: Prisma.EventTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTagPayload>
          }
          aggregate: {
            args: Prisma.EventTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventTag>
          }
          groupBy: {
            args: Prisma.EventTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventTagCountArgs<ExtArgs>
            result: $Utils.Optional<EventTagCountAggregateOutputType> | number
          }
        }
      }
      GroupFile: {
        payload: Prisma.$GroupFilePayload<ExtArgs>
        fields: Prisma.GroupFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupFilePayload>
          }
          findFirst: {
            args: Prisma.GroupFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupFilePayload>
          }
          findMany: {
            args: Prisma.GroupFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupFilePayload>[]
          }
          create: {
            args: Prisma.GroupFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupFilePayload>
          }
          createMany: {
            args: Prisma.GroupFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupFilePayload>[]
          }
          delete: {
            args: Prisma.GroupFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupFilePayload>
          }
          update: {
            args: Prisma.GroupFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupFilePayload>
          }
          deleteMany: {
            args: Prisma.GroupFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupFilePayload>
          }
          aggregate: {
            args: Prisma.GroupFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupFile>
          }
          groupBy: {
            args: Prisma.GroupFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupFileCountArgs<ExtArgs>
            result: $Utils.Optional<GroupFileCountAggregateOutputType> | number
          }
        }
      }
      MemberFamily: {
        payload: Prisma.$MemberFamilyPayload<ExtArgs>
        fields: Prisma.MemberFamilyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberFamilyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberFamilyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberFamilyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberFamilyPayload>
          }
          findFirst: {
            args: Prisma.MemberFamilyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberFamilyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberFamilyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberFamilyPayload>
          }
          findMany: {
            args: Prisma.MemberFamilyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberFamilyPayload>[]
          }
          create: {
            args: Prisma.MemberFamilyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberFamilyPayload>
          }
          createMany: {
            args: Prisma.MemberFamilyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemberFamilyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberFamilyPayload>[]
          }
          delete: {
            args: Prisma.MemberFamilyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberFamilyPayload>
          }
          update: {
            args: Prisma.MemberFamilyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberFamilyPayload>
          }
          deleteMany: {
            args: Prisma.MemberFamilyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemberFamilyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MemberFamilyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberFamilyPayload>
          }
          aggregate: {
            args: Prisma.MemberFamilyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMemberFamily>
          }
          groupBy: {
            args: Prisma.MemberFamilyGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemberFamilyGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberFamilyCountArgs<ExtArgs>
            result: $Utils.Optional<MemberFamilyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    careLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    careLogs?: boolean | UserCountOutputTypeCountCareLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCareLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CareLogWhereInput
  }


  /**
   * Count Type MemberCountOutputType
   */

  export type MemberCountOutputType = {
    groups: number
    journeyStages: number
    careLogs: number
    eventAttendances: number
    tags: number
    familyConnections: number
    relatedConnections: number
  }

  export type MemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groups?: boolean | MemberCountOutputTypeCountGroupsArgs
    journeyStages?: boolean | MemberCountOutputTypeCountJourneyStagesArgs
    careLogs?: boolean | MemberCountOutputTypeCountCareLogsArgs
    eventAttendances?: boolean | MemberCountOutputTypeCountEventAttendancesArgs
    tags?: boolean | MemberCountOutputTypeCountTagsArgs
    familyConnections?: boolean | MemberCountOutputTypeCountFamilyConnectionsArgs
    relatedConnections?: boolean | MemberCountOutputTypeCountRelatedConnectionsArgs
  }

  // Custom InputTypes
  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberCountOutputType
     */
    select?: MemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupMemberWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountJourneyStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JourneyStageWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountCareLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CareLogWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountEventAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventAttendanceWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberTagWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountFamilyConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberFamilyWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountRelatedConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberFamilyWhereInput
  }


  /**
   * Count Type GroupCountOutputType
   */

  export type GroupCountOutputType = {
    members: number
    events: number
    files: number
  }

  export type GroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | GroupCountOutputTypeCountMembersArgs
    events?: boolean | GroupCountOutputTypeCountEventsArgs
    files?: boolean | GroupCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupMemberWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupFileWhereInput
  }


  /**
   * Count Type JourneyTemplateCountOutputType
   */

  export type JourneyTemplateCountOutputType = {
    milestones: number
    journeyStages: number
  }

  export type JourneyTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    milestones?: boolean | JourneyTemplateCountOutputTypeCountMilestonesArgs
    journeyStages?: boolean | JourneyTemplateCountOutputTypeCountJourneyStagesArgs
  }

  // Custom InputTypes
  /**
   * JourneyTemplateCountOutputType without action
   */
  export type JourneyTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplateCountOutputType
     */
    select?: JourneyTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JourneyTemplateCountOutputType without action
   */
  export type JourneyTemplateCountOutputTypeCountMilestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilestoneWhereInput
  }

  /**
   * JourneyTemplateCountOutputType without action
   */
  export type JourneyTemplateCountOutputTypeCountJourneyStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JourneyStageWhereInput
  }


  /**
   * Count Type MilestoneCountOutputType
   */

  export type MilestoneCountOutputType = {
    journeyStages: number
  }

  export type MilestoneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    journeyStages?: boolean | MilestoneCountOutputTypeCountJourneyStagesArgs
  }

  // Custom InputTypes
  /**
   * MilestoneCountOutputType without action
   */
  export type MilestoneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilestoneCountOutputType
     */
    select?: MilestoneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MilestoneCountOutputType without action
   */
  export type MilestoneCountOutputTypeCountJourneyStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JourneyStageWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    attendances: number
    tags: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendances?: boolean | EventCountOutputTypeCountAttendancesArgs
    tags?: boolean | EventCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventAttendanceWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventTagWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    members: number
    events: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | TagCountOutputTypeCountMembersArgs
    events?: boolean | TagCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberTagWhereInput
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventTagWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    role: $Enums.Role
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    member?: boolean | User$memberArgs<ExtArgs>
    careLogs?: boolean | User$careLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | User$memberArgs<ExtArgs>
    careLogs?: boolean | User$careLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs> | null
      careLogs: Prisma.$CareLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      role: $Enums.Role
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends User$memberArgs<ExtArgs> = {}>(args?: Subset<T, User$memberArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    careLogs<T extends User$careLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$careLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.member
   */
  export type User$memberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
  }

  /**
   * User.careLogs
   */
  export type User$careLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    where?: CareLogWhereInput
    orderBy?: CareLogOrderByWithRelationInput | CareLogOrderByWithRelationInput[]
    cursor?: CareLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CareLogScalarFieldEnum | CareLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Member
   */

  export type AggregateMember = {
    _count: MemberCountAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  export type MemberMinAggregateOutputType = {
    id: string | null
    userId: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    address: string | null
    maritalStatus: $Enums.MaritalStatus | null
    spiritualStatus: string | null
    profilePhotoUrl: string | null
    notes: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MemberMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    address: string | null
    maritalStatus: $Enums.MaritalStatus | null
    spiritualStatus: string | null
    profilePhotoUrl: string | null
    notes: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MemberCountAggregateOutputType = {
    id: number
    userId: number
    firstName: number
    lastName: number
    email: number
    phone: number
    dateOfBirth: number
    gender: number
    address: number
    maritalStatus: number
    spiritualStatus: number
    profilePhotoUrl: number
    notes: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MemberMinAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    maritalStatus?: true
    spiritualStatus?: true
    profilePhotoUrl?: true
    notes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MemberMaxAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    maritalStatus?: true
    spiritualStatus?: true
    profilePhotoUrl?: true
    notes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MemberCountAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    maritalStatus?: true
    spiritualStatus?: true
    profilePhotoUrl?: true
    notes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Member to aggregate.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberMaxAggregateInputType
  }

  export type GetMemberAggregateType<T extends MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMember[P]>
      : GetScalarType<T[P], AggregateMember[P]>
  }




  export type MemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithAggregationInput | MemberOrderByWithAggregationInput[]
    by: MemberScalarFieldEnum[] | MemberScalarFieldEnum
    having?: MemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberCountAggregateInputType | true
    _min?: MemberMinAggregateInputType
    _max?: MemberMaxAggregateInputType
  }

  export type MemberGroupByOutputType = {
    id: string
    userId: string | null
    firstName: string
    lastName: string
    email: string
    phone: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    address: string | null
    maritalStatus: $Enums.MaritalStatus | null
    spiritualStatus: string | null
    profilePhotoUrl: string | null
    notes: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: MemberCountAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  type GetMemberGroupByPayload<T extends MemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberGroupByOutputType[P]>
            : GetScalarType<T[P], MemberGroupByOutputType[P]>
        }
      >
    >


  export type MemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    maritalStatus?: boolean
    spiritualStatus?: boolean
    profilePhotoUrl?: boolean
    notes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Member$userArgs<ExtArgs>
    groups?: boolean | Member$groupsArgs<ExtArgs>
    journeyStages?: boolean | Member$journeyStagesArgs<ExtArgs>
    careLogs?: boolean | Member$careLogsArgs<ExtArgs>
    eventAttendances?: boolean | Member$eventAttendancesArgs<ExtArgs>
    tags?: boolean | Member$tagsArgs<ExtArgs>
    familyConnections?: boolean | Member$familyConnectionsArgs<ExtArgs>
    relatedConnections?: boolean | Member$relatedConnectionsArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    maritalStatus?: boolean
    spiritualStatus?: boolean
    profilePhotoUrl?: boolean
    notes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Member$userArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectScalar = {
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    maritalStatus?: boolean
    spiritualStatus?: boolean
    profilePhotoUrl?: boolean
    notes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Member$userArgs<ExtArgs>
    groups?: boolean | Member$groupsArgs<ExtArgs>
    journeyStages?: boolean | Member$journeyStagesArgs<ExtArgs>
    careLogs?: boolean | Member$careLogsArgs<ExtArgs>
    eventAttendances?: boolean | Member$eventAttendancesArgs<ExtArgs>
    tags?: boolean | Member$tagsArgs<ExtArgs>
    familyConnections?: boolean | Member$familyConnectionsArgs<ExtArgs>
    relatedConnections?: boolean | Member$relatedConnectionsArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Member$userArgs<ExtArgs>
  }

  export type $MemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Member"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      groups: Prisma.$GroupMemberPayload<ExtArgs>[]
      journeyStages: Prisma.$JourneyStagePayload<ExtArgs>[]
      careLogs: Prisma.$CareLogPayload<ExtArgs>[]
      eventAttendances: Prisma.$EventAttendancePayload<ExtArgs>[]
      tags: Prisma.$MemberTagPayload<ExtArgs>[]
      familyConnections: Prisma.$MemberFamilyPayload<ExtArgs>[]
      relatedConnections: Prisma.$MemberFamilyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      firstName: string
      lastName: string
      email: string
      phone: string | null
      dateOfBirth: Date | null
      gender: $Enums.Gender | null
      address: string | null
      maritalStatus: $Enums.MaritalStatus | null
      spiritualStatus: string | null
      profilePhotoUrl: string | null
      notes: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["member"]>
    composites: {}
  }

  type MemberGetPayload<S extends boolean | null | undefined | MemberDefaultArgs> = $Result.GetResult<Prisma.$MemberPayload, S>

  type MemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MemberCountAggregateInputType | true
    }

  export interface MemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Member'], meta: { name: 'Member' } }
    /**
     * Find zero or one Member that matches the filter.
     * @param {MemberFindUniqueArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemberFindUniqueArgs>(args: SelectSubset<T, MemberFindUniqueArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Member that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MemberFindUniqueOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemberFindUniqueOrThrowArgs>(args: SelectSubset<T, MemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemberFindFirstArgs>(args?: SelectSubset<T, MemberFindFirstArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Member that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemberFindFirstOrThrowArgs>(args?: SelectSubset<T, MemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.member.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.member.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberWithIdOnly = await prisma.member.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemberFindManyArgs>(args?: SelectSubset<T, MemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Member.
     * @param {MemberCreateArgs} args - Arguments to create a Member.
     * @example
     * // Create one Member
     * const Member = await prisma.member.create({
     *   data: {
     *     // ... data to create a Member
     *   }
     * })
     * 
     */
    create<T extends MemberCreateArgs>(args: SelectSubset<T, MemberCreateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Members.
     * @param {MemberCreateManyArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemberCreateManyArgs>(args?: SelectSubset<T, MemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Members and returns the data saved in the database.
     * @param {MemberCreateManyAndReturnArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Members and only return the `id`
     * const memberWithIdOnly = await prisma.member.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemberCreateManyAndReturnArgs>(args?: SelectSubset<T, MemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Member.
     * @param {MemberDeleteArgs} args - Arguments to delete one Member.
     * @example
     * // Delete one Member
     * const Member = await prisma.member.delete({
     *   where: {
     *     // ... filter to delete one Member
     *   }
     * })
     * 
     */
    delete<T extends MemberDeleteArgs>(args: SelectSubset<T, MemberDeleteArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Member.
     * @param {MemberUpdateArgs} args - Arguments to update one Member.
     * @example
     * // Update one Member
     * const member = await prisma.member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemberUpdateArgs>(args: SelectSubset<T, MemberUpdateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Members.
     * @param {MemberDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemberDeleteManyArgs>(args?: SelectSubset<T, MemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemberUpdateManyArgs>(args: SelectSubset<T, MemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Member.
     * @param {MemberUpsertArgs} args - Arguments to update or create a Member.
     * @example
     * // Update or create a Member
     * const member = await prisma.member.upsert({
     *   create: {
     *     // ... data to create a Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Member we want to update
     *   }
     * })
     */
    upsert<T extends MemberUpsertArgs>(args: SelectSubset<T, MemberUpsertArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.member.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MemberCountArgs>(
      args?: Subset<T, MemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberAggregateArgs>(args: Subset<T, MemberAggregateArgs>): Prisma.PrismaPromise<GetMemberAggregateType<T>>

    /**
     * Group by Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberGroupByArgs['orderBy'] }
        : { orderBy?: MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Member model
   */
  readonly fields: MemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Member$userArgs<ExtArgs> = {}>(args?: Subset<T, Member$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    groups<T extends Member$groupsArgs<ExtArgs> = {}>(args?: Subset<T, Member$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findMany"> | Null>
    journeyStages<T extends Member$journeyStagesArgs<ExtArgs> = {}>(args?: Subset<T, Member$journeyStagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "findMany"> | Null>
    careLogs<T extends Member$careLogsArgs<ExtArgs> = {}>(args?: Subset<T, Member$careLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "findMany"> | Null>
    eventAttendances<T extends Member$eventAttendancesArgs<ExtArgs> = {}>(args?: Subset<T, Member$eventAttendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends Member$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Member$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "findMany"> | Null>
    familyConnections<T extends Member$familyConnectionsArgs<ExtArgs> = {}>(args?: Subset<T, Member$familyConnectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "findMany"> | Null>
    relatedConnections<T extends Member$relatedConnectionsArgs<ExtArgs> = {}>(args?: Subset<T, Member$relatedConnectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Member model
   */ 
  interface MemberFieldRefs {
    readonly id: FieldRef<"Member", 'String'>
    readonly userId: FieldRef<"Member", 'String'>
    readonly firstName: FieldRef<"Member", 'String'>
    readonly lastName: FieldRef<"Member", 'String'>
    readonly email: FieldRef<"Member", 'String'>
    readonly phone: FieldRef<"Member", 'String'>
    readonly dateOfBirth: FieldRef<"Member", 'DateTime'>
    readonly gender: FieldRef<"Member", 'Gender'>
    readonly address: FieldRef<"Member", 'String'>
    readonly maritalStatus: FieldRef<"Member", 'MaritalStatus'>
    readonly spiritualStatus: FieldRef<"Member", 'String'>
    readonly profilePhotoUrl: FieldRef<"Member", 'String'>
    readonly notes: FieldRef<"Member", 'String'>
    readonly isActive: FieldRef<"Member", 'Boolean'>
    readonly createdAt: FieldRef<"Member", 'DateTime'>
    readonly updatedAt: FieldRef<"Member", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Member findUnique
   */
  export type MemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findUniqueOrThrow
   */
  export type MemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findFirst
   */
  export type MemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findFirstOrThrow
   */
  export type MemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findMany
   */
  export type MemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member create
   */
  export type MemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to create a Member.
     */
    data: XOR<MemberCreateInput, MemberUncheckedCreateInput>
  }

  /**
   * Member createMany
   */
  export type MemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Member createManyAndReturn
   */
  export type MemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Member update
   */
  export type MemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to update a Member.
     */
    data: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
    /**
     * Choose, which Member to update.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member updateMany
   */
  export type MemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
  }

  /**
   * Member upsert
   */
  export type MemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The filter to search for the Member to update in case it exists.
     */
    where: MemberWhereUniqueInput
    /**
     * In case the Member found by the `where` argument doesn't exist, create a new Member with this data.
     */
    create: XOR<MemberCreateInput, MemberUncheckedCreateInput>
    /**
     * In case the Member was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
  }

  /**
   * Member delete
   */
  export type MemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter which Member to delete.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member deleteMany
   */
  export type MemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to delete
     */
    where?: MemberWhereInput
  }

  /**
   * Member.user
   */
  export type Member$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Member.groups
   */
  export type Member$groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    where?: GroupMemberWhereInput
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    cursor?: GroupMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupMemberScalarFieldEnum | GroupMemberScalarFieldEnum[]
  }

  /**
   * Member.journeyStages
   */
  export type Member$journeyStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    where?: JourneyStageWhereInput
    orderBy?: JourneyStageOrderByWithRelationInput | JourneyStageOrderByWithRelationInput[]
    cursor?: JourneyStageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JourneyStageScalarFieldEnum | JourneyStageScalarFieldEnum[]
  }

  /**
   * Member.careLogs
   */
  export type Member$careLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    where?: CareLogWhereInput
    orderBy?: CareLogOrderByWithRelationInput | CareLogOrderByWithRelationInput[]
    cursor?: CareLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CareLogScalarFieldEnum | CareLogScalarFieldEnum[]
  }

  /**
   * Member.eventAttendances
   */
  export type Member$eventAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    where?: EventAttendanceWhereInput
    orderBy?: EventAttendanceOrderByWithRelationInput | EventAttendanceOrderByWithRelationInput[]
    cursor?: EventAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventAttendanceScalarFieldEnum | EventAttendanceScalarFieldEnum[]
  }

  /**
   * Member.tags
   */
  export type Member$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    where?: MemberTagWhereInput
    orderBy?: MemberTagOrderByWithRelationInput | MemberTagOrderByWithRelationInput[]
    cursor?: MemberTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberTagScalarFieldEnum | MemberTagScalarFieldEnum[]
  }

  /**
   * Member.familyConnections
   */
  export type Member$familyConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    where?: MemberFamilyWhereInput
    orderBy?: MemberFamilyOrderByWithRelationInput | MemberFamilyOrderByWithRelationInput[]
    cursor?: MemberFamilyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberFamilyScalarFieldEnum | MemberFamilyScalarFieldEnum[]
  }

  /**
   * Member.relatedConnections
   */
  export type Member$relatedConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    where?: MemberFamilyWhereInput
    orderBy?: MemberFamilyOrderByWithRelationInput | MemberFamilyOrderByWithRelationInput[]
    cursor?: MemberFamilyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberFamilyScalarFieldEnum | MemberFamilyScalarFieldEnum[]
  }

  /**
   * Member without action
   */
  export type MemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
  }


  /**
   * Model Group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.GroupType | null
    description: string | null
    leaderId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.GroupType | null
    description: string | null
    leaderId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    name: number
    type: number
    description: number
    leaderId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GroupMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    leaderId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    leaderId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    leaderId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithAggregationInput | GroupOrderByWithAggregationInput[]
    by: GroupScalarFieldEnum[] | GroupScalarFieldEnum
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }

  export type GroupGroupByOutputType = {
    id: string
    name: string
    type: $Enums.GroupType
    description: string | null
    leaderId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: GroupCountAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    leaderId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Group$membersArgs<ExtArgs>
    events?: boolean | Group$eventsArgs<ExtArgs>
    files?: boolean | Group$filesArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    leaderId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["group"]>

  export type GroupSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    leaderId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Group$membersArgs<ExtArgs>
    events?: boolean | Group$eventsArgs<ExtArgs>
    files?: boolean | Group$filesArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Group"
    objects: {
      members: Prisma.$GroupMemberPayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      files: Prisma.$GroupFilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.GroupType
      description: string | null
      leaderId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["group"]>
    composites: {}
  }

  type GroupGetPayload<S extends boolean | null | undefined | GroupDefaultArgs> = $Result.GetResult<Prisma.$GroupPayload, S>

  type GroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Group'], meta: { name: 'Group' } }
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupFindUniqueArgs>(args: SelectSubset<T, GroupFindUniqueArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Group that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupFindFirstArgs>(args?: SelectSubset<T, GroupFindFirstArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupFindManyArgs>(args?: SelectSubset<T, GroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
     */
    create<T extends GroupCreateArgs>(args: SelectSubset<T, GroupCreateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Groups.
     * @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupCreateManyArgs>(args?: SelectSubset<T, GroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Groups and returns the data saved in the database.
     * @param {GroupCreateManyAndReturnArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Groups and only return the `id`
     * const groupWithIdOnly = await prisma.group.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
     */
    delete<T extends GroupDeleteArgs>(args: SelectSubset<T, GroupDeleteArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupUpdateArgs>(args: SelectSubset<T, GroupUpdateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupDeleteManyArgs>(args?: SelectSubset<T, GroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupUpdateManyArgs>(args: SelectSubset<T, GroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
     */
    upsert<T extends GroupUpsertArgs>(args: SelectSubset<T, GroupUpsertArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Group model
   */
  readonly fields: GroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Group$membersArgs<ExtArgs> = {}>(args?: Subset<T, Group$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findMany"> | Null>
    events<T extends Group$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Group$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    files<T extends Group$filesArgs<ExtArgs> = {}>(args?: Subset<T, Group$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Group model
   */ 
  interface GroupFieldRefs {
    readonly id: FieldRef<"Group", 'String'>
    readonly name: FieldRef<"Group", 'String'>
    readonly type: FieldRef<"Group", 'GroupType'>
    readonly description: FieldRef<"Group", 'String'>
    readonly leaderId: FieldRef<"Group", 'String'>
    readonly isActive: FieldRef<"Group", 'Boolean'>
    readonly createdAt: FieldRef<"Group", 'DateTime'>
    readonly updatedAt: FieldRef<"Group", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Group findUnique
   */
  export type GroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findFirst
   */
  export type GroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findMany
   */
  export type GroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group create
   */
  export type GroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }

  /**
   * Group createMany
   */
  export type GroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Group createManyAndReturn
   */
  export type GroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Group update
   */
  export type GroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }

  /**
   * Group upsert
   */
  export type GroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }

  /**
   * Group delete
   */
  export type GroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }

  /**
   * Group.members
   */
  export type Group$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    where?: GroupMemberWhereInput
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    cursor?: GroupMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupMemberScalarFieldEnum | GroupMemberScalarFieldEnum[]
  }

  /**
   * Group.events
   */
  export type Group$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Group.files
   */
  export type Group$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
    where?: GroupFileWhereInput
    orderBy?: GroupFileOrderByWithRelationInput | GroupFileOrderByWithRelationInput[]
    cursor?: GroupFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupFileScalarFieldEnum | GroupFileScalarFieldEnum[]
  }

  /**
   * Group without action
   */
  export type GroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
  }


  /**
   * Model GroupMember
   */

  export type AggregateGroupMember = {
    _count: GroupMemberCountAggregateOutputType | null
    _min: GroupMemberMinAggregateOutputType | null
    _max: GroupMemberMaxAggregateOutputType | null
  }

  export type GroupMemberMinAggregateOutputType = {
    id: string | null
    memberId: string | null
    groupId: string | null
    joinedAt: Date | null
    isActive: boolean | null
  }

  export type GroupMemberMaxAggregateOutputType = {
    id: string | null
    memberId: string | null
    groupId: string | null
    joinedAt: Date | null
    isActive: boolean | null
  }

  export type GroupMemberCountAggregateOutputType = {
    id: number
    memberId: number
    groupId: number
    joinedAt: number
    isActive: number
    _all: number
  }


  export type GroupMemberMinAggregateInputType = {
    id?: true
    memberId?: true
    groupId?: true
    joinedAt?: true
    isActive?: true
  }

  export type GroupMemberMaxAggregateInputType = {
    id?: true
    memberId?: true
    groupId?: true
    joinedAt?: true
    isActive?: true
  }

  export type GroupMemberCountAggregateInputType = {
    id?: true
    memberId?: true
    groupId?: true
    joinedAt?: true
    isActive?: true
    _all?: true
  }

  export type GroupMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupMember to aggregate.
     */
    where?: GroupMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMembers to fetch.
     */
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupMembers
    **/
    _count?: true | GroupMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMemberMaxAggregateInputType
  }

  export type GetGroupMemberAggregateType<T extends GroupMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupMember[P]>
      : GetScalarType<T[P], AggregateGroupMember[P]>
  }




  export type GroupMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupMemberWhereInput
    orderBy?: GroupMemberOrderByWithAggregationInput | GroupMemberOrderByWithAggregationInput[]
    by: GroupMemberScalarFieldEnum[] | GroupMemberScalarFieldEnum
    having?: GroupMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupMemberCountAggregateInputType | true
    _min?: GroupMemberMinAggregateInputType
    _max?: GroupMemberMaxAggregateInputType
  }

  export type GroupMemberGroupByOutputType = {
    id: string
    memberId: string
    groupId: string
    joinedAt: Date
    isActive: boolean
    _count: GroupMemberCountAggregateOutputType | null
    _min: GroupMemberMinAggregateOutputType | null
    _max: GroupMemberMaxAggregateOutputType | null
  }

  type GetGroupMemberGroupByPayload<T extends GroupMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupMemberGroupByOutputType[P]>
            : GetScalarType<T[P], GroupMemberGroupByOutputType[P]>
        }
      >
    >


  export type GroupMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    groupId?: boolean
    joinedAt?: boolean
    isActive?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupMember"]>

  export type GroupMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    groupId?: boolean
    joinedAt?: boolean
    isActive?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupMember"]>

  export type GroupMemberSelectScalar = {
    id?: boolean
    memberId?: boolean
    groupId?: boolean
    joinedAt?: boolean
    isActive?: boolean
  }

  export type GroupMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type GroupMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $GroupMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupMember"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      group: Prisma.$GroupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      memberId: string
      groupId: string
      joinedAt: Date
      isActive: boolean
    }, ExtArgs["result"]["groupMember"]>
    composites: {}
  }

  type GroupMemberGetPayload<S extends boolean | null | undefined | GroupMemberDefaultArgs> = $Result.GetResult<Prisma.$GroupMemberPayload, S>

  type GroupMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupMemberCountAggregateInputType | true
    }

  export interface GroupMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupMember'], meta: { name: 'GroupMember' } }
    /**
     * Find zero or one GroupMember that matches the filter.
     * @param {GroupMemberFindUniqueArgs} args - Arguments to find a GroupMember
     * @example
     * // Get one GroupMember
     * const groupMember = await prisma.groupMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupMemberFindUniqueArgs>(args: SelectSubset<T, GroupMemberFindUniqueArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GroupMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupMemberFindUniqueOrThrowArgs} args - Arguments to find a GroupMember
     * @example
     * // Get one GroupMember
     * const groupMember = await prisma.groupMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GroupMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberFindFirstArgs} args - Arguments to find a GroupMember
     * @example
     * // Get one GroupMember
     * const groupMember = await prisma.groupMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupMemberFindFirstArgs>(args?: SelectSubset<T, GroupMemberFindFirstArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GroupMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberFindFirstOrThrowArgs} args - Arguments to find a GroupMember
     * @example
     * // Get one GroupMember
     * const groupMember = await prisma.groupMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GroupMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupMembers
     * const groupMembers = await prisma.groupMember.findMany()
     * 
     * // Get first 10 GroupMembers
     * const groupMembers = await prisma.groupMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupMemberWithIdOnly = await prisma.groupMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupMemberFindManyArgs>(args?: SelectSubset<T, GroupMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GroupMember.
     * @param {GroupMemberCreateArgs} args - Arguments to create a GroupMember.
     * @example
     * // Create one GroupMember
     * const GroupMember = await prisma.groupMember.create({
     *   data: {
     *     // ... data to create a GroupMember
     *   }
     * })
     * 
     */
    create<T extends GroupMemberCreateArgs>(args: SelectSubset<T, GroupMemberCreateArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GroupMembers.
     * @param {GroupMemberCreateManyArgs} args - Arguments to create many GroupMembers.
     * @example
     * // Create many GroupMembers
     * const groupMember = await prisma.groupMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupMemberCreateManyArgs>(args?: SelectSubset<T, GroupMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupMembers and returns the data saved in the database.
     * @param {GroupMemberCreateManyAndReturnArgs} args - Arguments to create many GroupMembers.
     * @example
     * // Create many GroupMembers
     * const groupMember = await prisma.groupMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupMembers and only return the `id`
     * const groupMemberWithIdOnly = await prisma.groupMember.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GroupMember.
     * @param {GroupMemberDeleteArgs} args - Arguments to delete one GroupMember.
     * @example
     * // Delete one GroupMember
     * const GroupMember = await prisma.groupMember.delete({
     *   where: {
     *     // ... filter to delete one GroupMember
     *   }
     * })
     * 
     */
    delete<T extends GroupMemberDeleteArgs>(args: SelectSubset<T, GroupMemberDeleteArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GroupMember.
     * @param {GroupMemberUpdateArgs} args - Arguments to update one GroupMember.
     * @example
     * // Update one GroupMember
     * const groupMember = await prisma.groupMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupMemberUpdateArgs>(args: SelectSubset<T, GroupMemberUpdateArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GroupMembers.
     * @param {GroupMemberDeleteManyArgs} args - Arguments to filter GroupMembers to delete.
     * @example
     * // Delete a few GroupMembers
     * const { count } = await prisma.groupMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupMemberDeleteManyArgs>(args?: SelectSubset<T, GroupMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupMembers
     * const groupMember = await prisma.groupMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupMemberUpdateManyArgs>(args: SelectSubset<T, GroupMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupMember.
     * @param {GroupMemberUpsertArgs} args - Arguments to update or create a GroupMember.
     * @example
     * // Update or create a GroupMember
     * const groupMember = await prisma.groupMember.upsert({
     *   create: {
     *     // ... data to create a GroupMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupMember we want to update
     *   }
     * })
     */
    upsert<T extends GroupMemberUpsertArgs>(args: SelectSubset<T, GroupMemberUpsertArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GroupMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberCountArgs} args - Arguments to filter GroupMembers to count.
     * @example
     * // Count the number of GroupMembers
     * const count = await prisma.groupMember.count({
     *   where: {
     *     // ... the filter for the GroupMembers we want to count
     *   }
     * })
    **/
    count<T extends GroupMemberCountArgs>(
      args?: Subset<T, GroupMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupMemberAggregateArgs>(args: Subset<T, GroupMemberAggregateArgs>): Prisma.PrismaPromise<GetGroupMemberAggregateType<T>>

    /**
     * Group by GroupMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupMemberGroupByArgs['orderBy'] }
        : { orderBy?: GroupMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupMember model
   */
  readonly fields: GroupMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    group<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupMember model
   */ 
  interface GroupMemberFieldRefs {
    readonly id: FieldRef<"GroupMember", 'String'>
    readonly memberId: FieldRef<"GroupMember", 'String'>
    readonly groupId: FieldRef<"GroupMember", 'String'>
    readonly joinedAt: FieldRef<"GroupMember", 'DateTime'>
    readonly isActive: FieldRef<"GroupMember", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * GroupMember findUnique
   */
  export type GroupMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter, which GroupMember to fetch.
     */
    where: GroupMemberWhereUniqueInput
  }

  /**
   * GroupMember findUniqueOrThrow
   */
  export type GroupMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter, which GroupMember to fetch.
     */
    where: GroupMemberWhereUniqueInput
  }

  /**
   * GroupMember findFirst
   */
  export type GroupMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter, which GroupMember to fetch.
     */
    where?: GroupMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMembers to fetch.
     */
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupMembers.
     */
    cursor?: GroupMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupMembers.
     */
    distinct?: GroupMemberScalarFieldEnum | GroupMemberScalarFieldEnum[]
  }

  /**
   * GroupMember findFirstOrThrow
   */
  export type GroupMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter, which GroupMember to fetch.
     */
    where?: GroupMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMembers to fetch.
     */
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupMembers.
     */
    cursor?: GroupMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupMembers.
     */
    distinct?: GroupMemberScalarFieldEnum | GroupMemberScalarFieldEnum[]
  }

  /**
   * GroupMember findMany
   */
  export type GroupMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter, which GroupMembers to fetch.
     */
    where?: GroupMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMembers to fetch.
     */
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupMembers.
     */
    cursor?: GroupMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMembers.
     */
    skip?: number
    distinct?: GroupMemberScalarFieldEnum | GroupMemberScalarFieldEnum[]
  }

  /**
   * GroupMember create
   */
  export type GroupMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupMember.
     */
    data: XOR<GroupMemberCreateInput, GroupMemberUncheckedCreateInput>
  }

  /**
   * GroupMember createMany
   */
  export type GroupMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupMembers.
     */
    data: GroupMemberCreateManyInput | GroupMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GroupMember createManyAndReturn
   */
  export type GroupMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GroupMembers.
     */
    data: GroupMemberCreateManyInput | GroupMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupMember update
   */
  export type GroupMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupMember.
     */
    data: XOR<GroupMemberUpdateInput, GroupMemberUncheckedUpdateInput>
    /**
     * Choose, which GroupMember to update.
     */
    where: GroupMemberWhereUniqueInput
  }

  /**
   * GroupMember updateMany
   */
  export type GroupMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupMembers.
     */
    data: XOR<GroupMemberUpdateManyMutationInput, GroupMemberUncheckedUpdateManyInput>
    /**
     * Filter which GroupMembers to update
     */
    where?: GroupMemberWhereInput
  }

  /**
   * GroupMember upsert
   */
  export type GroupMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupMember to update in case it exists.
     */
    where: GroupMemberWhereUniqueInput
    /**
     * In case the GroupMember found by the `where` argument doesn't exist, create a new GroupMember with this data.
     */
    create: XOR<GroupMemberCreateInput, GroupMemberUncheckedCreateInput>
    /**
     * In case the GroupMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupMemberUpdateInput, GroupMemberUncheckedUpdateInput>
  }

  /**
   * GroupMember delete
   */
  export type GroupMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter which GroupMember to delete.
     */
    where: GroupMemberWhereUniqueInput
  }

  /**
   * GroupMember deleteMany
   */
  export type GroupMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupMembers to delete
     */
    where?: GroupMemberWhereInput
  }

  /**
   * GroupMember without action
   */
  export type GroupMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
  }


  /**
   * Model JourneyTemplate
   */

  export type AggregateJourneyTemplate = {
    _count: JourneyTemplateCountAggregateOutputType | null
    _min: JourneyTemplateMinAggregateOutputType | null
    _max: JourneyTemplateMaxAggregateOutputType | null
  }

  export type JourneyTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JourneyTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JourneyTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JourneyTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JourneyTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JourneyTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JourneyTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JourneyTemplate to aggregate.
     */
    where?: JourneyTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyTemplates to fetch.
     */
    orderBy?: JourneyTemplateOrderByWithRelationInput | JourneyTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JourneyTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JourneyTemplates
    **/
    _count?: true | JourneyTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JourneyTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JourneyTemplateMaxAggregateInputType
  }

  export type GetJourneyTemplateAggregateType<T extends JourneyTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateJourneyTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJourneyTemplate[P]>
      : GetScalarType<T[P], AggregateJourneyTemplate[P]>
  }




  export type JourneyTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JourneyTemplateWhereInput
    orderBy?: JourneyTemplateOrderByWithAggregationInput | JourneyTemplateOrderByWithAggregationInput[]
    by: JourneyTemplateScalarFieldEnum[] | JourneyTemplateScalarFieldEnum
    having?: JourneyTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JourneyTemplateCountAggregateInputType | true
    _min?: JourneyTemplateMinAggregateInputType
    _max?: JourneyTemplateMaxAggregateInputType
  }

  export type JourneyTemplateGroupByOutputType = {
    id: string
    name: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: JourneyTemplateCountAggregateOutputType | null
    _min: JourneyTemplateMinAggregateOutputType | null
    _max: JourneyTemplateMaxAggregateOutputType | null
  }

  type GetJourneyTemplateGroupByPayload<T extends JourneyTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JourneyTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JourneyTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JourneyTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], JourneyTemplateGroupByOutputType[P]>
        }
      >
    >


  export type JourneyTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    milestones?: boolean | JourneyTemplate$milestonesArgs<ExtArgs>
    journeyStages?: boolean | JourneyTemplate$journeyStagesArgs<ExtArgs>
    _count?: boolean | JourneyTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journeyTemplate"]>

  export type JourneyTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["journeyTemplate"]>

  export type JourneyTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JourneyTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    milestones?: boolean | JourneyTemplate$milestonesArgs<ExtArgs>
    journeyStages?: boolean | JourneyTemplate$journeyStagesArgs<ExtArgs>
    _count?: boolean | JourneyTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JourneyTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $JourneyTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JourneyTemplate"
    objects: {
      milestones: Prisma.$MilestonePayload<ExtArgs>[]
      journeyStages: Prisma.$JourneyStagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["journeyTemplate"]>
    composites: {}
  }

  type JourneyTemplateGetPayload<S extends boolean | null | undefined | JourneyTemplateDefaultArgs> = $Result.GetResult<Prisma.$JourneyTemplatePayload, S>

  type JourneyTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JourneyTemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JourneyTemplateCountAggregateInputType | true
    }

  export interface JourneyTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JourneyTemplate'], meta: { name: 'JourneyTemplate' } }
    /**
     * Find zero or one JourneyTemplate that matches the filter.
     * @param {JourneyTemplateFindUniqueArgs} args - Arguments to find a JourneyTemplate
     * @example
     * // Get one JourneyTemplate
     * const journeyTemplate = await prisma.journeyTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JourneyTemplateFindUniqueArgs>(args: SelectSubset<T, JourneyTemplateFindUniqueArgs<ExtArgs>>): Prisma__JourneyTemplateClient<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JourneyTemplate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JourneyTemplateFindUniqueOrThrowArgs} args - Arguments to find a JourneyTemplate
     * @example
     * // Get one JourneyTemplate
     * const journeyTemplate = await prisma.journeyTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JourneyTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, JourneyTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JourneyTemplateClient<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JourneyTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyTemplateFindFirstArgs} args - Arguments to find a JourneyTemplate
     * @example
     * // Get one JourneyTemplate
     * const journeyTemplate = await prisma.journeyTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JourneyTemplateFindFirstArgs>(args?: SelectSubset<T, JourneyTemplateFindFirstArgs<ExtArgs>>): Prisma__JourneyTemplateClient<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JourneyTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyTemplateFindFirstOrThrowArgs} args - Arguments to find a JourneyTemplate
     * @example
     * // Get one JourneyTemplate
     * const journeyTemplate = await prisma.journeyTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JourneyTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, JourneyTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__JourneyTemplateClient<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JourneyTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JourneyTemplates
     * const journeyTemplates = await prisma.journeyTemplate.findMany()
     * 
     * // Get first 10 JourneyTemplates
     * const journeyTemplates = await prisma.journeyTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const journeyTemplateWithIdOnly = await prisma.journeyTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JourneyTemplateFindManyArgs>(args?: SelectSubset<T, JourneyTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JourneyTemplate.
     * @param {JourneyTemplateCreateArgs} args - Arguments to create a JourneyTemplate.
     * @example
     * // Create one JourneyTemplate
     * const JourneyTemplate = await prisma.journeyTemplate.create({
     *   data: {
     *     // ... data to create a JourneyTemplate
     *   }
     * })
     * 
     */
    create<T extends JourneyTemplateCreateArgs>(args: SelectSubset<T, JourneyTemplateCreateArgs<ExtArgs>>): Prisma__JourneyTemplateClient<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JourneyTemplates.
     * @param {JourneyTemplateCreateManyArgs} args - Arguments to create many JourneyTemplates.
     * @example
     * // Create many JourneyTemplates
     * const journeyTemplate = await prisma.journeyTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JourneyTemplateCreateManyArgs>(args?: SelectSubset<T, JourneyTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JourneyTemplates and returns the data saved in the database.
     * @param {JourneyTemplateCreateManyAndReturnArgs} args - Arguments to create many JourneyTemplates.
     * @example
     * // Create many JourneyTemplates
     * const journeyTemplate = await prisma.journeyTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JourneyTemplates and only return the `id`
     * const journeyTemplateWithIdOnly = await prisma.journeyTemplate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JourneyTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, JourneyTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JourneyTemplate.
     * @param {JourneyTemplateDeleteArgs} args - Arguments to delete one JourneyTemplate.
     * @example
     * // Delete one JourneyTemplate
     * const JourneyTemplate = await prisma.journeyTemplate.delete({
     *   where: {
     *     // ... filter to delete one JourneyTemplate
     *   }
     * })
     * 
     */
    delete<T extends JourneyTemplateDeleteArgs>(args: SelectSubset<T, JourneyTemplateDeleteArgs<ExtArgs>>): Prisma__JourneyTemplateClient<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JourneyTemplate.
     * @param {JourneyTemplateUpdateArgs} args - Arguments to update one JourneyTemplate.
     * @example
     * // Update one JourneyTemplate
     * const journeyTemplate = await prisma.journeyTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JourneyTemplateUpdateArgs>(args: SelectSubset<T, JourneyTemplateUpdateArgs<ExtArgs>>): Prisma__JourneyTemplateClient<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JourneyTemplates.
     * @param {JourneyTemplateDeleteManyArgs} args - Arguments to filter JourneyTemplates to delete.
     * @example
     * // Delete a few JourneyTemplates
     * const { count } = await prisma.journeyTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JourneyTemplateDeleteManyArgs>(args?: SelectSubset<T, JourneyTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JourneyTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JourneyTemplates
     * const journeyTemplate = await prisma.journeyTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JourneyTemplateUpdateManyArgs>(args: SelectSubset<T, JourneyTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JourneyTemplate.
     * @param {JourneyTemplateUpsertArgs} args - Arguments to update or create a JourneyTemplate.
     * @example
     * // Update or create a JourneyTemplate
     * const journeyTemplate = await prisma.journeyTemplate.upsert({
     *   create: {
     *     // ... data to create a JourneyTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JourneyTemplate we want to update
     *   }
     * })
     */
    upsert<T extends JourneyTemplateUpsertArgs>(args: SelectSubset<T, JourneyTemplateUpsertArgs<ExtArgs>>): Prisma__JourneyTemplateClient<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JourneyTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyTemplateCountArgs} args - Arguments to filter JourneyTemplates to count.
     * @example
     * // Count the number of JourneyTemplates
     * const count = await prisma.journeyTemplate.count({
     *   where: {
     *     // ... the filter for the JourneyTemplates we want to count
     *   }
     * })
    **/
    count<T extends JourneyTemplateCountArgs>(
      args?: Subset<T, JourneyTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JourneyTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JourneyTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JourneyTemplateAggregateArgs>(args: Subset<T, JourneyTemplateAggregateArgs>): Prisma.PrismaPromise<GetJourneyTemplateAggregateType<T>>

    /**
     * Group by JourneyTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JourneyTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JourneyTemplateGroupByArgs['orderBy'] }
        : { orderBy?: JourneyTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JourneyTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJourneyTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JourneyTemplate model
   */
  readonly fields: JourneyTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JourneyTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JourneyTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    milestones<T extends JourneyTemplate$milestonesArgs<ExtArgs> = {}>(args?: Subset<T, JourneyTemplate$milestonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findMany"> | Null>
    journeyStages<T extends JourneyTemplate$journeyStagesArgs<ExtArgs> = {}>(args?: Subset<T, JourneyTemplate$journeyStagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JourneyTemplate model
   */ 
  interface JourneyTemplateFieldRefs {
    readonly id: FieldRef<"JourneyTemplate", 'String'>
    readonly name: FieldRef<"JourneyTemplate", 'String'>
    readonly description: FieldRef<"JourneyTemplate", 'String'>
    readonly isActive: FieldRef<"JourneyTemplate", 'Boolean'>
    readonly createdAt: FieldRef<"JourneyTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"JourneyTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JourneyTemplate findUnique
   */
  export type JourneyTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyTemplateInclude<ExtArgs> | null
    /**
     * Filter, which JourneyTemplate to fetch.
     */
    where: JourneyTemplateWhereUniqueInput
  }

  /**
   * JourneyTemplate findUniqueOrThrow
   */
  export type JourneyTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyTemplateInclude<ExtArgs> | null
    /**
     * Filter, which JourneyTemplate to fetch.
     */
    where: JourneyTemplateWhereUniqueInput
  }

  /**
   * JourneyTemplate findFirst
   */
  export type JourneyTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyTemplateInclude<ExtArgs> | null
    /**
     * Filter, which JourneyTemplate to fetch.
     */
    where?: JourneyTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyTemplates to fetch.
     */
    orderBy?: JourneyTemplateOrderByWithRelationInput | JourneyTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JourneyTemplates.
     */
    cursor?: JourneyTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JourneyTemplates.
     */
    distinct?: JourneyTemplateScalarFieldEnum | JourneyTemplateScalarFieldEnum[]
  }

  /**
   * JourneyTemplate findFirstOrThrow
   */
  export type JourneyTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyTemplateInclude<ExtArgs> | null
    /**
     * Filter, which JourneyTemplate to fetch.
     */
    where?: JourneyTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyTemplates to fetch.
     */
    orderBy?: JourneyTemplateOrderByWithRelationInput | JourneyTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JourneyTemplates.
     */
    cursor?: JourneyTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JourneyTemplates.
     */
    distinct?: JourneyTemplateScalarFieldEnum | JourneyTemplateScalarFieldEnum[]
  }

  /**
   * JourneyTemplate findMany
   */
  export type JourneyTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyTemplateInclude<ExtArgs> | null
    /**
     * Filter, which JourneyTemplates to fetch.
     */
    where?: JourneyTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyTemplates to fetch.
     */
    orderBy?: JourneyTemplateOrderByWithRelationInput | JourneyTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JourneyTemplates.
     */
    cursor?: JourneyTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyTemplates.
     */
    skip?: number
    distinct?: JourneyTemplateScalarFieldEnum | JourneyTemplateScalarFieldEnum[]
  }

  /**
   * JourneyTemplate create
   */
  export type JourneyTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a JourneyTemplate.
     */
    data: XOR<JourneyTemplateCreateInput, JourneyTemplateUncheckedCreateInput>
  }

  /**
   * JourneyTemplate createMany
   */
  export type JourneyTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JourneyTemplates.
     */
    data: JourneyTemplateCreateManyInput | JourneyTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JourneyTemplate createManyAndReturn
   */
  export type JourneyTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many JourneyTemplates.
     */
    data: JourneyTemplateCreateManyInput | JourneyTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JourneyTemplate update
   */
  export type JourneyTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a JourneyTemplate.
     */
    data: XOR<JourneyTemplateUpdateInput, JourneyTemplateUncheckedUpdateInput>
    /**
     * Choose, which JourneyTemplate to update.
     */
    where: JourneyTemplateWhereUniqueInput
  }

  /**
   * JourneyTemplate updateMany
   */
  export type JourneyTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JourneyTemplates.
     */
    data: XOR<JourneyTemplateUpdateManyMutationInput, JourneyTemplateUncheckedUpdateManyInput>
    /**
     * Filter which JourneyTemplates to update
     */
    where?: JourneyTemplateWhereInput
  }

  /**
   * JourneyTemplate upsert
   */
  export type JourneyTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the JourneyTemplate to update in case it exists.
     */
    where: JourneyTemplateWhereUniqueInput
    /**
     * In case the JourneyTemplate found by the `where` argument doesn't exist, create a new JourneyTemplate with this data.
     */
    create: XOR<JourneyTemplateCreateInput, JourneyTemplateUncheckedCreateInput>
    /**
     * In case the JourneyTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JourneyTemplateUpdateInput, JourneyTemplateUncheckedUpdateInput>
  }

  /**
   * JourneyTemplate delete
   */
  export type JourneyTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyTemplateInclude<ExtArgs> | null
    /**
     * Filter which JourneyTemplate to delete.
     */
    where: JourneyTemplateWhereUniqueInput
  }

  /**
   * JourneyTemplate deleteMany
   */
  export type JourneyTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JourneyTemplates to delete
     */
    where?: JourneyTemplateWhereInput
  }

  /**
   * JourneyTemplate.milestones
   */
  export type JourneyTemplate$milestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    where?: MilestoneWhereInput
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    cursor?: MilestoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * JourneyTemplate.journeyStages
   */
  export type JourneyTemplate$journeyStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    where?: JourneyStageWhereInput
    orderBy?: JourneyStageOrderByWithRelationInput | JourneyStageOrderByWithRelationInput[]
    cursor?: JourneyStageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JourneyStageScalarFieldEnum | JourneyStageScalarFieldEnum[]
  }

  /**
   * JourneyTemplate without action
   */
  export type JourneyTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyTemplate
     */
    select?: JourneyTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyTemplateInclude<ExtArgs> | null
  }


  /**
   * Model Milestone
   */

  export type AggregateMilestone = {
    _count: MilestoneCountAggregateOutputType | null
    _avg: MilestoneAvgAggregateOutputType | null
    _sum: MilestoneSumAggregateOutputType | null
    _min: MilestoneMinAggregateOutputType | null
    _max: MilestoneMaxAggregateOutputType | null
  }

  export type MilestoneAvgAggregateOutputType = {
    sequence: number | null
  }

  export type MilestoneSumAggregateOutputType = {
    sequence: number | null
  }

  export type MilestoneMinAggregateOutputType = {
    id: string | null
    templateId: string | null
    name: string | null
    description: string | null
    sequence: number | null
  }

  export type MilestoneMaxAggregateOutputType = {
    id: string | null
    templateId: string | null
    name: string | null
    description: string | null
    sequence: number | null
  }

  export type MilestoneCountAggregateOutputType = {
    id: number
    templateId: number
    name: number
    description: number
    sequence: number
    _all: number
  }


  export type MilestoneAvgAggregateInputType = {
    sequence?: true
  }

  export type MilestoneSumAggregateInputType = {
    sequence?: true
  }

  export type MilestoneMinAggregateInputType = {
    id?: true
    templateId?: true
    name?: true
    description?: true
    sequence?: true
  }

  export type MilestoneMaxAggregateInputType = {
    id?: true
    templateId?: true
    name?: true
    description?: true
    sequence?: true
  }

  export type MilestoneCountAggregateInputType = {
    id?: true
    templateId?: true
    name?: true
    description?: true
    sequence?: true
    _all?: true
  }

  export type MilestoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Milestone to aggregate.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Milestones
    **/
    _count?: true | MilestoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MilestoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MilestoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MilestoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MilestoneMaxAggregateInputType
  }

  export type GetMilestoneAggregateType<T extends MilestoneAggregateArgs> = {
        [P in keyof T & keyof AggregateMilestone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMilestone[P]>
      : GetScalarType<T[P], AggregateMilestone[P]>
  }




  export type MilestoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilestoneWhereInput
    orderBy?: MilestoneOrderByWithAggregationInput | MilestoneOrderByWithAggregationInput[]
    by: MilestoneScalarFieldEnum[] | MilestoneScalarFieldEnum
    having?: MilestoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MilestoneCountAggregateInputType | true
    _avg?: MilestoneAvgAggregateInputType
    _sum?: MilestoneSumAggregateInputType
    _min?: MilestoneMinAggregateInputType
    _max?: MilestoneMaxAggregateInputType
  }

  export type MilestoneGroupByOutputType = {
    id: string
    templateId: string
    name: string
    description: string | null
    sequence: number
    _count: MilestoneCountAggregateOutputType | null
    _avg: MilestoneAvgAggregateOutputType | null
    _sum: MilestoneSumAggregateOutputType | null
    _min: MilestoneMinAggregateOutputType | null
    _max: MilestoneMaxAggregateOutputType | null
  }

  type GetMilestoneGroupByPayload<T extends MilestoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MilestoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MilestoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MilestoneGroupByOutputType[P]>
            : GetScalarType<T[P], MilestoneGroupByOutputType[P]>
        }
      >
    >


  export type MilestoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    name?: boolean
    description?: boolean
    sequence?: boolean
    template?: boolean | JourneyTemplateDefaultArgs<ExtArgs>
    journeyStages?: boolean | Milestone$journeyStagesArgs<ExtArgs>
    _count?: boolean | MilestoneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["milestone"]>

  export type MilestoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    name?: boolean
    description?: boolean
    sequence?: boolean
    template?: boolean | JourneyTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["milestone"]>

  export type MilestoneSelectScalar = {
    id?: boolean
    templateId?: boolean
    name?: boolean
    description?: boolean
    sequence?: boolean
  }

  export type MilestoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | JourneyTemplateDefaultArgs<ExtArgs>
    journeyStages?: boolean | Milestone$journeyStagesArgs<ExtArgs>
    _count?: boolean | MilestoneCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MilestoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | JourneyTemplateDefaultArgs<ExtArgs>
  }

  export type $MilestonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Milestone"
    objects: {
      template: Prisma.$JourneyTemplatePayload<ExtArgs>
      journeyStages: Prisma.$JourneyStagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      templateId: string
      name: string
      description: string | null
      sequence: number
    }, ExtArgs["result"]["milestone"]>
    composites: {}
  }

  type MilestoneGetPayload<S extends boolean | null | undefined | MilestoneDefaultArgs> = $Result.GetResult<Prisma.$MilestonePayload, S>

  type MilestoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MilestoneFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MilestoneCountAggregateInputType | true
    }

  export interface MilestoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Milestone'], meta: { name: 'Milestone' } }
    /**
     * Find zero or one Milestone that matches the filter.
     * @param {MilestoneFindUniqueArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MilestoneFindUniqueArgs>(args: SelectSubset<T, MilestoneFindUniqueArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Milestone that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MilestoneFindUniqueOrThrowArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MilestoneFindUniqueOrThrowArgs>(args: SelectSubset<T, MilestoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Milestone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindFirstArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MilestoneFindFirstArgs>(args?: SelectSubset<T, MilestoneFindFirstArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Milestone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindFirstOrThrowArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MilestoneFindFirstOrThrowArgs>(args?: SelectSubset<T, MilestoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Milestones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Milestones
     * const milestones = await prisma.milestone.findMany()
     * 
     * // Get first 10 Milestones
     * const milestones = await prisma.milestone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const milestoneWithIdOnly = await prisma.milestone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MilestoneFindManyArgs>(args?: SelectSubset<T, MilestoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Milestone.
     * @param {MilestoneCreateArgs} args - Arguments to create a Milestone.
     * @example
     * // Create one Milestone
     * const Milestone = await prisma.milestone.create({
     *   data: {
     *     // ... data to create a Milestone
     *   }
     * })
     * 
     */
    create<T extends MilestoneCreateArgs>(args: SelectSubset<T, MilestoneCreateArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Milestones.
     * @param {MilestoneCreateManyArgs} args - Arguments to create many Milestones.
     * @example
     * // Create many Milestones
     * const milestone = await prisma.milestone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MilestoneCreateManyArgs>(args?: SelectSubset<T, MilestoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Milestones and returns the data saved in the database.
     * @param {MilestoneCreateManyAndReturnArgs} args - Arguments to create many Milestones.
     * @example
     * // Create many Milestones
     * const milestone = await prisma.milestone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Milestones and only return the `id`
     * const milestoneWithIdOnly = await prisma.milestone.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MilestoneCreateManyAndReturnArgs>(args?: SelectSubset<T, MilestoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Milestone.
     * @param {MilestoneDeleteArgs} args - Arguments to delete one Milestone.
     * @example
     * // Delete one Milestone
     * const Milestone = await prisma.milestone.delete({
     *   where: {
     *     // ... filter to delete one Milestone
     *   }
     * })
     * 
     */
    delete<T extends MilestoneDeleteArgs>(args: SelectSubset<T, MilestoneDeleteArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Milestone.
     * @param {MilestoneUpdateArgs} args - Arguments to update one Milestone.
     * @example
     * // Update one Milestone
     * const milestone = await prisma.milestone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MilestoneUpdateArgs>(args: SelectSubset<T, MilestoneUpdateArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Milestones.
     * @param {MilestoneDeleteManyArgs} args - Arguments to filter Milestones to delete.
     * @example
     * // Delete a few Milestones
     * const { count } = await prisma.milestone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MilestoneDeleteManyArgs>(args?: SelectSubset<T, MilestoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Milestones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Milestones
     * const milestone = await prisma.milestone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MilestoneUpdateManyArgs>(args: SelectSubset<T, MilestoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Milestone.
     * @param {MilestoneUpsertArgs} args - Arguments to update or create a Milestone.
     * @example
     * // Update or create a Milestone
     * const milestone = await prisma.milestone.upsert({
     *   create: {
     *     // ... data to create a Milestone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Milestone we want to update
     *   }
     * })
     */
    upsert<T extends MilestoneUpsertArgs>(args: SelectSubset<T, MilestoneUpsertArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Milestones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneCountArgs} args - Arguments to filter Milestones to count.
     * @example
     * // Count the number of Milestones
     * const count = await prisma.milestone.count({
     *   where: {
     *     // ... the filter for the Milestones we want to count
     *   }
     * })
    **/
    count<T extends MilestoneCountArgs>(
      args?: Subset<T, MilestoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MilestoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Milestone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MilestoneAggregateArgs>(args: Subset<T, MilestoneAggregateArgs>): Prisma.PrismaPromise<GetMilestoneAggregateType<T>>

    /**
     * Group by Milestone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MilestoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MilestoneGroupByArgs['orderBy'] }
        : { orderBy?: MilestoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MilestoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMilestoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Milestone model
   */
  readonly fields: MilestoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Milestone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MilestoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends JourneyTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JourneyTemplateDefaultArgs<ExtArgs>>): Prisma__JourneyTemplateClient<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    journeyStages<T extends Milestone$journeyStagesArgs<ExtArgs> = {}>(args?: Subset<T, Milestone$journeyStagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Milestone model
   */ 
  interface MilestoneFieldRefs {
    readonly id: FieldRef<"Milestone", 'String'>
    readonly templateId: FieldRef<"Milestone", 'String'>
    readonly name: FieldRef<"Milestone", 'String'>
    readonly description: FieldRef<"Milestone", 'String'>
    readonly sequence: FieldRef<"Milestone", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Milestone findUnique
   */
  export type MilestoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone findUniqueOrThrow
   */
  export type MilestoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone findFirst
   */
  export type MilestoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Milestones.
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Milestones.
     */
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Milestone findFirstOrThrow
   */
  export type MilestoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Milestones.
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Milestones.
     */
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Milestone findMany
   */
  export type MilestoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestones to fetch.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Milestones.
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Milestone create
   */
  export type MilestoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * The data needed to create a Milestone.
     */
    data: XOR<MilestoneCreateInput, MilestoneUncheckedCreateInput>
  }

  /**
   * Milestone createMany
   */
  export type MilestoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Milestones.
     */
    data: MilestoneCreateManyInput | MilestoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Milestone createManyAndReturn
   */
  export type MilestoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Milestones.
     */
    data: MilestoneCreateManyInput | MilestoneCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Milestone update
   */
  export type MilestoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * The data needed to update a Milestone.
     */
    data: XOR<MilestoneUpdateInput, MilestoneUncheckedUpdateInput>
    /**
     * Choose, which Milestone to update.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone updateMany
   */
  export type MilestoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Milestones.
     */
    data: XOR<MilestoneUpdateManyMutationInput, MilestoneUncheckedUpdateManyInput>
    /**
     * Filter which Milestones to update
     */
    where?: MilestoneWhereInput
  }

  /**
   * Milestone upsert
   */
  export type MilestoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * The filter to search for the Milestone to update in case it exists.
     */
    where: MilestoneWhereUniqueInput
    /**
     * In case the Milestone found by the `where` argument doesn't exist, create a new Milestone with this data.
     */
    create: XOR<MilestoneCreateInput, MilestoneUncheckedCreateInput>
    /**
     * In case the Milestone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MilestoneUpdateInput, MilestoneUncheckedUpdateInput>
  }

  /**
   * Milestone delete
   */
  export type MilestoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter which Milestone to delete.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone deleteMany
   */
  export type MilestoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Milestones to delete
     */
    where?: MilestoneWhereInput
  }

  /**
   * Milestone.journeyStages
   */
  export type Milestone$journeyStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    where?: JourneyStageWhereInput
    orderBy?: JourneyStageOrderByWithRelationInput | JourneyStageOrderByWithRelationInput[]
    cursor?: JourneyStageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JourneyStageScalarFieldEnum | JourneyStageScalarFieldEnum[]
  }

  /**
   * Milestone without action
   */
  export type MilestoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
  }


  /**
   * Model JourneyStage
   */

  export type AggregateJourneyStage = {
    _count: JourneyStageCountAggregateOutputType | null
    _min: JourneyStageMinAggregateOutputType | null
    _max: JourneyStageMaxAggregateOutputType | null
  }

  export type JourneyStageMinAggregateOutputType = {
    id: string | null
    memberId: string | null
    templateId: string | null
    milestoneId: string | null
    status: $Enums.StageStatus | null
    autoProgress: boolean | null
    flagForFollowUp: boolean | null
    completedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JourneyStageMaxAggregateOutputType = {
    id: string | null
    memberId: string | null
    templateId: string | null
    milestoneId: string | null
    status: $Enums.StageStatus | null
    autoProgress: boolean | null
    flagForFollowUp: boolean | null
    completedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JourneyStageCountAggregateOutputType = {
    id: number
    memberId: number
    templateId: number
    milestoneId: number
    status: number
    autoProgress: number
    flagForFollowUp: number
    completedAt: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JourneyStageMinAggregateInputType = {
    id?: true
    memberId?: true
    templateId?: true
    milestoneId?: true
    status?: true
    autoProgress?: true
    flagForFollowUp?: true
    completedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JourneyStageMaxAggregateInputType = {
    id?: true
    memberId?: true
    templateId?: true
    milestoneId?: true
    status?: true
    autoProgress?: true
    flagForFollowUp?: true
    completedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JourneyStageCountAggregateInputType = {
    id?: true
    memberId?: true
    templateId?: true
    milestoneId?: true
    status?: true
    autoProgress?: true
    flagForFollowUp?: true
    completedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JourneyStageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JourneyStage to aggregate.
     */
    where?: JourneyStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyStages to fetch.
     */
    orderBy?: JourneyStageOrderByWithRelationInput | JourneyStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JourneyStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JourneyStages
    **/
    _count?: true | JourneyStageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JourneyStageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JourneyStageMaxAggregateInputType
  }

  export type GetJourneyStageAggregateType<T extends JourneyStageAggregateArgs> = {
        [P in keyof T & keyof AggregateJourneyStage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJourneyStage[P]>
      : GetScalarType<T[P], AggregateJourneyStage[P]>
  }




  export type JourneyStageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JourneyStageWhereInput
    orderBy?: JourneyStageOrderByWithAggregationInput | JourneyStageOrderByWithAggregationInput[]
    by: JourneyStageScalarFieldEnum[] | JourneyStageScalarFieldEnum
    having?: JourneyStageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JourneyStageCountAggregateInputType | true
    _min?: JourneyStageMinAggregateInputType
    _max?: JourneyStageMaxAggregateInputType
  }

  export type JourneyStageGroupByOutputType = {
    id: string
    memberId: string
    templateId: string
    milestoneId: string
    status: $Enums.StageStatus
    autoProgress: boolean
    flagForFollowUp: boolean
    completedAt: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: JourneyStageCountAggregateOutputType | null
    _min: JourneyStageMinAggregateOutputType | null
    _max: JourneyStageMaxAggregateOutputType | null
  }

  type GetJourneyStageGroupByPayload<T extends JourneyStageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JourneyStageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JourneyStageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JourneyStageGroupByOutputType[P]>
            : GetScalarType<T[P], JourneyStageGroupByOutputType[P]>
        }
      >
    >


  export type JourneyStageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    templateId?: boolean
    milestoneId?: boolean
    status?: boolean
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    template?: boolean | JourneyTemplateDefaultArgs<ExtArgs>
    milestone?: boolean | MilestoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journeyStage"]>

  export type JourneyStageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    templateId?: boolean
    milestoneId?: boolean
    status?: boolean
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    template?: boolean | JourneyTemplateDefaultArgs<ExtArgs>
    milestone?: boolean | MilestoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journeyStage"]>

  export type JourneyStageSelectScalar = {
    id?: boolean
    memberId?: boolean
    templateId?: boolean
    milestoneId?: boolean
    status?: boolean
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JourneyStageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    template?: boolean | JourneyTemplateDefaultArgs<ExtArgs>
    milestone?: boolean | MilestoneDefaultArgs<ExtArgs>
  }
  export type JourneyStageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    template?: boolean | JourneyTemplateDefaultArgs<ExtArgs>
    milestone?: boolean | MilestoneDefaultArgs<ExtArgs>
  }

  export type $JourneyStagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JourneyStage"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      template: Prisma.$JourneyTemplatePayload<ExtArgs>
      milestone: Prisma.$MilestonePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      memberId: string
      templateId: string
      milestoneId: string
      status: $Enums.StageStatus
      autoProgress: boolean
      flagForFollowUp: boolean
      completedAt: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["journeyStage"]>
    composites: {}
  }

  type JourneyStageGetPayload<S extends boolean | null | undefined | JourneyStageDefaultArgs> = $Result.GetResult<Prisma.$JourneyStagePayload, S>

  type JourneyStageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JourneyStageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JourneyStageCountAggregateInputType | true
    }

  export interface JourneyStageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JourneyStage'], meta: { name: 'JourneyStage' } }
    /**
     * Find zero or one JourneyStage that matches the filter.
     * @param {JourneyStageFindUniqueArgs} args - Arguments to find a JourneyStage
     * @example
     * // Get one JourneyStage
     * const journeyStage = await prisma.journeyStage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JourneyStageFindUniqueArgs>(args: SelectSubset<T, JourneyStageFindUniqueArgs<ExtArgs>>): Prisma__JourneyStageClient<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JourneyStage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JourneyStageFindUniqueOrThrowArgs} args - Arguments to find a JourneyStage
     * @example
     * // Get one JourneyStage
     * const journeyStage = await prisma.journeyStage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JourneyStageFindUniqueOrThrowArgs>(args: SelectSubset<T, JourneyStageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JourneyStageClient<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JourneyStage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyStageFindFirstArgs} args - Arguments to find a JourneyStage
     * @example
     * // Get one JourneyStage
     * const journeyStage = await prisma.journeyStage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JourneyStageFindFirstArgs>(args?: SelectSubset<T, JourneyStageFindFirstArgs<ExtArgs>>): Prisma__JourneyStageClient<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JourneyStage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyStageFindFirstOrThrowArgs} args - Arguments to find a JourneyStage
     * @example
     * // Get one JourneyStage
     * const journeyStage = await prisma.journeyStage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JourneyStageFindFirstOrThrowArgs>(args?: SelectSubset<T, JourneyStageFindFirstOrThrowArgs<ExtArgs>>): Prisma__JourneyStageClient<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JourneyStages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyStageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JourneyStages
     * const journeyStages = await prisma.journeyStage.findMany()
     * 
     * // Get first 10 JourneyStages
     * const journeyStages = await prisma.journeyStage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const journeyStageWithIdOnly = await prisma.journeyStage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JourneyStageFindManyArgs>(args?: SelectSubset<T, JourneyStageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JourneyStage.
     * @param {JourneyStageCreateArgs} args - Arguments to create a JourneyStage.
     * @example
     * // Create one JourneyStage
     * const JourneyStage = await prisma.journeyStage.create({
     *   data: {
     *     // ... data to create a JourneyStage
     *   }
     * })
     * 
     */
    create<T extends JourneyStageCreateArgs>(args: SelectSubset<T, JourneyStageCreateArgs<ExtArgs>>): Prisma__JourneyStageClient<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JourneyStages.
     * @param {JourneyStageCreateManyArgs} args - Arguments to create many JourneyStages.
     * @example
     * // Create many JourneyStages
     * const journeyStage = await prisma.journeyStage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JourneyStageCreateManyArgs>(args?: SelectSubset<T, JourneyStageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JourneyStages and returns the data saved in the database.
     * @param {JourneyStageCreateManyAndReturnArgs} args - Arguments to create many JourneyStages.
     * @example
     * // Create many JourneyStages
     * const journeyStage = await prisma.journeyStage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JourneyStages and only return the `id`
     * const journeyStageWithIdOnly = await prisma.journeyStage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JourneyStageCreateManyAndReturnArgs>(args?: SelectSubset<T, JourneyStageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JourneyStage.
     * @param {JourneyStageDeleteArgs} args - Arguments to delete one JourneyStage.
     * @example
     * // Delete one JourneyStage
     * const JourneyStage = await prisma.journeyStage.delete({
     *   where: {
     *     // ... filter to delete one JourneyStage
     *   }
     * })
     * 
     */
    delete<T extends JourneyStageDeleteArgs>(args: SelectSubset<T, JourneyStageDeleteArgs<ExtArgs>>): Prisma__JourneyStageClient<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JourneyStage.
     * @param {JourneyStageUpdateArgs} args - Arguments to update one JourneyStage.
     * @example
     * // Update one JourneyStage
     * const journeyStage = await prisma.journeyStage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JourneyStageUpdateArgs>(args: SelectSubset<T, JourneyStageUpdateArgs<ExtArgs>>): Prisma__JourneyStageClient<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JourneyStages.
     * @param {JourneyStageDeleteManyArgs} args - Arguments to filter JourneyStages to delete.
     * @example
     * // Delete a few JourneyStages
     * const { count } = await prisma.journeyStage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JourneyStageDeleteManyArgs>(args?: SelectSubset<T, JourneyStageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JourneyStages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyStageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JourneyStages
     * const journeyStage = await prisma.journeyStage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JourneyStageUpdateManyArgs>(args: SelectSubset<T, JourneyStageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JourneyStage.
     * @param {JourneyStageUpsertArgs} args - Arguments to update or create a JourneyStage.
     * @example
     * // Update or create a JourneyStage
     * const journeyStage = await prisma.journeyStage.upsert({
     *   create: {
     *     // ... data to create a JourneyStage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JourneyStage we want to update
     *   }
     * })
     */
    upsert<T extends JourneyStageUpsertArgs>(args: SelectSubset<T, JourneyStageUpsertArgs<ExtArgs>>): Prisma__JourneyStageClient<$Result.GetResult<Prisma.$JourneyStagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JourneyStages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyStageCountArgs} args - Arguments to filter JourneyStages to count.
     * @example
     * // Count the number of JourneyStages
     * const count = await prisma.journeyStage.count({
     *   where: {
     *     // ... the filter for the JourneyStages we want to count
     *   }
     * })
    **/
    count<T extends JourneyStageCountArgs>(
      args?: Subset<T, JourneyStageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JourneyStageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JourneyStage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyStageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JourneyStageAggregateArgs>(args: Subset<T, JourneyStageAggregateArgs>): Prisma.PrismaPromise<GetJourneyStageAggregateType<T>>

    /**
     * Group by JourneyStage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyStageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JourneyStageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JourneyStageGroupByArgs['orderBy'] }
        : { orderBy?: JourneyStageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JourneyStageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJourneyStageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JourneyStage model
   */
  readonly fields: JourneyStageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JourneyStage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JourneyStageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    template<T extends JourneyTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JourneyTemplateDefaultArgs<ExtArgs>>): Prisma__JourneyTemplateClient<$Result.GetResult<Prisma.$JourneyTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    milestone<T extends MilestoneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MilestoneDefaultArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JourneyStage model
   */ 
  interface JourneyStageFieldRefs {
    readonly id: FieldRef<"JourneyStage", 'String'>
    readonly memberId: FieldRef<"JourneyStage", 'String'>
    readonly templateId: FieldRef<"JourneyStage", 'String'>
    readonly milestoneId: FieldRef<"JourneyStage", 'String'>
    readonly status: FieldRef<"JourneyStage", 'StageStatus'>
    readonly autoProgress: FieldRef<"JourneyStage", 'Boolean'>
    readonly flagForFollowUp: FieldRef<"JourneyStage", 'Boolean'>
    readonly completedAt: FieldRef<"JourneyStage", 'DateTime'>
    readonly notes: FieldRef<"JourneyStage", 'String'>
    readonly createdAt: FieldRef<"JourneyStage", 'DateTime'>
    readonly updatedAt: FieldRef<"JourneyStage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JourneyStage findUnique
   */
  export type JourneyStageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    /**
     * Filter, which JourneyStage to fetch.
     */
    where: JourneyStageWhereUniqueInput
  }

  /**
   * JourneyStage findUniqueOrThrow
   */
  export type JourneyStageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    /**
     * Filter, which JourneyStage to fetch.
     */
    where: JourneyStageWhereUniqueInput
  }

  /**
   * JourneyStage findFirst
   */
  export type JourneyStageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    /**
     * Filter, which JourneyStage to fetch.
     */
    where?: JourneyStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyStages to fetch.
     */
    orderBy?: JourneyStageOrderByWithRelationInput | JourneyStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JourneyStages.
     */
    cursor?: JourneyStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JourneyStages.
     */
    distinct?: JourneyStageScalarFieldEnum | JourneyStageScalarFieldEnum[]
  }

  /**
   * JourneyStage findFirstOrThrow
   */
  export type JourneyStageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    /**
     * Filter, which JourneyStage to fetch.
     */
    where?: JourneyStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyStages to fetch.
     */
    orderBy?: JourneyStageOrderByWithRelationInput | JourneyStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JourneyStages.
     */
    cursor?: JourneyStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JourneyStages.
     */
    distinct?: JourneyStageScalarFieldEnum | JourneyStageScalarFieldEnum[]
  }

  /**
   * JourneyStage findMany
   */
  export type JourneyStageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    /**
     * Filter, which JourneyStages to fetch.
     */
    where?: JourneyStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyStages to fetch.
     */
    orderBy?: JourneyStageOrderByWithRelationInput | JourneyStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JourneyStages.
     */
    cursor?: JourneyStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyStages.
     */
    skip?: number
    distinct?: JourneyStageScalarFieldEnum | JourneyStageScalarFieldEnum[]
  }

  /**
   * JourneyStage create
   */
  export type JourneyStageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    /**
     * The data needed to create a JourneyStage.
     */
    data: XOR<JourneyStageCreateInput, JourneyStageUncheckedCreateInput>
  }

  /**
   * JourneyStage createMany
   */
  export type JourneyStageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JourneyStages.
     */
    data: JourneyStageCreateManyInput | JourneyStageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JourneyStage createManyAndReturn
   */
  export type JourneyStageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many JourneyStages.
     */
    data: JourneyStageCreateManyInput | JourneyStageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JourneyStage update
   */
  export type JourneyStageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    /**
     * The data needed to update a JourneyStage.
     */
    data: XOR<JourneyStageUpdateInput, JourneyStageUncheckedUpdateInput>
    /**
     * Choose, which JourneyStage to update.
     */
    where: JourneyStageWhereUniqueInput
  }

  /**
   * JourneyStage updateMany
   */
  export type JourneyStageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JourneyStages.
     */
    data: XOR<JourneyStageUpdateManyMutationInput, JourneyStageUncheckedUpdateManyInput>
    /**
     * Filter which JourneyStages to update
     */
    where?: JourneyStageWhereInput
  }

  /**
   * JourneyStage upsert
   */
  export type JourneyStageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    /**
     * The filter to search for the JourneyStage to update in case it exists.
     */
    where: JourneyStageWhereUniqueInput
    /**
     * In case the JourneyStage found by the `where` argument doesn't exist, create a new JourneyStage with this data.
     */
    create: XOR<JourneyStageCreateInput, JourneyStageUncheckedCreateInput>
    /**
     * In case the JourneyStage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JourneyStageUpdateInput, JourneyStageUncheckedUpdateInput>
  }

  /**
   * JourneyStage delete
   */
  export type JourneyStageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
    /**
     * Filter which JourneyStage to delete.
     */
    where: JourneyStageWhereUniqueInput
  }

  /**
   * JourneyStage deleteMany
   */
  export type JourneyStageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JourneyStages to delete
     */
    where?: JourneyStageWhereInput
  }

  /**
   * JourneyStage without action
   */
  export type JourneyStageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyStage
     */
    select?: JourneyStageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyStageInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    dateTime: Date | null
    location: string | null
    groupId: string | null
    calendarType: $Enums.CalendarType | null
    createdBy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    dateTime: Date | null
    location: string | null
    groupId: string | null
    calendarType: $Enums.CalendarType | null
    createdBy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    dateTime: number
    location: number
    groupId: number
    calendarType: number
    createdBy: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dateTime?: true
    location?: true
    groupId?: true
    calendarType?: true
    createdBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dateTime?: true
    location?: true
    groupId?: true
    calendarType?: true
    createdBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dateTime?: true
    location?: true
    groupId?: true
    calendarType?: true
    createdBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    title: string
    description: string | null
    dateTime: Date
    location: string | null
    groupId: string | null
    calendarType: $Enums.CalendarType
    createdBy: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dateTime?: boolean
    location?: boolean
    groupId?: boolean
    calendarType?: boolean
    createdBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    group?: boolean | Event$groupArgs<ExtArgs>
    attendances?: boolean | Event$attendancesArgs<ExtArgs>
    tags?: boolean | Event$tagsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dateTime?: boolean
    location?: boolean
    groupId?: boolean
    calendarType?: boolean
    createdBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    group?: boolean | Event$groupArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    dateTime?: boolean
    location?: boolean
    groupId?: boolean
    calendarType?: boolean
    createdBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | Event$groupArgs<ExtArgs>
    attendances?: boolean | Event$attendancesArgs<ExtArgs>
    tags?: boolean | Event$tagsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | Event$groupArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      group: Prisma.$GroupPayload<ExtArgs> | null
      attendances: Prisma.$EventAttendancePayload<ExtArgs>[]
      tags: Prisma.$EventTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      dateTime: Date
      location: string | null
      groupId: string | null
      calendarType: $Enums.CalendarType
      createdBy: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    group<T extends Event$groupArgs<ExtArgs> = {}>(args?: Subset<T, Event$groupArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    attendances<T extends Event$attendancesArgs<ExtArgs> = {}>(args?: Subset<T, Event$attendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends Event$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Event$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly dateTime: FieldRef<"Event", 'DateTime'>
    readonly location: FieldRef<"Event", 'String'>
    readonly groupId: FieldRef<"Event", 'String'>
    readonly calendarType: FieldRef<"Event", 'CalendarType'>
    readonly createdBy: FieldRef<"Event", 'String'>
    readonly isActive: FieldRef<"Event", 'Boolean'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.group
   */
  export type Event$groupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
  }

  /**
   * Event.attendances
   */
  export type Event$attendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    where?: EventAttendanceWhereInput
    orderBy?: EventAttendanceOrderByWithRelationInput | EventAttendanceOrderByWithRelationInput[]
    cursor?: EventAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventAttendanceScalarFieldEnum | EventAttendanceScalarFieldEnum[]
  }

  /**
   * Event.tags
   */
  export type Event$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    where?: EventTagWhereInput
    orderBy?: EventTagOrderByWithRelationInput | EventTagOrderByWithRelationInput[]
    cursor?: EventTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventTagScalarFieldEnum | EventTagScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model EventAttendance
   */

  export type AggregateEventAttendance = {
    _count: EventAttendanceCountAggregateOutputType | null
    _min: EventAttendanceMinAggregateOutputType | null
    _max: EventAttendanceMaxAggregateOutputType | null
  }

  export type EventAttendanceMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    memberId: string | null
    attended: boolean | null
    checkedInAt: Date | null
  }

  export type EventAttendanceMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    memberId: string | null
    attended: boolean | null
    checkedInAt: Date | null
  }

  export type EventAttendanceCountAggregateOutputType = {
    id: number
    eventId: number
    memberId: number
    attended: number
    checkedInAt: number
    _all: number
  }


  export type EventAttendanceMinAggregateInputType = {
    id?: true
    eventId?: true
    memberId?: true
    attended?: true
    checkedInAt?: true
  }

  export type EventAttendanceMaxAggregateInputType = {
    id?: true
    eventId?: true
    memberId?: true
    attended?: true
    checkedInAt?: true
  }

  export type EventAttendanceCountAggregateInputType = {
    id?: true
    eventId?: true
    memberId?: true
    attended?: true
    checkedInAt?: true
    _all?: true
  }

  export type EventAttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventAttendance to aggregate.
     */
    where?: EventAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendances to fetch.
     */
    orderBy?: EventAttendanceOrderByWithRelationInput | EventAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventAttendances
    **/
    _count?: true | EventAttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventAttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventAttendanceMaxAggregateInputType
  }

  export type GetEventAttendanceAggregateType<T extends EventAttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateEventAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventAttendance[P]>
      : GetScalarType<T[P], AggregateEventAttendance[P]>
  }




  export type EventAttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventAttendanceWhereInput
    orderBy?: EventAttendanceOrderByWithAggregationInput | EventAttendanceOrderByWithAggregationInput[]
    by: EventAttendanceScalarFieldEnum[] | EventAttendanceScalarFieldEnum
    having?: EventAttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventAttendanceCountAggregateInputType | true
    _min?: EventAttendanceMinAggregateInputType
    _max?: EventAttendanceMaxAggregateInputType
  }

  export type EventAttendanceGroupByOutputType = {
    id: string
    eventId: string
    memberId: string
    attended: boolean
    checkedInAt: Date | null
    _count: EventAttendanceCountAggregateOutputType | null
    _min: EventAttendanceMinAggregateOutputType | null
    _max: EventAttendanceMaxAggregateOutputType | null
  }

  type GetEventAttendanceGroupByPayload<T extends EventAttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventAttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventAttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventAttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], EventAttendanceGroupByOutputType[P]>
        }
      >
    >


  export type EventAttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    memberId?: boolean
    attended?: boolean
    checkedInAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventAttendance"]>

  export type EventAttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    memberId?: boolean
    attended?: boolean
    checkedInAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventAttendance"]>

  export type EventAttendanceSelectScalar = {
    id?: boolean
    eventId?: boolean
    memberId?: boolean
    attended?: boolean
    checkedInAt?: boolean
  }

  export type EventAttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type EventAttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $EventAttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventAttendance"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      memberId: string
      attended: boolean
      checkedInAt: Date | null
    }, ExtArgs["result"]["eventAttendance"]>
    composites: {}
  }

  type EventAttendanceGetPayload<S extends boolean | null | undefined | EventAttendanceDefaultArgs> = $Result.GetResult<Prisma.$EventAttendancePayload, S>

  type EventAttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventAttendanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventAttendanceCountAggregateInputType | true
    }

  export interface EventAttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventAttendance'], meta: { name: 'EventAttendance' } }
    /**
     * Find zero or one EventAttendance that matches the filter.
     * @param {EventAttendanceFindUniqueArgs} args - Arguments to find a EventAttendance
     * @example
     * // Get one EventAttendance
     * const eventAttendance = await prisma.eventAttendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventAttendanceFindUniqueArgs>(args: SelectSubset<T, EventAttendanceFindUniqueArgs<ExtArgs>>): Prisma__EventAttendanceClient<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventAttendance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventAttendanceFindUniqueOrThrowArgs} args - Arguments to find a EventAttendance
     * @example
     * // Get one EventAttendance
     * const eventAttendance = await prisma.eventAttendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventAttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, EventAttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventAttendanceClient<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventAttendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendanceFindFirstArgs} args - Arguments to find a EventAttendance
     * @example
     * // Get one EventAttendance
     * const eventAttendance = await prisma.eventAttendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventAttendanceFindFirstArgs>(args?: SelectSubset<T, EventAttendanceFindFirstArgs<ExtArgs>>): Prisma__EventAttendanceClient<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventAttendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendanceFindFirstOrThrowArgs} args - Arguments to find a EventAttendance
     * @example
     * // Get one EventAttendance
     * const eventAttendance = await prisma.eventAttendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventAttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, EventAttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventAttendanceClient<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventAttendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventAttendances
     * const eventAttendances = await prisma.eventAttendance.findMany()
     * 
     * // Get first 10 EventAttendances
     * const eventAttendances = await prisma.eventAttendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventAttendanceWithIdOnly = await prisma.eventAttendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventAttendanceFindManyArgs>(args?: SelectSubset<T, EventAttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventAttendance.
     * @param {EventAttendanceCreateArgs} args - Arguments to create a EventAttendance.
     * @example
     * // Create one EventAttendance
     * const EventAttendance = await prisma.eventAttendance.create({
     *   data: {
     *     // ... data to create a EventAttendance
     *   }
     * })
     * 
     */
    create<T extends EventAttendanceCreateArgs>(args: SelectSubset<T, EventAttendanceCreateArgs<ExtArgs>>): Prisma__EventAttendanceClient<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventAttendances.
     * @param {EventAttendanceCreateManyArgs} args - Arguments to create many EventAttendances.
     * @example
     * // Create many EventAttendances
     * const eventAttendance = await prisma.eventAttendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventAttendanceCreateManyArgs>(args?: SelectSubset<T, EventAttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventAttendances and returns the data saved in the database.
     * @param {EventAttendanceCreateManyAndReturnArgs} args - Arguments to create many EventAttendances.
     * @example
     * // Create many EventAttendances
     * const eventAttendance = await prisma.eventAttendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventAttendances and only return the `id`
     * const eventAttendanceWithIdOnly = await prisma.eventAttendance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventAttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, EventAttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EventAttendance.
     * @param {EventAttendanceDeleteArgs} args - Arguments to delete one EventAttendance.
     * @example
     * // Delete one EventAttendance
     * const EventAttendance = await prisma.eventAttendance.delete({
     *   where: {
     *     // ... filter to delete one EventAttendance
     *   }
     * })
     * 
     */
    delete<T extends EventAttendanceDeleteArgs>(args: SelectSubset<T, EventAttendanceDeleteArgs<ExtArgs>>): Prisma__EventAttendanceClient<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventAttendance.
     * @param {EventAttendanceUpdateArgs} args - Arguments to update one EventAttendance.
     * @example
     * // Update one EventAttendance
     * const eventAttendance = await prisma.eventAttendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventAttendanceUpdateArgs>(args: SelectSubset<T, EventAttendanceUpdateArgs<ExtArgs>>): Prisma__EventAttendanceClient<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventAttendances.
     * @param {EventAttendanceDeleteManyArgs} args - Arguments to filter EventAttendances to delete.
     * @example
     * // Delete a few EventAttendances
     * const { count } = await prisma.eventAttendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventAttendanceDeleteManyArgs>(args?: SelectSubset<T, EventAttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventAttendances
     * const eventAttendance = await prisma.eventAttendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventAttendanceUpdateManyArgs>(args: SelectSubset<T, EventAttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventAttendance.
     * @param {EventAttendanceUpsertArgs} args - Arguments to update or create a EventAttendance.
     * @example
     * // Update or create a EventAttendance
     * const eventAttendance = await prisma.eventAttendance.upsert({
     *   create: {
     *     // ... data to create a EventAttendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventAttendance we want to update
     *   }
     * })
     */
    upsert<T extends EventAttendanceUpsertArgs>(args: SelectSubset<T, EventAttendanceUpsertArgs<ExtArgs>>): Prisma__EventAttendanceClient<$Result.GetResult<Prisma.$EventAttendancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendanceCountArgs} args - Arguments to filter EventAttendances to count.
     * @example
     * // Count the number of EventAttendances
     * const count = await prisma.eventAttendance.count({
     *   where: {
     *     // ... the filter for the EventAttendances we want to count
     *   }
     * })
    **/
    count<T extends EventAttendanceCountArgs>(
      args?: Subset<T, EventAttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventAttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAttendanceAggregateArgs>(args: Subset<T, EventAttendanceAggregateArgs>): Prisma.PrismaPromise<GetEventAttendanceAggregateType<T>>

    /**
     * Group by EventAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventAttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventAttendanceGroupByArgs['orderBy'] }
        : { orderBy?: EventAttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventAttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventAttendance model
   */
  readonly fields: EventAttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventAttendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventAttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventAttendance model
   */ 
  interface EventAttendanceFieldRefs {
    readonly id: FieldRef<"EventAttendance", 'String'>
    readonly eventId: FieldRef<"EventAttendance", 'String'>
    readonly memberId: FieldRef<"EventAttendance", 'String'>
    readonly attended: FieldRef<"EventAttendance", 'Boolean'>
    readonly checkedInAt: FieldRef<"EventAttendance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventAttendance findUnique
   */
  export type EventAttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendance to fetch.
     */
    where: EventAttendanceWhereUniqueInput
  }

  /**
   * EventAttendance findUniqueOrThrow
   */
  export type EventAttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendance to fetch.
     */
    where: EventAttendanceWhereUniqueInput
  }

  /**
   * EventAttendance findFirst
   */
  export type EventAttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendance to fetch.
     */
    where?: EventAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendances to fetch.
     */
    orderBy?: EventAttendanceOrderByWithRelationInput | EventAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventAttendances.
     */
    cursor?: EventAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventAttendances.
     */
    distinct?: EventAttendanceScalarFieldEnum | EventAttendanceScalarFieldEnum[]
  }

  /**
   * EventAttendance findFirstOrThrow
   */
  export type EventAttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendance to fetch.
     */
    where?: EventAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendances to fetch.
     */
    orderBy?: EventAttendanceOrderByWithRelationInput | EventAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventAttendances.
     */
    cursor?: EventAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventAttendances.
     */
    distinct?: EventAttendanceScalarFieldEnum | EventAttendanceScalarFieldEnum[]
  }

  /**
   * EventAttendance findMany
   */
  export type EventAttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendances to fetch.
     */
    where?: EventAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendances to fetch.
     */
    orderBy?: EventAttendanceOrderByWithRelationInput | EventAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventAttendances.
     */
    cursor?: EventAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendances.
     */
    skip?: number
    distinct?: EventAttendanceScalarFieldEnum | EventAttendanceScalarFieldEnum[]
  }

  /**
   * EventAttendance create
   */
  export type EventAttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a EventAttendance.
     */
    data: XOR<EventAttendanceCreateInput, EventAttendanceUncheckedCreateInput>
  }

  /**
   * EventAttendance createMany
   */
  export type EventAttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventAttendances.
     */
    data: EventAttendanceCreateManyInput | EventAttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventAttendance createManyAndReturn
   */
  export type EventAttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EventAttendances.
     */
    data: EventAttendanceCreateManyInput | EventAttendanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventAttendance update
   */
  export type EventAttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a EventAttendance.
     */
    data: XOR<EventAttendanceUpdateInput, EventAttendanceUncheckedUpdateInput>
    /**
     * Choose, which EventAttendance to update.
     */
    where: EventAttendanceWhereUniqueInput
  }

  /**
   * EventAttendance updateMany
   */
  export type EventAttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventAttendances.
     */
    data: XOR<EventAttendanceUpdateManyMutationInput, EventAttendanceUncheckedUpdateManyInput>
    /**
     * Filter which EventAttendances to update
     */
    where?: EventAttendanceWhereInput
  }

  /**
   * EventAttendance upsert
   */
  export type EventAttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the EventAttendance to update in case it exists.
     */
    where: EventAttendanceWhereUniqueInput
    /**
     * In case the EventAttendance found by the `where` argument doesn't exist, create a new EventAttendance with this data.
     */
    create: XOR<EventAttendanceCreateInput, EventAttendanceUncheckedCreateInput>
    /**
     * In case the EventAttendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventAttendanceUpdateInput, EventAttendanceUncheckedUpdateInput>
  }

  /**
   * EventAttendance delete
   */
  export type EventAttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
    /**
     * Filter which EventAttendance to delete.
     */
    where: EventAttendanceWhereUniqueInput
  }

  /**
   * EventAttendance deleteMany
   */
  export type EventAttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventAttendances to delete
     */
    where?: EventAttendanceWhereInput
  }

  /**
   * EventAttendance without action
   */
  export type EventAttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendance
     */
    select?: EventAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendanceInclude<ExtArgs> | null
  }


  /**
   * Model CareLog
   */

  export type AggregateCareLog = {
    _count: CareLogCountAggregateOutputType | null
    _min: CareLogMinAggregateOutputType | null
    _max: CareLogMaxAggregateOutputType | null
  }

  export type CareLogMinAggregateOutputType = {
    id: string | null
    memberId: string | null
    caregiverId: string | null
    type: $Enums.CareType | null
    notes: string | null
    followUpRequired: boolean | null
    confidential: boolean | null
    followUpDate: Date | null
    createdAt: Date | null
  }

  export type CareLogMaxAggregateOutputType = {
    id: string | null
    memberId: string | null
    caregiverId: string | null
    type: $Enums.CareType | null
    notes: string | null
    followUpRequired: boolean | null
    confidential: boolean | null
    followUpDate: Date | null
    createdAt: Date | null
  }

  export type CareLogCountAggregateOutputType = {
    id: number
    memberId: number
    caregiverId: number
    type: number
    notes: number
    followUpRequired: number
    confidential: number
    followUpDate: number
    createdAt: number
    _all: number
  }


  export type CareLogMinAggregateInputType = {
    id?: true
    memberId?: true
    caregiverId?: true
    type?: true
    notes?: true
    followUpRequired?: true
    confidential?: true
    followUpDate?: true
    createdAt?: true
  }

  export type CareLogMaxAggregateInputType = {
    id?: true
    memberId?: true
    caregiverId?: true
    type?: true
    notes?: true
    followUpRequired?: true
    confidential?: true
    followUpDate?: true
    createdAt?: true
  }

  export type CareLogCountAggregateInputType = {
    id?: true
    memberId?: true
    caregiverId?: true
    type?: true
    notes?: true
    followUpRequired?: true
    confidential?: true
    followUpDate?: true
    createdAt?: true
    _all?: true
  }

  export type CareLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CareLog to aggregate.
     */
    where?: CareLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareLogs to fetch.
     */
    orderBy?: CareLogOrderByWithRelationInput | CareLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CareLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CareLogs
    **/
    _count?: true | CareLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CareLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CareLogMaxAggregateInputType
  }

  export type GetCareLogAggregateType<T extends CareLogAggregateArgs> = {
        [P in keyof T & keyof AggregateCareLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCareLog[P]>
      : GetScalarType<T[P], AggregateCareLog[P]>
  }




  export type CareLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CareLogWhereInput
    orderBy?: CareLogOrderByWithAggregationInput | CareLogOrderByWithAggregationInput[]
    by: CareLogScalarFieldEnum[] | CareLogScalarFieldEnum
    having?: CareLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CareLogCountAggregateInputType | true
    _min?: CareLogMinAggregateInputType
    _max?: CareLogMaxAggregateInputType
  }

  export type CareLogGroupByOutputType = {
    id: string
    memberId: string
    caregiverId: string
    type: $Enums.CareType
    notes: string
    followUpRequired: boolean
    confidential: boolean
    followUpDate: Date | null
    createdAt: Date
    _count: CareLogCountAggregateOutputType | null
    _min: CareLogMinAggregateOutputType | null
    _max: CareLogMaxAggregateOutputType | null
  }

  type GetCareLogGroupByPayload<T extends CareLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CareLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CareLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CareLogGroupByOutputType[P]>
            : GetScalarType<T[P], CareLogGroupByOutputType[P]>
        }
      >
    >


  export type CareLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    caregiverId?: boolean
    type?: boolean
    notes?: boolean
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: boolean
    createdAt?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    caregiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["careLog"]>

  export type CareLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    caregiverId?: boolean
    type?: boolean
    notes?: boolean
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: boolean
    createdAt?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    caregiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["careLog"]>

  export type CareLogSelectScalar = {
    id?: boolean
    memberId?: boolean
    caregiverId?: boolean
    type?: boolean
    notes?: boolean
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: boolean
    createdAt?: boolean
  }

  export type CareLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    caregiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CareLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    caregiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CareLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CareLog"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      caregiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      memberId: string
      caregiverId: string
      type: $Enums.CareType
      notes: string
      followUpRequired: boolean
      confidential: boolean
      followUpDate: Date | null
      createdAt: Date
    }, ExtArgs["result"]["careLog"]>
    composites: {}
  }

  type CareLogGetPayload<S extends boolean | null | undefined | CareLogDefaultArgs> = $Result.GetResult<Prisma.$CareLogPayload, S>

  type CareLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CareLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CareLogCountAggregateInputType | true
    }

  export interface CareLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CareLog'], meta: { name: 'CareLog' } }
    /**
     * Find zero or one CareLog that matches the filter.
     * @param {CareLogFindUniqueArgs} args - Arguments to find a CareLog
     * @example
     * // Get one CareLog
     * const careLog = await prisma.careLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CareLogFindUniqueArgs>(args: SelectSubset<T, CareLogFindUniqueArgs<ExtArgs>>): Prisma__CareLogClient<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CareLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CareLogFindUniqueOrThrowArgs} args - Arguments to find a CareLog
     * @example
     * // Get one CareLog
     * const careLog = await prisma.careLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CareLogFindUniqueOrThrowArgs>(args: SelectSubset<T, CareLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CareLogClient<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CareLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareLogFindFirstArgs} args - Arguments to find a CareLog
     * @example
     * // Get one CareLog
     * const careLog = await prisma.careLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CareLogFindFirstArgs>(args?: SelectSubset<T, CareLogFindFirstArgs<ExtArgs>>): Prisma__CareLogClient<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CareLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareLogFindFirstOrThrowArgs} args - Arguments to find a CareLog
     * @example
     * // Get one CareLog
     * const careLog = await prisma.careLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CareLogFindFirstOrThrowArgs>(args?: SelectSubset<T, CareLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__CareLogClient<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CareLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CareLogs
     * const careLogs = await prisma.careLog.findMany()
     * 
     * // Get first 10 CareLogs
     * const careLogs = await prisma.careLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const careLogWithIdOnly = await prisma.careLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CareLogFindManyArgs>(args?: SelectSubset<T, CareLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CareLog.
     * @param {CareLogCreateArgs} args - Arguments to create a CareLog.
     * @example
     * // Create one CareLog
     * const CareLog = await prisma.careLog.create({
     *   data: {
     *     // ... data to create a CareLog
     *   }
     * })
     * 
     */
    create<T extends CareLogCreateArgs>(args: SelectSubset<T, CareLogCreateArgs<ExtArgs>>): Prisma__CareLogClient<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CareLogs.
     * @param {CareLogCreateManyArgs} args - Arguments to create many CareLogs.
     * @example
     * // Create many CareLogs
     * const careLog = await prisma.careLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CareLogCreateManyArgs>(args?: SelectSubset<T, CareLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CareLogs and returns the data saved in the database.
     * @param {CareLogCreateManyAndReturnArgs} args - Arguments to create many CareLogs.
     * @example
     * // Create many CareLogs
     * const careLog = await prisma.careLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CareLogs and only return the `id`
     * const careLogWithIdOnly = await prisma.careLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CareLogCreateManyAndReturnArgs>(args?: SelectSubset<T, CareLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CareLog.
     * @param {CareLogDeleteArgs} args - Arguments to delete one CareLog.
     * @example
     * // Delete one CareLog
     * const CareLog = await prisma.careLog.delete({
     *   where: {
     *     // ... filter to delete one CareLog
     *   }
     * })
     * 
     */
    delete<T extends CareLogDeleteArgs>(args: SelectSubset<T, CareLogDeleteArgs<ExtArgs>>): Prisma__CareLogClient<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CareLog.
     * @param {CareLogUpdateArgs} args - Arguments to update one CareLog.
     * @example
     * // Update one CareLog
     * const careLog = await prisma.careLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CareLogUpdateArgs>(args: SelectSubset<T, CareLogUpdateArgs<ExtArgs>>): Prisma__CareLogClient<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CareLogs.
     * @param {CareLogDeleteManyArgs} args - Arguments to filter CareLogs to delete.
     * @example
     * // Delete a few CareLogs
     * const { count } = await prisma.careLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CareLogDeleteManyArgs>(args?: SelectSubset<T, CareLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CareLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CareLogs
     * const careLog = await prisma.careLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CareLogUpdateManyArgs>(args: SelectSubset<T, CareLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CareLog.
     * @param {CareLogUpsertArgs} args - Arguments to update or create a CareLog.
     * @example
     * // Update or create a CareLog
     * const careLog = await prisma.careLog.upsert({
     *   create: {
     *     // ... data to create a CareLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CareLog we want to update
     *   }
     * })
     */
    upsert<T extends CareLogUpsertArgs>(args: SelectSubset<T, CareLogUpsertArgs<ExtArgs>>): Prisma__CareLogClient<$Result.GetResult<Prisma.$CareLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CareLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareLogCountArgs} args - Arguments to filter CareLogs to count.
     * @example
     * // Count the number of CareLogs
     * const count = await prisma.careLog.count({
     *   where: {
     *     // ... the filter for the CareLogs we want to count
     *   }
     * })
    **/
    count<T extends CareLogCountArgs>(
      args?: Subset<T, CareLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CareLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CareLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CareLogAggregateArgs>(args: Subset<T, CareLogAggregateArgs>): Prisma.PrismaPromise<GetCareLogAggregateType<T>>

    /**
     * Group by CareLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CareLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CareLogGroupByArgs['orderBy'] }
        : { orderBy?: CareLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CareLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCareLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CareLog model
   */
  readonly fields: CareLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CareLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CareLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    caregiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CareLog model
   */ 
  interface CareLogFieldRefs {
    readonly id: FieldRef<"CareLog", 'String'>
    readonly memberId: FieldRef<"CareLog", 'String'>
    readonly caregiverId: FieldRef<"CareLog", 'String'>
    readonly type: FieldRef<"CareLog", 'CareType'>
    readonly notes: FieldRef<"CareLog", 'String'>
    readonly followUpRequired: FieldRef<"CareLog", 'Boolean'>
    readonly confidential: FieldRef<"CareLog", 'Boolean'>
    readonly followUpDate: FieldRef<"CareLog", 'DateTime'>
    readonly createdAt: FieldRef<"CareLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CareLog findUnique
   */
  export type CareLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    /**
     * Filter, which CareLog to fetch.
     */
    where: CareLogWhereUniqueInput
  }

  /**
   * CareLog findUniqueOrThrow
   */
  export type CareLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    /**
     * Filter, which CareLog to fetch.
     */
    where: CareLogWhereUniqueInput
  }

  /**
   * CareLog findFirst
   */
  export type CareLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    /**
     * Filter, which CareLog to fetch.
     */
    where?: CareLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareLogs to fetch.
     */
    orderBy?: CareLogOrderByWithRelationInput | CareLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CareLogs.
     */
    cursor?: CareLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CareLogs.
     */
    distinct?: CareLogScalarFieldEnum | CareLogScalarFieldEnum[]
  }

  /**
   * CareLog findFirstOrThrow
   */
  export type CareLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    /**
     * Filter, which CareLog to fetch.
     */
    where?: CareLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareLogs to fetch.
     */
    orderBy?: CareLogOrderByWithRelationInput | CareLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CareLogs.
     */
    cursor?: CareLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CareLogs.
     */
    distinct?: CareLogScalarFieldEnum | CareLogScalarFieldEnum[]
  }

  /**
   * CareLog findMany
   */
  export type CareLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    /**
     * Filter, which CareLogs to fetch.
     */
    where?: CareLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareLogs to fetch.
     */
    orderBy?: CareLogOrderByWithRelationInput | CareLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CareLogs.
     */
    cursor?: CareLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareLogs.
     */
    skip?: number
    distinct?: CareLogScalarFieldEnum | CareLogScalarFieldEnum[]
  }

  /**
   * CareLog create
   */
  export type CareLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    /**
     * The data needed to create a CareLog.
     */
    data: XOR<CareLogCreateInput, CareLogUncheckedCreateInput>
  }

  /**
   * CareLog createMany
   */
  export type CareLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CareLogs.
     */
    data: CareLogCreateManyInput | CareLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CareLog createManyAndReturn
   */
  export type CareLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CareLogs.
     */
    data: CareLogCreateManyInput | CareLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CareLog update
   */
  export type CareLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    /**
     * The data needed to update a CareLog.
     */
    data: XOR<CareLogUpdateInput, CareLogUncheckedUpdateInput>
    /**
     * Choose, which CareLog to update.
     */
    where: CareLogWhereUniqueInput
  }

  /**
   * CareLog updateMany
   */
  export type CareLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CareLogs.
     */
    data: XOR<CareLogUpdateManyMutationInput, CareLogUncheckedUpdateManyInput>
    /**
     * Filter which CareLogs to update
     */
    where?: CareLogWhereInput
  }

  /**
   * CareLog upsert
   */
  export type CareLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    /**
     * The filter to search for the CareLog to update in case it exists.
     */
    where: CareLogWhereUniqueInput
    /**
     * In case the CareLog found by the `where` argument doesn't exist, create a new CareLog with this data.
     */
    create: XOR<CareLogCreateInput, CareLogUncheckedCreateInput>
    /**
     * In case the CareLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CareLogUpdateInput, CareLogUncheckedUpdateInput>
  }

  /**
   * CareLog delete
   */
  export type CareLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
    /**
     * Filter which CareLog to delete.
     */
    where: CareLogWhereUniqueInput
  }

  /**
   * CareLog deleteMany
   */
  export type CareLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CareLogs to delete
     */
    where?: CareLogWhereInput
  }

  /**
   * CareLog without action
   */
  export type CareLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareLog
     */
    select?: CareLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareLogInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    label: string | null
    category: $Enums.TagCategory | null
    color: string | null
    createdAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    label: string | null
    category: $Enums.TagCategory | null
    color: string | null
    createdAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    label: number
    category: number
    color: number
    createdAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    label?: true
    category?: true
    color?: true
    createdAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    label?: true
    category?: true
    color?: true
    createdAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    label?: true
    category?: true
    color?: true
    createdAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    label: string
    category: $Enums.TagCategory
    color: string
    createdAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    category?: boolean
    color?: boolean
    createdAt?: boolean
    members?: boolean | Tag$membersArgs<ExtArgs>
    events?: boolean | Tag$eventsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    category?: boolean
    color?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    label?: boolean
    category?: boolean
    color?: boolean
    createdAt?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Tag$membersArgs<ExtArgs>
    events?: boolean | Tag$eventsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      members: Prisma.$MemberTagPayload<ExtArgs>[]
      events: Prisma.$EventTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      label: string
      category: $Enums.TagCategory
      color: string
      createdAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Tag$membersArgs<ExtArgs> = {}>(args?: Subset<T, Tag$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "findMany"> | Null>
    events<T extends Tag$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly label: FieldRef<"Tag", 'String'>
    readonly category: FieldRef<"Tag", 'TagCategory'>
    readonly color: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.members
   */
  export type Tag$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    where?: MemberTagWhereInput
    orderBy?: MemberTagOrderByWithRelationInput | MemberTagOrderByWithRelationInput[]
    cursor?: MemberTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberTagScalarFieldEnum | MemberTagScalarFieldEnum[]
  }

  /**
   * Tag.events
   */
  export type Tag$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    where?: EventTagWhereInput
    orderBy?: EventTagOrderByWithRelationInput | EventTagOrderByWithRelationInput[]
    cursor?: EventTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventTagScalarFieldEnum | EventTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model MemberTag
   */

  export type AggregateMemberTag = {
    _count: MemberTagCountAggregateOutputType | null
    _min: MemberTagMinAggregateOutputType | null
    _max: MemberTagMaxAggregateOutputType | null
  }

  export type MemberTagMinAggregateOutputType = {
    id: string | null
    memberId: string | null
    tagId: string | null
  }

  export type MemberTagMaxAggregateOutputType = {
    id: string | null
    memberId: string | null
    tagId: string | null
  }

  export type MemberTagCountAggregateOutputType = {
    id: number
    memberId: number
    tagId: number
    _all: number
  }


  export type MemberTagMinAggregateInputType = {
    id?: true
    memberId?: true
    tagId?: true
  }

  export type MemberTagMaxAggregateInputType = {
    id?: true
    memberId?: true
    tagId?: true
  }

  export type MemberTagCountAggregateInputType = {
    id?: true
    memberId?: true
    tagId?: true
    _all?: true
  }

  export type MemberTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MemberTag to aggregate.
     */
    where?: MemberTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberTags to fetch.
     */
    orderBy?: MemberTagOrderByWithRelationInput | MemberTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MemberTags
    **/
    _count?: true | MemberTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberTagMaxAggregateInputType
  }

  export type GetMemberTagAggregateType<T extends MemberTagAggregateArgs> = {
        [P in keyof T & keyof AggregateMemberTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMemberTag[P]>
      : GetScalarType<T[P], AggregateMemberTag[P]>
  }




  export type MemberTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberTagWhereInput
    orderBy?: MemberTagOrderByWithAggregationInput | MemberTagOrderByWithAggregationInput[]
    by: MemberTagScalarFieldEnum[] | MemberTagScalarFieldEnum
    having?: MemberTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberTagCountAggregateInputType | true
    _min?: MemberTagMinAggregateInputType
    _max?: MemberTagMaxAggregateInputType
  }

  export type MemberTagGroupByOutputType = {
    id: string
    memberId: string
    tagId: string
    _count: MemberTagCountAggregateOutputType | null
    _min: MemberTagMinAggregateOutputType | null
    _max: MemberTagMaxAggregateOutputType | null
  }

  type GetMemberTagGroupByPayload<T extends MemberTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberTagGroupByOutputType[P]>
            : GetScalarType<T[P], MemberTagGroupByOutputType[P]>
        }
      >
    >


  export type MemberTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    tagId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memberTag"]>

  export type MemberTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    tagId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memberTag"]>

  export type MemberTagSelectScalar = {
    id?: boolean
    memberId?: boolean
    tagId?: boolean
  }

  export type MemberTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type MemberTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $MemberTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MemberTag"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      memberId: string
      tagId: string
    }, ExtArgs["result"]["memberTag"]>
    composites: {}
  }

  type MemberTagGetPayload<S extends boolean | null | undefined | MemberTagDefaultArgs> = $Result.GetResult<Prisma.$MemberTagPayload, S>

  type MemberTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MemberTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MemberTagCountAggregateInputType | true
    }

  export interface MemberTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MemberTag'], meta: { name: 'MemberTag' } }
    /**
     * Find zero or one MemberTag that matches the filter.
     * @param {MemberTagFindUniqueArgs} args - Arguments to find a MemberTag
     * @example
     * // Get one MemberTag
     * const memberTag = await prisma.memberTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemberTagFindUniqueArgs>(args: SelectSubset<T, MemberTagFindUniqueArgs<ExtArgs>>): Prisma__MemberTagClient<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MemberTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MemberTagFindUniqueOrThrowArgs} args - Arguments to find a MemberTag
     * @example
     * // Get one MemberTag
     * const memberTag = await prisma.memberTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemberTagFindUniqueOrThrowArgs>(args: SelectSubset<T, MemberTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemberTagClient<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MemberTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberTagFindFirstArgs} args - Arguments to find a MemberTag
     * @example
     * // Get one MemberTag
     * const memberTag = await prisma.memberTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemberTagFindFirstArgs>(args?: SelectSubset<T, MemberTagFindFirstArgs<ExtArgs>>): Prisma__MemberTagClient<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MemberTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberTagFindFirstOrThrowArgs} args - Arguments to find a MemberTag
     * @example
     * // Get one MemberTag
     * const memberTag = await prisma.memberTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemberTagFindFirstOrThrowArgs>(args?: SelectSubset<T, MemberTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemberTagClient<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MemberTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MemberTags
     * const memberTags = await prisma.memberTag.findMany()
     * 
     * // Get first 10 MemberTags
     * const memberTags = await prisma.memberTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberTagWithIdOnly = await prisma.memberTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemberTagFindManyArgs>(args?: SelectSubset<T, MemberTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MemberTag.
     * @param {MemberTagCreateArgs} args - Arguments to create a MemberTag.
     * @example
     * // Create one MemberTag
     * const MemberTag = await prisma.memberTag.create({
     *   data: {
     *     // ... data to create a MemberTag
     *   }
     * })
     * 
     */
    create<T extends MemberTagCreateArgs>(args: SelectSubset<T, MemberTagCreateArgs<ExtArgs>>): Prisma__MemberTagClient<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MemberTags.
     * @param {MemberTagCreateManyArgs} args - Arguments to create many MemberTags.
     * @example
     * // Create many MemberTags
     * const memberTag = await prisma.memberTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemberTagCreateManyArgs>(args?: SelectSubset<T, MemberTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MemberTags and returns the data saved in the database.
     * @param {MemberTagCreateManyAndReturnArgs} args - Arguments to create many MemberTags.
     * @example
     * // Create many MemberTags
     * const memberTag = await prisma.memberTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MemberTags and only return the `id`
     * const memberTagWithIdOnly = await prisma.memberTag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemberTagCreateManyAndReturnArgs>(args?: SelectSubset<T, MemberTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MemberTag.
     * @param {MemberTagDeleteArgs} args - Arguments to delete one MemberTag.
     * @example
     * // Delete one MemberTag
     * const MemberTag = await prisma.memberTag.delete({
     *   where: {
     *     // ... filter to delete one MemberTag
     *   }
     * })
     * 
     */
    delete<T extends MemberTagDeleteArgs>(args: SelectSubset<T, MemberTagDeleteArgs<ExtArgs>>): Prisma__MemberTagClient<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MemberTag.
     * @param {MemberTagUpdateArgs} args - Arguments to update one MemberTag.
     * @example
     * // Update one MemberTag
     * const memberTag = await prisma.memberTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemberTagUpdateArgs>(args: SelectSubset<T, MemberTagUpdateArgs<ExtArgs>>): Prisma__MemberTagClient<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MemberTags.
     * @param {MemberTagDeleteManyArgs} args - Arguments to filter MemberTags to delete.
     * @example
     * // Delete a few MemberTags
     * const { count } = await prisma.memberTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemberTagDeleteManyArgs>(args?: SelectSubset<T, MemberTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MemberTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MemberTags
     * const memberTag = await prisma.memberTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemberTagUpdateManyArgs>(args: SelectSubset<T, MemberTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MemberTag.
     * @param {MemberTagUpsertArgs} args - Arguments to update or create a MemberTag.
     * @example
     * // Update or create a MemberTag
     * const memberTag = await prisma.memberTag.upsert({
     *   create: {
     *     // ... data to create a MemberTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MemberTag we want to update
     *   }
     * })
     */
    upsert<T extends MemberTagUpsertArgs>(args: SelectSubset<T, MemberTagUpsertArgs<ExtArgs>>): Prisma__MemberTagClient<$Result.GetResult<Prisma.$MemberTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MemberTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberTagCountArgs} args - Arguments to filter MemberTags to count.
     * @example
     * // Count the number of MemberTags
     * const count = await prisma.memberTag.count({
     *   where: {
     *     // ... the filter for the MemberTags we want to count
     *   }
     * })
    **/
    count<T extends MemberTagCountArgs>(
      args?: Subset<T, MemberTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MemberTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberTagAggregateArgs>(args: Subset<T, MemberTagAggregateArgs>): Prisma.PrismaPromise<GetMemberTagAggregateType<T>>

    /**
     * Group by MemberTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberTagGroupByArgs['orderBy'] }
        : { orderBy?: MemberTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MemberTag model
   */
  readonly fields: MemberTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MemberTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MemberTag model
   */ 
  interface MemberTagFieldRefs {
    readonly id: FieldRef<"MemberTag", 'String'>
    readonly memberId: FieldRef<"MemberTag", 'String'>
    readonly tagId: FieldRef<"MemberTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MemberTag findUnique
   */
  export type MemberTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    /**
     * Filter, which MemberTag to fetch.
     */
    where: MemberTagWhereUniqueInput
  }

  /**
   * MemberTag findUniqueOrThrow
   */
  export type MemberTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    /**
     * Filter, which MemberTag to fetch.
     */
    where: MemberTagWhereUniqueInput
  }

  /**
   * MemberTag findFirst
   */
  export type MemberTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    /**
     * Filter, which MemberTag to fetch.
     */
    where?: MemberTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberTags to fetch.
     */
    orderBy?: MemberTagOrderByWithRelationInput | MemberTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemberTags.
     */
    cursor?: MemberTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemberTags.
     */
    distinct?: MemberTagScalarFieldEnum | MemberTagScalarFieldEnum[]
  }

  /**
   * MemberTag findFirstOrThrow
   */
  export type MemberTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    /**
     * Filter, which MemberTag to fetch.
     */
    where?: MemberTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberTags to fetch.
     */
    orderBy?: MemberTagOrderByWithRelationInput | MemberTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemberTags.
     */
    cursor?: MemberTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemberTags.
     */
    distinct?: MemberTagScalarFieldEnum | MemberTagScalarFieldEnum[]
  }

  /**
   * MemberTag findMany
   */
  export type MemberTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    /**
     * Filter, which MemberTags to fetch.
     */
    where?: MemberTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberTags to fetch.
     */
    orderBy?: MemberTagOrderByWithRelationInput | MemberTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MemberTags.
     */
    cursor?: MemberTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberTags.
     */
    skip?: number
    distinct?: MemberTagScalarFieldEnum | MemberTagScalarFieldEnum[]
  }

  /**
   * MemberTag create
   */
  export type MemberTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    /**
     * The data needed to create a MemberTag.
     */
    data: XOR<MemberTagCreateInput, MemberTagUncheckedCreateInput>
  }

  /**
   * MemberTag createMany
   */
  export type MemberTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MemberTags.
     */
    data: MemberTagCreateManyInput | MemberTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MemberTag createManyAndReturn
   */
  export type MemberTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MemberTags.
     */
    data: MemberTagCreateManyInput | MemberTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MemberTag update
   */
  export type MemberTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    /**
     * The data needed to update a MemberTag.
     */
    data: XOR<MemberTagUpdateInput, MemberTagUncheckedUpdateInput>
    /**
     * Choose, which MemberTag to update.
     */
    where: MemberTagWhereUniqueInput
  }

  /**
   * MemberTag updateMany
   */
  export type MemberTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MemberTags.
     */
    data: XOR<MemberTagUpdateManyMutationInput, MemberTagUncheckedUpdateManyInput>
    /**
     * Filter which MemberTags to update
     */
    where?: MemberTagWhereInput
  }

  /**
   * MemberTag upsert
   */
  export type MemberTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    /**
     * The filter to search for the MemberTag to update in case it exists.
     */
    where: MemberTagWhereUniqueInput
    /**
     * In case the MemberTag found by the `where` argument doesn't exist, create a new MemberTag with this data.
     */
    create: XOR<MemberTagCreateInput, MemberTagUncheckedCreateInput>
    /**
     * In case the MemberTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberTagUpdateInput, MemberTagUncheckedUpdateInput>
  }

  /**
   * MemberTag delete
   */
  export type MemberTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
    /**
     * Filter which MemberTag to delete.
     */
    where: MemberTagWhereUniqueInput
  }

  /**
   * MemberTag deleteMany
   */
  export type MemberTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MemberTags to delete
     */
    where?: MemberTagWhereInput
  }

  /**
   * MemberTag without action
   */
  export type MemberTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberTag
     */
    select?: MemberTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberTagInclude<ExtArgs> | null
  }


  /**
   * Model EventTag
   */

  export type AggregateEventTag = {
    _count: EventTagCountAggregateOutputType | null
    _min: EventTagMinAggregateOutputType | null
    _max: EventTagMaxAggregateOutputType | null
  }

  export type EventTagMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    tagId: string | null
  }

  export type EventTagMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    tagId: string | null
  }

  export type EventTagCountAggregateOutputType = {
    id: number
    eventId: number
    tagId: number
    _all: number
  }


  export type EventTagMinAggregateInputType = {
    id?: true
    eventId?: true
    tagId?: true
  }

  export type EventTagMaxAggregateInputType = {
    id?: true
    eventId?: true
    tagId?: true
  }

  export type EventTagCountAggregateInputType = {
    id?: true
    eventId?: true
    tagId?: true
    _all?: true
  }

  export type EventTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventTag to aggregate.
     */
    where?: EventTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTags to fetch.
     */
    orderBy?: EventTagOrderByWithRelationInput | EventTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventTags
    **/
    _count?: true | EventTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventTagMaxAggregateInputType
  }

  export type GetEventTagAggregateType<T extends EventTagAggregateArgs> = {
        [P in keyof T & keyof AggregateEventTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventTag[P]>
      : GetScalarType<T[P], AggregateEventTag[P]>
  }




  export type EventTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventTagWhereInput
    orderBy?: EventTagOrderByWithAggregationInput | EventTagOrderByWithAggregationInput[]
    by: EventTagScalarFieldEnum[] | EventTagScalarFieldEnum
    having?: EventTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventTagCountAggregateInputType | true
    _min?: EventTagMinAggregateInputType
    _max?: EventTagMaxAggregateInputType
  }

  export type EventTagGroupByOutputType = {
    id: string
    eventId: string
    tagId: string
    _count: EventTagCountAggregateOutputType | null
    _min: EventTagMinAggregateOutputType | null
    _max: EventTagMaxAggregateOutputType | null
  }

  type GetEventTagGroupByPayload<T extends EventTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventTagGroupByOutputType[P]>
            : GetScalarType<T[P], EventTagGroupByOutputType[P]>
        }
      >
    >


  export type EventTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    tagId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventTag"]>

  export type EventTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    tagId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventTag"]>

  export type EventTagSelectScalar = {
    id?: boolean
    eventId?: boolean
    tagId?: boolean
  }

  export type EventTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type EventTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $EventTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventTag"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      tagId: string
    }, ExtArgs["result"]["eventTag"]>
    composites: {}
  }

  type EventTagGetPayload<S extends boolean | null | undefined | EventTagDefaultArgs> = $Result.GetResult<Prisma.$EventTagPayload, S>

  type EventTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventTagCountAggregateInputType | true
    }

  export interface EventTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventTag'], meta: { name: 'EventTag' } }
    /**
     * Find zero or one EventTag that matches the filter.
     * @param {EventTagFindUniqueArgs} args - Arguments to find a EventTag
     * @example
     * // Get one EventTag
     * const eventTag = await prisma.eventTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventTagFindUniqueArgs>(args: SelectSubset<T, EventTagFindUniqueArgs<ExtArgs>>): Prisma__EventTagClient<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventTagFindUniqueOrThrowArgs} args - Arguments to find a EventTag
     * @example
     * // Get one EventTag
     * const eventTag = await prisma.eventTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventTagFindUniqueOrThrowArgs>(args: SelectSubset<T, EventTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventTagClient<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTagFindFirstArgs} args - Arguments to find a EventTag
     * @example
     * // Get one EventTag
     * const eventTag = await prisma.eventTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventTagFindFirstArgs>(args?: SelectSubset<T, EventTagFindFirstArgs<ExtArgs>>): Prisma__EventTagClient<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTagFindFirstOrThrowArgs} args - Arguments to find a EventTag
     * @example
     * // Get one EventTag
     * const eventTag = await prisma.eventTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventTagFindFirstOrThrowArgs>(args?: SelectSubset<T, EventTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventTagClient<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventTags
     * const eventTags = await prisma.eventTag.findMany()
     * 
     * // Get first 10 EventTags
     * const eventTags = await prisma.eventTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventTagWithIdOnly = await prisma.eventTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventTagFindManyArgs>(args?: SelectSubset<T, EventTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventTag.
     * @param {EventTagCreateArgs} args - Arguments to create a EventTag.
     * @example
     * // Create one EventTag
     * const EventTag = await prisma.eventTag.create({
     *   data: {
     *     // ... data to create a EventTag
     *   }
     * })
     * 
     */
    create<T extends EventTagCreateArgs>(args: SelectSubset<T, EventTagCreateArgs<ExtArgs>>): Prisma__EventTagClient<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventTags.
     * @param {EventTagCreateManyArgs} args - Arguments to create many EventTags.
     * @example
     * // Create many EventTags
     * const eventTag = await prisma.eventTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventTagCreateManyArgs>(args?: SelectSubset<T, EventTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventTags and returns the data saved in the database.
     * @param {EventTagCreateManyAndReturnArgs} args - Arguments to create many EventTags.
     * @example
     * // Create many EventTags
     * const eventTag = await prisma.eventTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventTags and only return the `id`
     * const eventTagWithIdOnly = await prisma.eventTag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventTagCreateManyAndReturnArgs>(args?: SelectSubset<T, EventTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EventTag.
     * @param {EventTagDeleteArgs} args - Arguments to delete one EventTag.
     * @example
     * // Delete one EventTag
     * const EventTag = await prisma.eventTag.delete({
     *   where: {
     *     // ... filter to delete one EventTag
     *   }
     * })
     * 
     */
    delete<T extends EventTagDeleteArgs>(args: SelectSubset<T, EventTagDeleteArgs<ExtArgs>>): Prisma__EventTagClient<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventTag.
     * @param {EventTagUpdateArgs} args - Arguments to update one EventTag.
     * @example
     * // Update one EventTag
     * const eventTag = await prisma.eventTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventTagUpdateArgs>(args: SelectSubset<T, EventTagUpdateArgs<ExtArgs>>): Prisma__EventTagClient<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventTags.
     * @param {EventTagDeleteManyArgs} args - Arguments to filter EventTags to delete.
     * @example
     * // Delete a few EventTags
     * const { count } = await prisma.eventTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventTagDeleteManyArgs>(args?: SelectSubset<T, EventTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventTags
     * const eventTag = await prisma.eventTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventTagUpdateManyArgs>(args: SelectSubset<T, EventTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventTag.
     * @param {EventTagUpsertArgs} args - Arguments to update or create a EventTag.
     * @example
     * // Update or create a EventTag
     * const eventTag = await prisma.eventTag.upsert({
     *   create: {
     *     // ... data to create a EventTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventTag we want to update
     *   }
     * })
     */
    upsert<T extends EventTagUpsertArgs>(args: SelectSubset<T, EventTagUpsertArgs<ExtArgs>>): Prisma__EventTagClient<$Result.GetResult<Prisma.$EventTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTagCountArgs} args - Arguments to filter EventTags to count.
     * @example
     * // Count the number of EventTags
     * const count = await prisma.eventTag.count({
     *   where: {
     *     // ... the filter for the EventTags we want to count
     *   }
     * })
    **/
    count<T extends EventTagCountArgs>(
      args?: Subset<T, EventTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventTagAggregateArgs>(args: Subset<T, EventTagAggregateArgs>): Prisma.PrismaPromise<GetEventTagAggregateType<T>>

    /**
     * Group by EventTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventTagGroupByArgs['orderBy'] }
        : { orderBy?: EventTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventTag model
   */
  readonly fields: EventTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventTag model
   */ 
  interface EventTagFieldRefs {
    readonly id: FieldRef<"EventTag", 'String'>
    readonly eventId: FieldRef<"EventTag", 'String'>
    readonly tagId: FieldRef<"EventTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EventTag findUnique
   */
  export type EventTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    /**
     * Filter, which EventTag to fetch.
     */
    where: EventTagWhereUniqueInput
  }

  /**
   * EventTag findUniqueOrThrow
   */
  export type EventTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    /**
     * Filter, which EventTag to fetch.
     */
    where: EventTagWhereUniqueInput
  }

  /**
   * EventTag findFirst
   */
  export type EventTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    /**
     * Filter, which EventTag to fetch.
     */
    where?: EventTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTags to fetch.
     */
    orderBy?: EventTagOrderByWithRelationInput | EventTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventTags.
     */
    cursor?: EventTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventTags.
     */
    distinct?: EventTagScalarFieldEnum | EventTagScalarFieldEnum[]
  }

  /**
   * EventTag findFirstOrThrow
   */
  export type EventTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    /**
     * Filter, which EventTag to fetch.
     */
    where?: EventTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTags to fetch.
     */
    orderBy?: EventTagOrderByWithRelationInput | EventTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventTags.
     */
    cursor?: EventTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventTags.
     */
    distinct?: EventTagScalarFieldEnum | EventTagScalarFieldEnum[]
  }

  /**
   * EventTag findMany
   */
  export type EventTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    /**
     * Filter, which EventTags to fetch.
     */
    where?: EventTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTags to fetch.
     */
    orderBy?: EventTagOrderByWithRelationInput | EventTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventTags.
     */
    cursor?: EventTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTags.
     */
    skip?: number
    distinct?: EventTagScalarFieldEnum | EventTagScalarFieldEnum[]
  }

  /**
   * EventTag create
   */
  export type EventTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    /**
     * The data needed to create a EventTag.
     */
    data: XOR<EventTagCreateInput, EventTagUncheckedCreateInput>
  }

  /**
   * EventTag createMany
   */
  export type EventTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventTags.
     */
    data: EventTagCreateManyInput | EventTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventTag createManyAndReturn
   */
  export type EventTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EventTags.
     */
    data: EventTagCreateManyInput | EventTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventTag update
   */
  export type EventTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    /**
     * The data needed to update a EventTag.
     */
    data: XOR<EventTagUpdateInput, EventTagUncheckedUpdateInput>
    /**
     * Choose, which EventTag to update.
     */
    where: EventTagWhereUniqueInput
  }

  /**
   * EventTag updateMany
   */
  export type EventTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventTags.
     */
    data: XOR<EventTagUpdateManyMutationInput, EventTagUncheckedUpdateManyInput>
    /**
     * Filter which EventTags to update
     */
    where?: EventTagWhereInput
  }

  /**
   * EventTag upsert
   */
  export type EventTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    /**
     * The filter to search for the EventTag to update in case it exists.
     */
    where: EventTagWhereUniqueInput
    /**
     * In case the EventTag found by the `where` argument doesn't exist, create a new EventTag with this data.
     */
    create: XOR<EventTagCreateInput, EventTagUncheckedCreateInput>
    /**
     * In case the EventTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventTagUpdateInput, EventTagUncheckedUpdateInput>
  }

  /**
   * EventTag delete
   */
  export type EventTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
    /**
     * Filter which EventTag to delete.
     */
    where: EventTagWhereUniqueInput
  }

  /**
   * EventTag deleteMany
   */
  export type EventTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventTags to delete
     */
    where?: EventTagWhereInput
  }

  /**
   * EventTag without action
   */
  export type EventTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTag
     */
    select?: EventTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTagInclude<ExtArgs> | null
  }


  /**
   * Model GroupFile
   */

  export type AggregateGroupFile = {
    _count: GroupFileCountAggregateOutputType | null
    _avg: GroupFileAvgAggregateOutputType | null
    _sum: GroupFileSumAggregateOutputType | null
    _min: GroupFileMinAggregateOutputType | null
    _max: GroupFileMaxAggregateOutputType | null
  }

  export type GroupFileAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type GroupFileSumAggregateOutputType = {
    fileSize: number | null
  }

  export type GroupFileMinAggregateOutputType = {
    id: string | null
    groupId: string | null
    fileName: string | null
    fileUrl: string | null
    fileSize: number | null
    mimeType: string | null
    uploadedBy: string | null
    uploadedAt: Date | null
  }

  export type GroupFileMaxAggregateOutputType = {
    id: string | null
    groupId: string | null
    fileName: string | null
    fileUrl: string | null
    fileSize: number | null
    mimeType: string | null
    uploadedBy: string | null
    uploadedAt: Date | null
  }

  export type GroupFileCountAggregateOutputType = {
    id: number
    groupId: number
    fileName: number
    fileUrl: number
    fileSize: number
    mimeType: number
    uploadedBy: number
    uploadedAt: number
    _all: number
  }


  export type GroupFileAvgAggregateInputType = {
    fileSize?: true
  }

  export type GroupFileSumAggregateInputType = {
    fileSize?: true
  }

  export type GroupFileMinAggregateInputType = {
    id?: true
    groupId?: true
    fileName?: true
    fileUrl?: true
    fileSize?: true
    mimeType?: true
    uploadedBy?: true
    uploadedAt?: true
  }

  export type GroupFileMaxAggregateInputType = {
    id?: true
    groupId?: true
    fileName?: true
    fileUrl?: true
    fileSize?: true
    mimeType?: true
    uploadedBy?: true
    uploadedAt?: true
  }

  export type GroupFileCountAggregateInputType = {
    id?: true
    groupId?: true
    fileName?: true
    fileUrl?: true
    fileSize?: true
    mimeType?: true
    uploadedBy?: true
    uploadedAt?: true
    _all?: true
  }

  export type GroupFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupFile to aggregate.
     */
    where?: GroupFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupFiles to fetch.
     */
    orderBy?: GroupFileOrderByWithRelationInput | GroupFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupFiles
    **/
    _count?: true | GroupFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupFileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupFileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupFileMaxAggregateInputType
  }

  export type GetGroupFileAggregateType<T extends GroupFileAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupFile[P]>
      : GetScalarType<T[P], AggregateGroupFile[P]>
  }




  export type GroupFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupFileWhereInput
    orderBy?: GroupFileOrderByWithAggregationInput | GroupFileOrderByWithAggregationInput[]
    by: GroupFileScalarFieldEnum[] | GroupFileScalarFieldEnum
    having?: GroupFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupFileCountAggregateInputType | true
    _avg?: GroupFileAvgAggregateInputType
    _sum?: GroupFileSumAggregateInputType
    _min?: GroupFileMinAggregateInputType
    _max?: GroupFileMaxAggregateInputType
  }

  export type GroupFileGroupByOutputType = {
    id: string
    groupId: string
    fileName: string
    fileUrl: string
    fileSize: number
    mimeType: string
    uploadedBy: string
    uploadedAt: Date
    _count: GroupFileCountAggregateOutputType | null
    _avg: GroupFileAvgAggregateOutputType | null
    _sum: GroupFileSumAggregateOutputType | null
    _min: GroupFileMinAggregateOutputType | null
    _max: GroupFileMaxAggregateOutputType | null
  }

  type GetGroupFileGroupByPayload<T extends GroupFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupFileGroupByOutputType[P]>
            : GetScalarType<T[P], GroupFileGroupByOutputType[P]>
        }
      >
    >


  export type GroupFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupId?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedBy?: boolean
    uploadedAt?: boolean
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupFile"]>

  export type GroupFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupId?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedBy?: boolean
    uploadedAt?: boolean
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupFile"]>

  export type GroupFileSelectScalar = {
    id?: boolean
    groupId?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedBy?: boolean
    uploadedAt?: boolean
  }

  export type GroupFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type GroupFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $GroupFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupFile"
    objects: {
      group: Prisma.$GroupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      groupId: string
      fileName: string
      fileUrl: string
      fileSize: number
      mimeType: string
      uploadedBy: string
      uploadedAt: Date
    }, ExtArgs["result"]["groupFile"]>
    composites: {}
  }

  type GroupFileGetPayload<S extends boolean | null | undefined | GroupFileDefaultArgs> = $Result.GetResult<Prisma.$GroupFilePayload, S>

  type GroupFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupFileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupFileCountAggregateInputType | true
    }

  export interface GroupFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupFile'], meta: { name: 'GroupFile' } }
    /**
     * Find zero or one GroupFile that matches the filter.
     * @param {GroupFileFindUniqueArgs} args - Arguments to find a GroupFile
     * @example
     * // Get one GroupFile
     * const groupFile = await prisma.groupFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupFileFindUniqueArgs>(args: SelectSubset<T, GroupFileFindUniqueArgs<ExtArgs>>): Prisma__GroupFileClient<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GroupFile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupFileFindUniqueOrThrowArgs} args - Arguments to find a GroupFile
     * @example
     * // Get one GroupFile
     * const groupFile = await prisma.groupFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupFileFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupFileClient<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GroupFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFileFindFirstArgs} args - Arguments to find a GroupFile
     * @example
     * // Get one GroupFile
     * const groupFile = await prisma.groupFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupFileFindFirstArgs>(args?: SelectSubset<T, GroupFileFindFirstArgs<ExtArgs>>): Prisma__GroupFileClient<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GroupFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFileFindFirstOrThrowArgs} args - Arguments to find a GroupFile
     * @example
     * // Get one GroupFile
     * const groupFile = await prisma.groupFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupFileFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupFileClient<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GroupFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupFiles
     * const groupFiles = await prisma.groupFile.findMany()
     * 
     * // Get first 10 GroupFiles
     * const groupFiles = await prisma.groupFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupFileWithIdOnly = await prisma.groupFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupFileFindManyArgs>(args?: SelectSubset<T, GroupFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GroupFile.
     * @param {GroupFileCreateArgs} args - Arguments to create a GroupFile.
     * @example
     * // Create one GroupFile
     * const GroupFile = await prisma.groupFile.create({
     *   data: {
     *     // ... data to create a GroupFile
     *   }
     * })
     * 
     */
    create<T extends GroupFileCreateArgs>(args: SelectSubset<T, GroupFileCreateArgs<ExtArgs>>): Prisma__GroupFileClient<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GroupFiles.
     * @param {GroupFileCreateManyArgs} args - Arguments to create many GroupFiles.
     * @example
     * // Create many GroupFiles
     * const groupFile = await prisma.groupFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupFileCreateManyArgs>(args?: SelectSubset<T, GroupFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupFiles and returns the data saved in the database.
     * @param {GroupFileCreateManyAndReturnArgs} args - Arguments to create many GroupFiles.
     * @example
     * // Create many GroupFiles
     * const groupFile = await prisma.groupFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupFiles and only return the `id`
     * const groupFileWithIdOnly = await prisma.groupFile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupFileCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GroupFile.
     * @param {GroupFileDeleteArgs} args - Arguments to delete one GroupFile.
     * @example
     * // Delete one GroupFile
     * const GroupFile = await prisma.groupFile.delete({
     *   where: {
     *     // ... filter to delete one GroupFile
     *   }
     * })
     * 
     */
    delete<T extends GroupFileDeleteArgs>(args: SelectSubset<T, GroupFileDeleteArgs<ExtArgs>>): Prisma__GroupFileClient<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GroupFile.
     * @param {GroupFileUpdateArgs} args - Arguments to update one GroupFile.
     * @example
     * // Update one GroupFile
     * const groupFile = await prisma.groupFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupFileUpdateArgs>(args: SelectSubset<T, GroupFileUpdateArgs<ExtArgs>>): Prisma__GroupFileClient<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GroupFiles.
     * @param {GroupFileDeleteManyArgs} args - Arguments to filter GroupFiles to delete.
     * @example
     * // Delete a few GroupFiles
     * const { count } = await prisma.groupFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupFileDeleteManyArgs>(args?: SelectSubset<T, GroupFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupFiles
     * const groupFile = await prisma.groupFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupFileUpdateManyArgs>(args: SelectSubset<T, GroupFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupFile.
     * @param {GroupFileUpsertArgs} args - Arguments to update or create a GroupFile.
     * @example
     * // Update or create a GroupFile
     * const groupFile = await prisma.groupFile.upsert({
     *   create: {
     *     // ... data to create a GroupFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupFile we want to update
     *   }
     * })
     */
    upsert<T extends GroupFileUpsertArgs>(args: SelectSubset<T, GroupFileUpsertArgs<ExtArgs>>): Prisma__GroupFileClient<$Result.GetResult<Prisma.$GroupFilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GroupFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFileCountArgs} args - Arguments to filter GroupFiles to count.
     * @example
     * // Count the number of GroupFiles
     * const count = await prisma.groupFile.count({
     *   where: {
     *     // ... the filter for the GroupFiles we want to count
     *   }
     * })
    **/
    count<T extends GroupFileCountArgs>(
      args?: Subset<T, GroupFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupFileAggregateArgs>(args: Subset<T, GroupFileAggregateArgs>): Prisma.PrismaPromise<GetGroupFileAggregateType<T>>

    /**
     * Group by GroupFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupFileGroupByArgs['orderBy'] }
        : { orderBy?: GroupFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupFile model
   */
  readonly fields: GroupFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    group<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupFile model
   */ 
  interface GroupFileFieldRefs {
    readonly id: FieldRef<"GroupFile", 'String'>
    readonly groupId: FieldRef<"GroupFile", 'String'>
    readonly fileName: FieldRef<"GroupFile", 'String'>
    readonly fileUrl: FieldRef<"GroupFile", 'String'>
    readonly fileSize: FieldRef<"GroupFile", 'Int'>
    readonly mimeType: FieldRef<"GroupFile", 'String'>
    readonly uploadedBy: FieldRef<"GroupFile", 'String'>
    readonly uploadedAt: FieldRef<"GroupFile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GroupFile findUnique
   */
  export type GroupFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
    /**
     * Filter, which GroupFile to fetch.
     */
    where: GroupFileWhereUniqueInput
  }

  /**
   * GroupFile findUniqueOrThrow
   */
  export type GroupFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
    /**
     * Filter, which GroupFile to fetch.
     */
    where: GroupFileWhereUniqueInput
  }

  /**
   * GroupFile findFirst
   */
  export type GroupFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
    /**
     * Filter, which GroupFile to fetch.
     */
    where?: GroupFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupFiles to fetch.
     */
    orderBy?: GroupFileOrderByWithRelationInput | GroupFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupFiles.
     */
    cursor?: GroupFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupFiles.
     */
    distinct?: GroupFileScalarFieldEnum | GroupFileScalarFieldEnum[]
  }

  /**
   * GroupFile findFirstOrThrow
   */
  export type GroupFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
    /**
     * Filter, which GroupFile to fetch.
     */
    where?: GroupFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupFiles to fetch.
     */
    orderBy?: GroupFileOrderByWithRelationInput | GroupFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupFiles.
     */
    cursor?: GroupFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupFiles.
     */
    distinct?: GroupFileScalarFieldEnum | GroupFileScalarFieldEnum[]
  }

  /**
   * GroupFile findMany
   */
  export type GroupFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
    /**
     * Filter, which GroupFiles to fetch.
     */
    where?: GroupFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupFiles to fetch.
     */
    orderBy?: GroupFileOrderByWithRelationInput | GroupFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupFiles.
     */
    cursor?: GroupFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupFiles.
     */
    skip?: number
    distinct?: GroupFileScalarFieldEnum | GroupFileScalarFieldEnum[]
  }

  /**
   * GroupFile create
   */
  export type GroupFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupFile.
     */
    data: XOR<GroupFileCreateInput, GroupFileUncheckedCreateInput>
  }

  /**
   * GroupFile createMany
   */
  export type GroupFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupFiles.
     */
    data: GroupFileCreateManyInput | GroupFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GroupFile createManyAndReturn
   */
  export type GroupFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GroupFiles.
     */
    data: GroupFileCreateManyInput | GroupFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupFile update
   */
  export type GroupFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupFile.
     */
    data: XOR<GroupFileUpdateInput, GroupFileUncheckedUpdateInput>
    /**
     * Choose, which GroupFile to update.
     */
    where: GroupFileWhereUniqueInput
  }

  /**
   * GroupFile updateMany
   */
  export type GroupFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupFiles.
     */
    data: XOR<GroupFileUpdateManyMutationInput, GroupFileUncheckedUpdateManyInput>
    /**
     * Filter which GroupFiles to update
     */
    where?: GroupFileWhereInput
  }

  /**
   * GroupFile upsert
   */
  export type GroupFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupFile to update in case it exists.
     */
    where: GroupFileWhereUniqueInput
    /**
     * In case the GroupFile found by the `where` argument doesn't exist, create a new GroupFile with this data.
     */
    create: XOR<GroupFileCreateInput, GroupFileUncheckedCreateInput>
    /**
     * In case the GroupFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupFileUpdateInput, GroupFileUncheckedUpdateInput>
  }

  /**
   * GroupFile delete
   */
  export type GroupFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
    /**
     * Filter which GroupFile to delete.
     */
    where: GroupFileWhereUniqueInput
  }

  /**
   * GroupFile deleteMany
   */
  export type GroupFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupFiles to delete
     */
    where?: GroupFileWhereInput
  }

  /**
   * GroupFile without action
   */
  export type GroupFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupFile
     */
    select?: GroupFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupFileInclude<ExtArgs> | null
  }


  /**
   * Model MemberFamily
   */

  export type AggregateMemberFamily = {
    _count: MemberFamilyCountAggregateOutputType | null
    _min: MemberFamilyMinAggregateOutputType | null
    _max: MemberFamilyMaxAggregateOutputType | null
  }

  export type MemberFamilyMinAggregateOutputType = {
    id: string | null
    memberId: string | null
    relatedId: string | null
    relationship: string | null
  }

  export type MemberFamilyMaxAggregateOutputType = {
    id: string | null
    memberId: string | null
    relatedId: string | null
    relationship: string | null
  }

  export type MemberFamilyCountAggregateOutputType = {
    id: number
    memberId: number
    relatedId: number
    relationship: number
    _all: number
  }


  export type MemberFamilyMinAggregateInputType = {
    id?: true
    memberId?: true
    relatedId?: true
    relationship?: true
  }

  export type MemberFamilyMaxAggregateInputType = {
    id?: true
    memberId?: true
    relatedId?: true
    relationship?: true
  }

  export type MemberFamilyCountAggregateInputType = {
    id?: true
    memberId?: true
    relatedId?: true
    relationship?: true
    _all?: true
  }

  export type MemberFamilyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MemberFamily to aggregate.
     */
    where?: MemberFamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberFamilies to fetch.
     */
    orderBy?: MemberFamilyOrderByWithRelationInput | MemberFamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberFamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberFamilies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberFamilies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MemberFamilies
    **/
    _count?: true | MemberFamilyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberFamilyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberFamilyMaxAggregateInputType
  }

  export type GetMemberFamilyAggregateType<T extends MemberFamilyAggregateArgs> = {
        [P in keyof T & keyof AggregateMemberFamily]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMemberFamily[P]>
      : GetScalarType<T[P], AggregateMemberFamily[P]>
  }




  export type MemberFamilyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberFamilyWhereInput
    orderBy?: MemberFamilyOrderByWithAggregationInput | MemberFamilyOrderByWithAggregationInput[]
    by: MemberFamilyScalarFieldEnum[] | MemberFamilyScalarFieldEnum
    having?: MemberFamilyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberFamilyCountAggregateInputType | true
    _min?: MemberFamilyMinAggregateInputType
    _max?: MemberFamilyMaxAggregateInputType
  }

  export type MemberFamilyGroupByOutputType = {
    id: string
    memberId: string
    relatedId: string
    relationship: string
    _count: MemberFamilyCountAggregateOutputType | null
    _min: MemberFamilyMinAggregateOutputType | null
    _max: MemberFamilyMaxAggregateOutputType | null
  }

  type GetMemberFamilyGroupByPayload<T extends MemberFamilyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberFamilyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberFamilyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberFamilyGroupByOutputType[P]>
            : GetScalarType<T[P], MemberFamilyGroupByOutputType[P]>
        }
      >
    >


  export type MemberFamilySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    relatedId?: boolean
    relationship?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    relatedMember?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memberFamily"]>

  export type MemberFamilySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    relatedId?: boolean
    relationship?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    relatedMember?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memberFamily"]>

  export type MemberFamilySelectScalar = {
    id?: boolean
    memberId?: boolean
    relatedId?: boolean
    relationship?: boolean
  }

  export type MemberFamilyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    relatedMember?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type MemberFamilyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    relatedMember?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $MemberFamilyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MemberFamily"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      relatedMember: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      memberId: string
      relatedId: string
      relationship: string
    }, ExtArgs["result"]["memberFamily"]>
    composites: {}
  }

  type MemberFamilyGetPayload<S extends boolean | null | undefined | MemberFamilyDefaultArgs> = $Result.GetResult<Prisma.$MemberFamilyPayload, S>

  type MemberFamilyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MemberFamilyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MemberFamilyCountAggregateInputType | true
    }

  export interface MemberFamilyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MemberFamily'], meta: { name: 'MemberFamily' } }
    /**
     * Find zero or one MemberFamily that matches the filter.
     * @param {MemberFamilyFindUniqueArgs} args - Arguments to find a MemberFamily
     * @example
     * // Get one MemberFamily
     * const memberFamily = await prisma.memberFamily.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemberFamilyFindUniqueArgs>(args: SelectSubset<T, MemberFamilyFindUniqueArgs<ExtArgs>>): Prisma__MemberFamilyClient<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MemberFamily that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MemberFamilyFindUniqueOrThrowArgs} args - Arguments to find a MemberFamily
     * @example
     * // Get one MemberFamily
     * const memberFamily = await prisma.memberFamily.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemberFamilyFindUniqueOrThrowArgs>(args: SelectSubset<T, MemberFamilyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemberFamilyClient<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MemberFamily that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFamilyFindFirstArgs} args - Arguments to find a MemberFamily
     * @example
     * // Get one MemberFamily
     * const memberFamily = await prisma.memberFamily.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemberFamilyFindFirstArgs>(args?: SelectSubset<T, MemberFamilyFindFirstArgs<ExtArgs>>): Prisma__MemberFamilyClient<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MemberFamily that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFamilyFindFirstOrThrowArgs} args - Arguments to find a MemberFamily
     * @example
     * // Get one MemberFamily
     * const memberFamily = await prisma.memberFamily.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemberFamilyFindFirstOrThrowArgs>(args?: SelectSubset<T, MemberFamilyFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemberFamilyClient<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MemberFamilies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFamilyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MemberFamilies
     * const memberFamilies = await prisma.memberFamily.findMany()
     * 
     * // Get first 10 MemberFamilies
     * const memberFamilies = await prisma.memberFamily.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberFamilyWithIdOnly = await prisma.memberFamily.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemberFamilyFindManyArgs>(args?: SelectSubset<T, MemberFamilyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MemberFamily.
     * @param {MemberFamilyCreateArgs} args - Arguments to create a MemberFamily.
     * @example
     * // Create one MemberFamily
     * const MemberFamily = await prisma.memberFamily.create({
     *   data: {
     *     // ... data to create a MemberFamily
     *   }
     * })
     * 
     */
    create<T extends MemberFamilyCreateArgs>(args: SelectSubset<T, MemberFamilyCreateArgs<ExtArgs>>): Prisma__MemberFamilyClient<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MemberFamilies.
     * @param {MemberFamilyCreateManyArgs} args - Arguments to create many MemberFamilies.
     * @example
     * // Create many MemberFamilies
     * const memberFamily = await prisma.memberFamily.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemberFamilyCreateManyArgs>(args?: SelectSubset<T, MemberFamilyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MemberFamilies and returns the data saved in the database.
     * @param {MemberFamilyCreateManyAndReturnArgs} args - Arguments to create many MemberFamilies.
     * @example
     * // Create many MemberFamilies
     * const memberFamily = await prisma.memberFamily.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MemberFamilies and only return the `id`
     * const memberFamilyWithIdOnly = await prisma.memberFamily.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemberFamilyCreateManyAndReturnArgs>(args?: SelectSubset<T, MemberFamilyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MemberFamily.
     * @param {MemberFamilyDeleteArgs} args - Arguments to delete one MemberFamily.
     * @example
     * // Delete one MemberFamily
     * const MemberFamily = await prisma.memberFamily.delete({
     *   where: {
     *     // ... filter to delete one MemberFamily
     *   }
     * })
     * 
     */
    delete<T extends MemberFamilyDeleteArgs>(args: SelectSubset<T, MemberFamilyDeleteArgs<ExtArgs>>): Prisma__MemberFamilyClient<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MemberFamily.
     * @param {MemberFamilyUpdateArgs} args - Arguments to update one MemberFamily.
     * @example
     * // Update one MemberFamily
     * const memberFamily = await prisma.memberFamily.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemberFamilyUpdateArgs>(args: SelectSubset<T, MemberFamilyUpdateArgs<ExtArgs>>): Prisma__MemberFamilyClient<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MemberFamilies.
     * @param {MemberFamilyDeleteManyArgs} args - Arguments to filter MemberFamilies to delete.
     * @example
     * // Delete a few MemberFamilies
     * const { count } = await prisma.memberFamily.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemberFamilyDeleteManyArgs>(args?: SelectSubset<T, MemberFamilyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MemberFamilies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFamilyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MemberFamilies
     * const memberFamily = await prisma.memberFamily.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemberFamilyUpdateManyArgs>(args: SelectSubset<T, MemberFamilyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MemberFamily.
     * @param {MemberFamilyUpsertArgs} args - Arguments to update or create a MemberFamily.
     * @example
     * // Update or create a MemberFamily
     * const memberFamily = await prisma.memberFamily.upsert({
     *   create: {
     *     // ... data to create a MemberFamily
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MemberFamily we want to update
     *   }
     * })
     */
    upsert<T extends MemberFamilyUpsertArgs>(args: SelectSubset<T, MemberFamilyUpsertArgs<ExtArgs>>): Prisma__MemberFamilyClient<$Result.GetResult<Prisma.$MemberFamilyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MemberFamilies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFamilyCountArgs} args - Arguments to filter MemberFamilies to count.
     * @example
     * // Count the number of MemberFamilies
     * const count = await prisma.memberFamily.count({
     *   where: {
     *     // ... the filter for the MemberFamilies we want to count
     *   }
     * })
    **/
    count<T extends MemberFamilyCountArgs>(
      args?: Subset<T, MemberFamilyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberFamilyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MemberFamily.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFamilyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberFamilyAggregateArgs>(args: Subset<T, MemberFamilyAggregateArgs>): Prisma.PrismaPromise<GetMemberFamilyAggregateType<T>>

    /**
     * Group by MemberFamily.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFamilyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberFamilyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberFamilyGroupByArgs['orderBy'] }
        : { orderBy?: MemberFamilyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberFamilyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberFamilyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MemberFamily model
   */
  readonly fields: MemberFamilyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MemberFamily.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberFamilyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    relatedMember<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MemberFamily model
   */ 
  interface MemberFamilyFieldRefs {
    readonly id: FieldRef<"MemberFamily", 'String'>
    readonly memberId: FieldRef<"MemberFamily", 'String'>
    readonly relatedId: FieldRef<"MemberFamily", 'String'>
    readonly relationship: FieldRef<"MemberFamily", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MemberFamily findUnique
   */
  export type MemberFamilyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    /**
     * Filter, which MemberFamily to fetch.
     */
    where: MemberFamilyWhereUniqueInput
  }

  /**
   * MemberFamily findUniqueOrThrow
   */
  export type MemberFamilyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    /**
     * Filter, which MemberFamily to fetch.
     */
    where: MemberFamilyWhereUniqueInput
  }

  /**
   * MemberFamily findFirst
   */
  export type MemberFamilyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    /**
     * Filter, which MemberFamily to fetch.
     */
    where?: MemberFamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberFamilies to fetch.
     */
    orderBy?: MemberFamilyOrderByWithRelationInput | MemberFamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemberFamilies.
     */
    cursor?: MemberFamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberFamilies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberFamilies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemberFamilies.
     */
    distinct?: MemberFamilyScalarFieldEnum | MemberFamilyScalarFieldEnum[]
  }

  /**
   * MemberFamily findFirstOrThrow
   */
  export type MemberFamilyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    /**
     * Filter, which MemberFamily to fetch.
     */
    where?: MemberFamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberFamilies to fetch.
     */
    orderBy?: MemberFamilyOrderByWithRelationInput | MemberFamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemberFamilies.
     */
    cursor?: MemberFamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberFamilies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberFamilies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemberFamilies.
     */
    distinct?: MemberFamilyScalarFieldEnum | MemberFamilyScalarFieldEnum[]
  }

  /**
   * MemberFamily findMany
   */
  export type MemberFamilyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    /**
     * Filter, which MemberFamilies to fetch.
     */
    where?: MemberFamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberFamilies to fetch.
     */
    orderBy?: MemberFamilyOrderByWithRelationInput | MemberFamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MemberFamilies.
     */
    cursor?: MemberFamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberFamilies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberFamilies.
     */
    skip?: number
    distinct?: MemberFamilyScalarFieldEnum | MemberFamilyScalarFieldEnum[]
  }

  /**
   * MemberFamily create
   */
  export type MemberFamilyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    /**
     * The data needed to create a MemberFamily.
     */
    data: XOR<MemberFamilyCreateInput, MemberFamilyUncheckedCreateInput>
  }

  /**
   * MemberFamily createMany
   */
  export type MemberFamilyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MemberFamilies.
     */
    data: MemberFamilyCreateManyInput | MemberFamilyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MemberFamily createManyAndReturn
   */
  export type MemberFamilyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MemberFamilies.
     */
    data: MemberFamilyCreateManyInput | MemberFamilyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MemberFamily update
   */
  export type MemberFamilyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    /**
     * The data needed to update a MemberFamily.
     */
    data: XOR<MemberFamilyUpdateInput, MemberFamilyUncheckedUpdateInput>
    /**
     * Choose, which MemberFamily to update.
     */
    where: MemberFamilyWhereUniqueInput
  }

  /**
   * MemberFamily updateMany
   */
  export type MemberFamilyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MemberFamilies.
     */
    data: XOR<MemberFamilyUpdateManyMutationInput, MemberFamilyUncheckedUpdateManyInput>
    /**
     * Filter which MemberFamilies to update
     */
    where?: MemberFamilyWhereInput
  }

  /**
   * MemberFamily upsert
   */
  export type MemberFamilyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    /**
     * The filter to search for the MemberFamily to update in case it exists.
     */
    where: MemberFamilyWhereUniqueInput
    /**
     * In case the MemberFamily found by the `where` argument doesn't exist, create a new MemberFamily with this data.
     */
    create: XOR<MemberFamilyCreateInput, MemberFamilyUncheckedCreateInput>
    /**
     * In case the MemberFamily was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberFamilyUpdateInput, MemberFamilyUncheckedUpdateInput>
  }

  /**
   * MemberFamily delete
   */
  export type MemberFamilyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
    /**
     * Filter which MemberFamily to delete.
     */
    where: MemberFamilyWhereUniqueInput
  }

  /**
   * MemberFamily deleteMany
   */
  export type MemberFamilyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MemberFamilies to delete
     */
    where?: MemberFamilyWhereInput
  }

  /**
   * MemberFamily without action
   */
  export type MemberFamilyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberFamily
     */
    select?: MemberFamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberFamilyInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MemberScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    address: 'address',
    maritalStatus: 'maritalStatus',
    spiritualStatus: 'spiritualStatus',
    profilePhotoUrl: 'profilePhotoUrl',
    notes: 'notes',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    description: 'description',
    leaderId: 'leaderId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const GroupMemberScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    groupId: 'groupId',
    joinedAt: 'joinedAt',
    isActive: 'isActive'
  };

  export type GroupMemberScalarFieldEnum = (typeof GroupMemberScalarFieldEnum)[keyof typeof GroupMemberScalarFieldEnum]


  export const JourneyTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JourneyTemplateScalarFieldEnum = (typeof JourneyTemplateScalarFieldEnum)[keyof typeof JourneyTemplateScalarFieldEnum]


  export const MilestoneScalarFieldEnum: {
    id: 'id',
    templateId: 'templateId',
    name: 'name',
    description: 'description',
    sequence: 'sequence'
  };

  export type MilestoneScalarFieldEnum = (typeof MilestoneScalarFieldEnum)[keyof typeof MilestoneScalarFieldEnum]


  export const JourneyStageScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    templateId: 'templateId',
    milestoneId: 'milestoneId',
    status: 'status',
    autoProgress: 'autoProgress',
    flagForFollowUp: 'flagForFollowUp',
    completedAt: 'completedAt',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JourneyStageScalarFieldEnum = (typeof JourneyStageScalarFieldEnum)[keyof typeof JourneyStageScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    dateTime: 'dateTime',
    location: 'location',
    groupId: 'groupId',
    calendarType: 'calendarType',
    createdBy: 'createdBy',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const EventAttendanceScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    memberId: 'memberId',
    attended: 'attended',
    checkedInAt: 'checkedInAt'
  };

  export type EventAttendanceScalarFieldEnum = (typeof EventAttendanceScalarFieldEnum)[keyof typeof EventAttendanceScalarFieldEnum]


  export const CareLogScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    caregiverId: 'caregiverId',
    type: 'type',
    notes: 'notes',
    followUpRequired: 'followUpRequired',
    confidential: 'confidential',
    followUpDate: 'followUpDate',
    createdAt: 'createdAt'
  };

  export type CareLogScalarFieldEnum = (typeof CareLogScalarFieldEnum)[keyof typeof CareLogScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    label: 'label',
    category: 'category',
    color: 'color',
    createdAt: 'createdAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const MemberTagScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    tagId: 'tagId'
  };

  export type MemberTagScalarFieldEnum = (typeof MemberTagScalarFieldEnum)[keyof typeof MemberTagScalarFieldEnum]


  export const EventTagScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    tagId: 'tagId'
  };

  export type EventTagScalarFieldEnum = (typeof EventTagScalarFieldEnum)[keyof typeof EventTagScalarFieldEnum]


  export const GroupFileScalarFieldEnum: {
    id: 'id',
    groupId: 'groupId',
    fileName: 'fileName',
    fileUrl: 'fileUrl',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    uploadedBy: 'uploadedBy',
    uploadedAt: 'uploadedAt'
  };

  export type GroupFileScalarFieldEnum = (typeof GroupFileScalarFieldEnum)[keyof typeof GroupFileScalarFieldEnum]


  export const MemberFamilyScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    relatedId: 'relatedId',
    relationship: 'relationship'
  };

  export type MemberFamilyScalarFieldEnum = (typeof MemberFamilyScalarFieldEnum)[keyof typeof MemberFamilyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'MaritalStatus'
   */
  export type EnumMaritalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaritalStatus'>
    


  /**
   * Reference to a field of type 'MaritalStatus[]'
   */
  export type ListEnumMaritalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaritalStatus[]'>
    


  /**
   * Reference to a field of type 'GroupType'
   */
  export type EnumGroupTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GroupType'>
    


  /**
   * Reference to a field of type 'GroupType[]'
   */
  export type ListEnumGroupTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GroupType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'StageStatus'
   */
  export type EnumStageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StageStatus'>
    


  /**
   * Reference to a field of type 'StageStatus[]'
   */
  export type ListEnumStageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StageStatus[]'>
    


  /**
   * Reference to a field of type 'CalendarType'
   */
  export type EnumCalendarTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CalendarType'>
    


  /**
   * Reference to a field of type 'CalendarType[]'
   */
  export type ListEnumCalendarTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CalendarType[]'>
    


  /**
   * Reference to a field of type 'CareType'
   */
  export type EnumCareTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CareType'>
    


  /**
   * Reference to a field of type 'CareType[]'
   */
  export type ListEnumCareTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CareType[]'>
    


  /**
   * Reference to a field of type 'TagCategory'
   */
  export type EnumTagCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TagCategory'>
    


  /**
   * Reference to a field of type 'TagCategory[]'
   */
  export type ListEnumTagCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TagCategory[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    member?: XOR<MemberNullableRelationFilter, MemberWhereInput> | null
    careLogs?: CareLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    member?: MemberOrderByWithRelationInput
    careLogs?: CareLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    member?: XOR<MemberNullableRelationFilter, MemberWhereInput> | null
    careLogs?: CareLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MemberWhereInput = {
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    id?: StringFilter<"Member"> | string
    userId?: StringNullableFilter<"Member"> | string | null
    firstName?: StringFilter<"Member"> | string
    lastName?: StringFilter<"Member"> | string
    email?: StringFilter<"Member"> | string
    phone?: StringNullableFilter<"Member"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Member"> | Date | string | null
    gender?: EnumGenderNullableFilter<"Member"> | $Enums.Gender | null
    address?: StringNullableFilter<"Member"> | string | null
    maritalStatus?: EnumMaritalStatusNullableFilter<"Member"> | $Enums.MaritalStatus | null
    spiritualStatus?: StringNullableFilter<"Member"> | string | null
    profilePhotoUrl?: StringNullableFilter<"Member"> | string | null
    notes?: StringNullableFilter<"Member"> | string | null
    isActive?: BoolFilter<"Member"> | boolean
    createdAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    groups?: GroupMemberListRelationFilter
    journeyStages?: JourneyStageListRelationFilter
    careLogs?: CareLogListRelationFilter
    eventAttendances?: EventAttendanceListRelationFilter
    tags?: MemberTagListRelationFilter
    familyConnections?: MemberFamilyListRelationFilter
    relatedConnections?: MemberFamilyListRelationFilter
  }

  export type MemberOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    maritalStatus?: SortOrderInput | SortOrder
    spiritualStatus?: SortOrderInput | SortOrder
    profilePhotoUrl?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    groups?: GroupMemberOrderByRelationAggregateInput
    journeyStages?: JourneyStageOrderByRelationAggregateInput
    careLogs?: CareLogOrderByRelationAggregateInput
    eventAttendances?: EventAttendanceOrderByRelationAggregateInput
    tags?: MemberTagOrderByRelationAggregateInput
    familyConnections?: MemberFamilyOrderByRelationAggregateInput
    relatedConnections?: MemberFamilyOrderByRelationAggregateInput
  }

  export type MemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    email?: string
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    firstName?: StringFilter<"Member"> | string
    lastName?: StringFilter<"Member"> | string
    phone?: StringNullableFilter<"Member"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Member"> | Date | string | null
    gender?: EnumGenderNullableFilter<"Member"> | $Enums.Gender | null
    address?: StringNullableFilter<"Member"> | string | null
    maritalStatus?: EnumMaritalStatusNullableFilter<"Member"> | $Enums.MaritalStatus | null
    spiritualStatus?: StringNullableFilter<"Member"> | string | null
    profilePhotoUrl?: StringNullableFilter<"Member"> | string | null
    notes?: StringNullableFilter<"Member"> | string | null
    isActive?: BoolFilter<"Member"> | boolean
    createdAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    groups?: GroupMemberListRelationFilter
    journeyStages?: JourneyStageListRelationFilter
    careLogs?: CareLogListRelationFilter
    eventAttendances?: EventAttendanceListRelationFilter
    tags?: MemberTagListRelationFilter
    familyConnections?: MemberFamilyListRelationFilter
    relatedConnections?: MemberFamilyListRelationFilter
  }, "id" | "userId" | "email">

  export type MemberOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    maritalStatus?: SortOrderInput | SortOrder
    spiritualStatus?: SortOrderInput | SortOrder
    profilePhotoUrl?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MemberCountOrderByAggregateInput
    _max?: MemberMaxOrderByAggregateInput
    _min?: MemberMinOrderByAggregateInput
  }

  export type MemberScalarWhereWithAggregatesInput = {
    AND?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    OR?: MemberScalarWhereWithAggregatesInput[]
    NOT?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Member"> | string
    userId?: StringNullableWithAggregatesFilter<"Member"> | string | null
    firstName?: StringWithAggregatesFilter<"Member"> | string
    lastName?: StringWithAggregatesFilter<"Member"> | string
    email?: StringWithAggregatesFilter<"Member"> | string
    phone?: StringNullableWithAggregatesFilter<"Member"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Member"> | Date | string | null
    gender?: EnumGenderNullableWithAggregatesFilter<"Member"> | $Enums.Gender | null
    address?: StringNullableWithAggregatesFilter<"Member"> | string | null
    maritalStatus?: EnumMaritalStatusNullableWithAggregatesFilter<"Member"> | $Enums.MaritalStatus | null
    spiritualStatus?: StringNullableWithAggregatesFilter<"Member"> | string | null
    profilePhotoUrl?: StringNullableWithAggregatesFilter<"Member"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Member"> | string | null
    isActive?: BoolWithAggregatesFilter<"Member"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
  }

  export type GroupWhereInput = {
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    id?: StringFilter<"Group"> | string
    name?: StringFilter<"Group"> | string
    type?: EnumGroupTypeFilter<"Group"> | $Enums.GroupType
    description?: StringNullableFilter<"Group"> | string | null
    leaderId?: StringNullableFilter<"Group"> | string | null
    isActive?: BoolFilter<"Group"> | boolean
    createdAt?: DateTimeFilter<"Group"> | Date | string
    updatedAt?: DateTimeFilter<"Group"> | Date | string
    members?: GroupMemberListRelationFilter
    events?: EventListRelationFilter
    files?: GroupFileListRelationFilter
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    leaderId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: GroupMemberOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    files?: GroupFileOrderByRelationAggregateInput
  }

  export type GroupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    name?: StringFilter<"Group"> | string
    type?: EnumGroupTypeFilter<"Group"> | $Enums.GroupType
    description?: StringNullableFilter<"Group"> | string | null
    leaderId?: StringNullableFilter<"Group"> | string | null
    isActive?: BoolFilter<"Group"> | boolean
    createdAt?: DateTimeFilter<"Group"> | Date | string
    updatedAt?: DateTimeFilter<"Group"> | Date | string
    members?: GroupMemberListRelationFilter
    events?: EventListRelationFilter
    files?: GroupFileListRelationFilter
  }, "id">

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    leaderId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GroupCountOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    OR?: GroupScalarWhereWithAggregatesInput[]
    NOT?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Group"> | string
    name?: StringWithAggregatesFilter<"Group"> | string
    type?: EnumGroupTypeWithAggregatesFilter<"Group"> | $Enums.GroupType
    description?: StringNullableWithAggregatesFilter<"Group"> | string | null
    leaderId?: StringNullableWithAggregatesFilter<"Group"> | string | null
    isActive?: BoolWithAggregatesFilter<"Group"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Group"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Group"> | Date | string
  }

  export type GroupMemberWhereInput = {
    AND?: GroupMemberWhereInput | GroupMemberWhereInput[]
    OR?: GroupMemberWhereInput[]
    NOT?: GroupMemberWhereInput | GroupMemberWhereInput[]
    id?: StringFilter<"GroupMember"> | string
    memberId?: StringFilter<"GroupMember"> | string
    groupId?: StringFilter<"GroupMember"> | string
    joinedAt?: DateTimeFilter<"GroupMember"> | Date | string
    isActive?: BoolFilter<"GroupMember"> | boolean
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    group?: XOR<GroupRelationFilter, GroupWhereInput>
  }

  export type GroupMemberOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    groupId?: SortOrder
    joinedAt?: SortOrder
    isActive?: SortOrder
    member?: MemberOrderByWithRelationInput
    group?: GroupOrderByWithRelationInput
  }

  export type GroupMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    memberId_groupId?: GroupMemberMemberIdGroupIdCompoundUniqueInput
    AND?: GroupMemberWhereInput | GroupMemberWhereInput[]
    OR?: GroupMemberWhereInput[]
    NOT?: GroupMemberWhereInput | GroupMemberWhereInput[]
    memberId?: StringFilter<"GroupMember"> | string
    groupId?: StringFilter<"GroupMember"> | string
    joinedAt?: DateTimeFilter<"GroupMember"> | Date | string
    isActive?: BoolFilter<"GroupMember"> | boolean
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    group?: XOR<GroupRelationFilter, GroupWhereInput>
  }, "id" | "memberId_groupId">

  export type GroupMemberOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    groupId?: SortOrder
    joinedAt?: SortOrder
    isActive?: SortOrder
    _count?: GroupMemberCountOrderByAggregateInput
    _max?: GroupMemberMaxOrderByAggregateInput
    _min?: GroupMemberMinOrderByAggregateInput
  }

  export type GroupMemberScalarWhereWithAggregatesInput = {
    AND?: GroupMemberScalarWhereWithAggregatesInput | GroupMemberScalarWhereWithAggregatesInput[]
    OR?: GroupMemberScalarWhereWithAggregatesInput[]
    NOT?: GroupMemberScalarWhereWithAggregatesInput | GroupMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GroupMember"> | string
    memberId?: StringWithAggregatesFilter<"GroupMember"> | string
    groupId?: StringWithAggregatesFilter<"GroupMember"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"GroupMember"> | Date | string
    isActive?: BoolWithAggregatesFilter<"GroupMember"> | boolean
  }

  export type JourneyTemplateWhereInput = {
    AND?: JourneyTemplateWhereInput | JourneyTemplateWhereInput[]
    OR?: JourneyTemplateWhereInput[]
    NOT?: JourneyTemplateWhereInput | JourneyTemplateWhereInput[]
    id?: StringFilter<"JourneyTemplate"> | string
    name?: StringFilter<"JourneyTemplate"> | string
    description?: StringNullableFilter<"JourneyTemplate"> | string | null
    isActive?: BoolFilter<"JourneyTemplate"> | boolean
    createdAt?: DateTimeFilter<"JourneyTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"JourneyTemplate"> | Date | string
    milestones?: MilestoneListRelationFilter
    journeyStages?: JourneyStageListRelationFilter
  }

  export type JourneyTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    milestones?: MilestoneOrderByRelationAggregateInput
    journeyStages?: JourneyStageOrderByRelationAggregateInput
  }

  export type JourneyTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JourneyTemplateWhereInput | JourneyTemplateWhereInput[]
    OR?: JourneyTemplateWhereInput[]
    NOT?: JourneyTemplateWhereInput | JourneyTemplateWhereInput[]
    name?: StringFilter<"JourneyTemplate"> | string
    description?: StringNullableFilter<"JourneyTemplate"> | string | null
    isActive?: BoolFilter<"JourneyTemplate"> | boolean
    createdAt?: DateTimeFilter<"JourneyTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"JourneyTemplate"> | Date | string
    milestones?: MilestoneListRelationFilter
    journeyStages?: JourneyStageListRelationFilter
  }, "id">

  export type JourneyTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JourneyTemplateCountOrderByAggregateInput
    _max?: JourneyTemplateMaxOrderByAggregateInput
    _min?: JourneyTemplateMinOrderByAggregateInput
  }

  export type JourneyTemplateScalarWhereWithAggregatesInput = {
    AND?: JourneyTemplateScalarWhereWithAggregatesInput | JourneyTemplateScalarWhereWithAggregatesInput[]
    OR?: JourneyTemplateScalarWhereWithAggregatesInput[]
    NOT?: JourneyTemplateScalarWhereWithAggregatesInput | JourneyTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JourneyTemplate"> | string
    name?: StringWithAggregatesFilter<"JourneyTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"JourneyTemplate"> | string | null
    isActive?: BoolWithAggregatesFilter<"JourneyTemplate"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"JourneyTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JourneyTemplate"> | Date | string
  }

  export type MilestoneWhereInput = {
    AND?: MilestoneWhereInput | MilestoneWhereInput[]
    OR?: MilestoneWhereInput[]
    NOT?: MilestoneWhereInput | MilestoneWhereInput[]
    id?: StringFilter<"Milestone"> | string
    templateId?: StringFilter<"Milestone"> | string
    name?: StringFilter<"Milestone"> | string
    description?: StringNullableFilter<"Milestone"> | string | null
    sequence?: IntFilter<"Milestone"> | number
    template?: XOR<JourneyTemplateRelationFilter, JourneyTemplateWhereInput>
    journeyStages?: JourneyStageListRelationFilter
  }

  export type MilestoneOrderByWithRelationInput = {
    id?: SortOrder
    templateId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    sequence?: SortOrder
    template?: JourneyTemplateOrderByWithRelationInput
    journeyStages?: JourneyStageOrderByRelationAggregateInput
  }

  export type MilestoneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    templateId_sequence?: MilestoneTemplateIdSequenceCompoundUniqueInput
    AND?: MilestoneWhereInput | MilestoneWhereInput[]
    OR?: MilestoneWhereInput[]
    NOT?: MilestoneWhereInput | MilestoneWhereInput[]
    templateId?: StringFilter<"Milestone"> | string
    name?: StringFilter<"Milestone"> | string
    description?: StringNullableFilter<"Milestone"> | string | null
    sequence?: IntFilter<"Milestone"> | number
    template?: XOR<JourneyTemplateRelationFilter, JourneyTemplateWhereInput>
    journeyStages?: JourneyStageListRelationFilter
  }, "id" | "templateId_sequence">

  export type MilestoneOrderByWithAggregationInput = {
    id?: SortOrder
    templateId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    sequence?: SortOrder
    _count?: MilestoneCountOrderByAggregateInput
    _avg?: MilestoneAvgOrderByAggregateInput
    _max?: MilestoneMaxOrderByAggregateInput
    _min?: MilestoneMinOrderByAggregateInput
    _sum?: MilestoneSumOrderByAggregateInput
  }

  export type MilestoneScalarWhereWithAggregatesInput = {
    AND?: MilestoneScalarWhereWithAggregatesInput | MilestoneScalarWhereWithAggregatesInput[]
    OR?: MilestoneScalarWhereWithAggregatesInput[]
    NOT?: MilestoneScalarWhereWithAggregatesInput | MilestoneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Milestone"> | string
    templateId?: StringWithAggregatesFilter<"Milestone"> | string
    name?: StringWithAggregatesFilter<"Milestone"> | string
    description?: StringNullableWithAggregatesFilter<"Milestone"> | string | null
    sequence?: IntWithAggregatesFilter<"Milestone"> | number
  }

  export type JourneyStageWhereInput = {
    AND?: JourneyStageWhereInput | JourneyStageWhereInput[]
    OR?: JourneyStageWhereInput[]
    NOT?: JourneyStageWhereInput | JourneyStageWhereInput[]
    id?: StringFilter<"JourneyStage"> | string
    memberId?: StringFilter<"JourneyStage"> | string
    templateId?: StringFilter<"JourneyStage"> | string
    milestoneId?: StringFilter<"JourneyStage"> | string
    status?: EnumStageStatusFilter<"JourneyStage"> | $Enums.StageStatus
    autoProgress?: BoolFilter<"JourneyStage"> | boolean
    flagForFollowUp?: BoolFilter<"JourneyStage"> | boolean
    completedAt?: DateTimeNullableFilter<"JourneyStage"> | Date | string | null
    notes?: StringNullableFilter<"JourneyStage"> | string | null
    createdAt?: DateTimeFilter<"JourneyStage"> | Date | string
    updatedAt?: DateTimeFilter<"JourneyStage"> | Date | string
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    template?: XOR<JourneyTemplateRelationFilter, JourneyTemplateWhereInput>
    milestone?: XOR<MilestoneRelationFilter, MilestoneWhereInput>
  }

  export type JourneyStageOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    templateId?: SortOrder
    milestoneId?: SortOrder
    status?: SortOrder
    autoProgress?: SortOrder
    flagForFollowUp?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    member?: MemberOrderByWithRelationInput
    template?: JourneyTemplateOrderByWithRelationInput
    milestone?: MilestoneOrderByWithRelationInput
  }

  export type JourneyStageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    memberId_milestoneId?: JourneyStageMemberIdMilestoneIdCompoundUniqueInput
    AND?: JourneyStageWhereInput | JourneyStageWhereInput[]
    OR?: JourneyStageWhereInput[]
    NOT?: JourneyStageWhereInput | JourneyStageWhereInput[]
    memberId?: StringFilter<"JourneyStage"> | string
    templateId?: StringFilter<"JourneyStage"> | string
    milestoneId?: StringFilter<"JourneyStage"> | string
    status?: EnumStageStatusFilter<"JourneyStage"> | $Enums.StageStatus
    autoProgress?: BoolFilter<"JourneyStage"> | boolean
    flagForFollowUp?: BoolFilter<"JourneyStage"> | boolean
    completedAt?: DateTimeNullableFilter<"JourneyStage"> | Date | string | null
    notes?: StringNullableFilter<"JourneyStage"> | string | null
    createdAt?: DateTimeFilter<"JourneyStage"> | Date | string
    updatedAt?: DateTimeFilter<"JourneyStage"> | Date | string
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    template?: XOR<JourneyTemplateRelationFilter, JourneyTemplateWhereInput>
    milestone?: XOR<MilestoneRelationFilter, MilestoneWhereInput>
  }, "id" | "memberId_milestoneId">

  export type JourneyStageOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    templateId?: SortOrder
    milestoneId?: SortOrder
    status?: SortOrder
    autoProgress?: SortOrder
    flagForFollowUp?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JourneyStageCountOrderByAggregateInput
    _max?: JourneyStageMaxOrderByAggregateInput
    _min?: JourneyStageMinOrderByAggregateInput
  }

  export type JourneyStageScalarWhereWithAggregatesInput = {
    AND?: JourneyStageScalarWhereWithAggregatesInput | JourneyStageScalarWhereWithAggregatesInput[]
    OR?: JourneyStageScalarWhereWithAggregatesInput[]
    NOT?: JourneyStageScalarWhereWithAggregatesInput | JourneyStageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JourneyStage"> | string
    memberId?: StringWithAggregatesFilter<"JourneyStage"> | string
    templateId?: StringWithAggregatesFilter<"JourneyStage"> | string
    milestoneId?: StringWithAggregatesFilter<"JourneyStage"> | string
    status?: EnumStageStatusWithAggregatesFilter<"JourneyStage"> | $Enums.StageStatus
    autoProgress?: BoolWithAggregatesFilter<"JourneyStage"> | boolean
    flagForFollowUp?: BoolWithAggregatesFilter<"JourneyStage"> | boolean
    completedAt?: DateTimeNullableWithAggregatesFilter<"JourneyStage"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"JourneyStage"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"JourneyStage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JourneyStage"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    dateTime?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    groupId?: StringNullableFilter<"Event"> | string | null
    calendarType?: EnumCalendarTypeFilter<"Event"> | $Enums.CalendarType
    createdBy?: StringFilter<"Event"> | string
    isActive?: BoolFilter<"Event"> | boolean
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    group?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
    attendances?: EventAttendanceListRelationFilter
    tags?: EventTagListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dateTime?: SortOrder
    location?: SortOrderInput | SortOrder
    groupId?: SortOrderInput | SortOrder
    calendarType?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    group?: GroupOrderByWithRelationInput
    attendances?: EventAttendanceOrderByRelationAggregateInput
    tags?: EventTagOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    dateTime?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    groupId?: StringNullableFilter<"Event"> | string | null
    calendarType?: EnumCalendarTypeFilter<"Event"> | $Enums.CalendarType
    createdBy?: StringFilter<"Event"> | string
    isActive?: BoolFilter<"Event"> | boolean
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    group?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
    attendances?: EventAttendanceListRelationFilter
    tags?: EventTagListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dateTime?: SortOrder
    location?: SortOrderInput | SortOrder
    groupId?: SortOrderInput | SortOrder
    calendarType?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringNullableWithAggregatesFilter<"Event"> | string | null
    dateTime?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    location?: StringNullableWithAggregatesFilter<"Event"> | string | null
    groupId?: StringNullableWithAggregatesFilter<"Event"> | string | null
    calendarType?: EnumCalendarTypeWithAggregatesFilter<"Event"> | $Enums.CalendarType
    createdBy?: StringWithAggregatesFilter<"Event"> | string
    isActive?: BoolWithAggregatesFilter<"Event"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type EventAttendanceWhereInput = {
    AND?: EventAttendanceWhereInput | EventAttendanceWhereInput[]
    OR?: EventAttendanceWhereInput[]
    NOT?: EventAttendanceWhereInput | EventAttendanceWhereInput[]
    id?: StringFilter<"EventAttendance"> | string
    eventId?: StringFilter<"EventAttendance"> | string
    memberId?: StringFilter<"EventAttendance"> | string
    attended?: BoolFilter<"EventAttendance"> | boolean
    checkedInAt?: DateTimeNullableFilter<"EventAttendance"> | Date | string | null
    event?: XOR<EventRelationFilter, EventWhereInput>
    member?: XOR<MemberRelationFilter, MemberWhereInput>
  }

  export type EventAttendanceOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    memberId?: SortOrder
    attended?: SortOrder
    checkedInAt?: SortOrderInput | SortOrder
    event?: EventOrderByWithRelationInput
    member?: MemberOrderByWithRelationInput
  }

  export type EventAttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId_memberId?: EventAttendanceEventIdMemberIdCompoundUniqueInput
    AND?: EventAttendanceWhereInput | EventAttendanceWhereInput[]
    OR?: EventAttendanceWhereInput[]
    NOT?: EventAttendanceWhereInput | EventAttendanceWhereInput[]
    eventId?: StringFilter<"EventAttendance"> | string
    memberId?: StringFilter<"EventAttendance"> | string
    attended?: BoolFilter<"EventAttendance"> | boolean
    checkedInAt?: DateTimeNullableFilter<"EventAttendance"> | Date | string | null
    event?: XOR<EventRelationFilter, EventWhereInput>
    member?: XOR<MemberRelationFilter, MemberWhereInput>
  }, "id" | "eventId_memberId">

  export type EventAttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    memberId?: SortOrder
    attended?: SortOrder
    checkedInAt?: SortOrderInput | SortOrder
    _count?: EventAttendanceCountOrderByAggregateInput
    _max?: EventAttendanceMaxOrderByAggregateInput
    _min?: EventAttendanceMinOrderByAggregateInput
  }

  export type EventAttendanceScalarWhereWithAggregatesInput = {
    AND?: EventAttendanceScalarWhereWithAggregatesInput | EventAttendanceScalarWhereWithAggregatesInput[]
    OR?: EventAttendanceScalarWhereWithAggregatesInput[]
    NOT?: EventAttendanceScalarWhereWithAggregatesInput | EventAttendanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventAttendance"> | string
    eventId?: StringWithAggregatesFilter<"EventAttendance"> | string
    memberId?: StringWithAggregatesFilter<"EventAttendance"> | string
    attended?: BoolWithAggregatesFilter<"EventAttendance"> | boolean
    checkedInAt?: DateTimeNullableWithAggregatesFilter<"EventAttendance"> | Date | string | null
  }

  export type CareLogWhereInput = {
    AND?: CareLogWhereInput | CareLogWhereInput[]
    OR?: CareLogWhereInput[]
    NOT?: CareLogWhereInput | CareLogWhereInput[]
    id?: StringFilter<"CareLog"> | string
    memberId?: StringFilter<"CareLog"> | string
    caregiverId?: StringFilter<"CareLog"> | string
    type?: EnumCareTypeFilter<"CareLog"> | $Enums.CareType
    notes?: StringFilter<"CareLog"> | string
    followUpRequired?: BoolFilter<"CareLog"> | boolean
    confidential?: BoolFilter<"CareLog"> | boolean
    followUpDate?: DateTimeNullableFilter<"CareLog"> | Date | string | null
    createdAt?: DateTimeFilter<"CareLog"> | Date | string
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    caregiver?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CareLogOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    caregiverId?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    followUpRequired?: SortOrder
    confidential?: SortOrder
    followUpDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    member?: MemberOrderByWithRelationInput
    caregiver?: UserOrderByWithRelationInput
  }

  export type CareLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CareLogWhereInput | CareLogWhereInput[]
    OR?: CareLogWhereInput[]
    NOT?: CareLogWhereInput | CareLogWhereInput[]
    memberId?: StringFilter<"CareLog"> | string
    caregiverId?: StringFilter<"CareLog"> | string
    type?: EnumCareTypeFilter<"CareLog"> | $Enums.CareType
    notes?: StringFilter<"CareLog"> | string
    followUpRequired?: BoolFilter<"CareLog"> | boolean
    confidential?: BoolFilter<"CareLog"> | boolean
    followUpDate?: DateTimeNullableFilter<"CareLog"> | Date | string | null
    createdAt?: DateTimeFilter<"CareLog"> | Date | string
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    caregiver?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CareLogOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    caregiverId?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    followUpRequired?: SortOrder
    confidential?: SortOrder
    followUpDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CareLogCountOrderByAggregateInput
    _max?: CareLogMaxOrderByAggregateInput
    _min?: CareLogMinOrderByAggregateInput
  }

  export type CareLogScalarWhereWithAggregatesInput = {
    AND?: CareLogScalarWhereWithAggregatesInput | CareLogScalarWhereWithAggregatesInput[]
    OR?: CareLogScalarWhereWithAggregatesInput[]
    NOT?: CareLogScalarWhereWithAggregatesInput | CareLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CareLog"> | string
    memberId?: StringWithAggregatesFilter<"CareLog"> | string
    caregiverId?: StringWithAggregatesFilter<"CareLog"> | string
    type?: EnumCareTypeWithAggregatesFilter<"CareLog"> | $Enums.CareType
    notes?: StringWithAggregatesFilter<"CareLog"> | string
    followUpRequired?: BoolWithAggregatesFilter<"CareLog"> | boolean
    confidential?: BoolWithAggregatesFilter<"CareLog"> | boolean
    followUpDate?: DateTimeNullableWithAggregatesFilter<"CareLog"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CareLog"> | Date | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    label?: StringFilter<"Tag"> | string
    category?: EnumTagCategoryFilter<"Tag"> | $Enums.TagCategory
    color?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    members?: MemberTagListRelationFilter
    events?: EventTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    members?: MemberTagOrderByRelationAggregateInput
    events?: EventTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    label?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    category?: EnumTagCategoryFilter<"Tag"> | $Enums.TagCategory
    color?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    members?: MemberTagListRelationFilter
    events?: EventTagListRelationFilter
  }, "id" | "label">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    label?: StringWithAggregatesFilter<"Tag"> | string
    category?: EnumTagCategoryWithAggregatesFilter<"Tag"> | $Enums.TagCategory
    color?: StringWithAggregatesFilter<"Tag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type MemberTagWhereInput = {
    AND?: MemberTagWhereInput | MemberTagWhereInput[]
    OR?: MemberTagWhereInput[]
    NOT?: MemberTagWhereInput | MemberTagWhereInput[]
    id?: StringFilter<"MemberTag"> | string
    memberId?: StringFilter<"MemberTag"> | string
    tagId?: StringFilter<"MemberTag"> | string
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }

  export type MemberTagOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    tagId?: SortOrder
    member?: MemberOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type MemberTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    memberId_tagId?: MemberTagMemberIdTagIdCompoundUniqueInput
    AND?: MemberTagWhereInput | MemberTagWhereInput[]
    OR?: MemberTagWhereInput[]
    NOT?: MemberTagWhereInput | MemberTagWhereInput[]
    memberId?: StringFilter<"MemberTag"> | string
    tagId?: StringFilter<"MemberTag"> | string
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }, "id" | "memberId_tagId">

  export type MemberTagOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    tagId?: SortOrder
    _count?: MemberTagCountOrderByAggregateInput
    _max?: MemberTagMaxOrderByAggregateInput
    _min?: MemberTagMinOrderByAggregateInput
  }

  export type MemberTagScalarWhereWithAggregatesInput = {
    AND?: MemberTagScalarWhereWithAggregatesInput | MemberTagScalarWhereWithAggregatesInput[]
    OR?: MemberTagScalarWhereWithAggregatesInput[]
    NOT?: MemberTagScalarWhereWithAggregatesInput | MemberTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MemberTag"> | string
    memberId?: StringWithAggregatesFilter<"MemberTag"> | string
    tagId?: StringWithAggregatesFilter<"MemberTag"> | string
  }

  export type EventTagWhereInput = {
    AND?: EventTagWhereInput | EventTagWhereInput[]
    OR?: EventTagWhereInput[]
    NOT?: EventTagWhereInput | EventTagWhereInput[]
    id?: StringFilter<"EventTag"> | string
    eventId?: StringFilter<"EventTag"> | string
    tagId?: StringFilter<"EventTag"> | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }

  export type EventTagOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    tagId?: SortOrder
    event?: EventOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type EventTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId_tagId?: EventTagEventIdTagIdCompoundUniqueInput
    AND?: EventTagWhereInput | EventTagWhereInput[]
    OR?: EventTagWhereInput[]
    NOT?: EventTagWhereInput | EventTagWhereInput[]
    eventId?: StringFilter<"EventTag"> | string
    tagId?: StringFilter<"EventTag"> | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }, "id" | "eventId_tagId">

  export type EventTagOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    tagId?: SortOrder
    _count?: EventTagCountOrderByAggregateInput
    _max?: EventTagMaxOrderByAggregateInput
    _min?: EventTagMinOrderByAggregateInput
  }

  export type EventTagScalarWhereWithAggregatesInput = {
    AND?: EventTagScalarWhereWithAggregatesInput | EventTagScalarWhereWithAggregatesInput[]
    OR?: EventTagScalarWhereWithAggregatesInput[]
    NOT?: EventTagScalarWhereWithAggregatesInput | EventTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventTag"> | string
    eventId?: StringWithAggregatesFilter<"EventTag"> | string
    tagId?: StringWithAggregatesFilter<"EventTag"> | string
  }

  export type GroupFileWhereInput = {
    AND?: GroupFileWhereInput | GroupFileWhereInput[]
    OR?: GroupFileWhereInput[]
    NOT?: GroupFileWhereInput | GroupFileWhereInput[]
    id?: StringFilter<"GroupFile"> | string
    groupId?: StringFilter<"GroupFile"> | string
    fileName?: StringFilter<"GroupFile"> | string
    fileUrl?: StringFilter<"GroupFile"> | string
    fileSize?: IntFilter<"GroupFile"> | number
    mimeType?: StringFilter<"GroupFile"> | string
    uploadedBy?: StringFilter<"GroupFile"> | string
    uploadedAt?: DateTimeFilter<"GroupFile"> | Date | string
    group?: XOR<GroupRelationFilter, GroupWhereInput>
  }

  export type GroupFileOrderByWithRelationInput = {
    id?: SortOrder
    groupId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
    group?: GroupOrderByWithRelationInput
  }

  export type GroupFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GroupFileWhereInput | GroupFileWhereInput[]
    OR?: GroupFileWhereInput[]
    NOT?: GroupFileWhereInput | GroupFileWhereInput[]
    groupId?: StringFilter<"GroupFile"> | string
    fileName?: StringFilter<"GroupFile"> | string
    fileUrl?: StringFilter<"GroupFile"> | string
    fileSize?: IntFilter<"GroupFile"> | number
    mimeType?: StringFilter<"GroupFile"> | string
    uploadedBy?: StringFilter<"GroupFile"> | string
    uploadedAt?: DateTimeFilter<"GroupFile"> | Date | string
    group?: XOR<GroupRelationFilter, GroupWhereInput>
  }, "id">

  export type GroupFileOrderByWithAggregationInput = {
    id?: SortOrder
    groupId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
    _count?: GroupFileCountOrderByAggregateInput
    _avg?: GroupFileAvgOrderByAggregateInput
    _max?: GroupFileMaxOrderByAggregateInput
    _min?: GroupFileMinOrderByAggregateInput
    _sum?: GroupFileSumOrderByAggregateInput
  }

  export type GroupFileScalarWhereWithAggregatesInput = {
    AND?: GroupFileScalarWhereWithAggregatesInput | GroupFileScalarWhereWithAggregatesInput[]
    OR?: GroupFileScalarWhereWithAggregatesInput[]
    NOT?: GroupFileScalarWhereWithAggregatesInput | GroupFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GroupFile"> | string
    groupId?: StringWithAggregatesFilter<"GroupFile"> | string
    fileName?: StringWithAggregatesFilter<"GroupFile"> | string
    fileUrl?: StringWithAggregatesFilter<"GroupFile"> | string
    fileSize?: IntWithAggregatesFilter<"GroupFile"> | number
    mimeType?: StringWithAggregatesFilter<"GroupFile"> | string
    uploadedBy?: StringWithAggregatesFilter<"GroupFile"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"GroupFile"> | Date | string
  }

  export type MemberFamilyWhereInput = {
    AND?: MemberFamilyWhereInput | MemberFamilyWhereInput[]
    OR?: MemberFamilyWhereInput[]
    NOT?: MemberFamilyWhereInput | MemberFamilyWhereInput[]
    id?: StringFilter<"MemberFamily"> | string
    memberId?: StringFilter<"MemberFamily"> | string
    relatedId?: StringFilter<"MemberFamily"> | string
    relationship?: StringFilter<"MemberFamily"> | string
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    relatedMember?: XOR<MemberRelationFilter, MemberWhereInput>
  }

  export type MemberFamilyOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    relatedId?: SortOrder
    relationship?: SortOrder
    member?: MemberOrderByWithRelationInput
    relatedMember?: MemberOrderByWithRelationInput
  }

  export type MemberFamilyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    memberId_relatedId?: MemberFamilyMemberIdRelatedIdCompoundUniqueInput
    AND?: MemberFamilyWhereInput | MemberFamilyWhereInput[]
    OR?: MemberFamilyWhereInput[]
    NOT?: MemberFamilyWhereInput | MemberFamilyWhereInput[]
    memberId?: StringFilter<"MemberFamily"> | string
    relatedId?: StringFilter<"MemberFamily"> | string
    relationship?: StringFilter<"MemberFamily"> | string
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    relatedMember?: XOR<MemberRelationFilter, MemberWhereInput>
  }, "id" | "memberId_relatedId">

  export type MemberFamilyOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    relatedId?: SortOrder
    relationship?: SortOrder
    _count?: MemberFamilyCountOrderByAggregateInput
    _max?: MemberFamilyMaxOrderByAggregateInput
    _min?: MemberFamilyMinOrderByAggregateInput
  }

  export type MemberFamilyScalarWhereWithAggregatesInput = {
    AND?: MemberFamilyScalarWhereWithAggregatesInput | MemberFamilyScalarWhereWithAggregatesInput[]
    OR?: MemberFamilyScalarWhereWithAggregatesInput[]
    NOT?: MemberFamilyScalarWhereWithAggregatesInput | MemberFamilyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MemberFamily"> | string
    memberId?: StringWithAggregatesFilter<"MemberFamily"> | string
    relatedId?: StringWithAggregatesFilter<"MemberFamily"> | string
    relationship?: StringWithAggregatesFilter<"MemberFamily"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    member?: MemberCreateNestedOneWithoutUserInput
    careLogs?: CareLogCreateNestedManyWithoutCaregiverInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    member?: MemberUncheckedCreateNestedOneWithoutUserInput
    careLogs?: CareLogUncheckedCreateNestedManyWithoutCaregiverInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneWithoutUserNestedInput
    careLogs?: CareLogUpdateManyWithoutCaregiverNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUncheckedUpdateOneWithoutUserNestedInput
    careLogs?: CareLogUncheckedUpdateManyWithoutCaregiverNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutMemberInput
    groups?: GroupMemberCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageCreateNestedManyWithoutMemberInput
    careLogs?: CareLogCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceCreateNestedManyWithoutMemberInput
    tags?: MemberTagCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberUncheckedCreateInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupMemberUncheckedCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutMemberInput
    careLogs?: CareLogUncheckedCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceUncheckedCreateNestedManyWithoutMemberInput
    tags?: MemberTagUncheckedCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyUncheckedCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyUncheckedCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutMemberNestedInput
    groups?: GroupMemberUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupMemberUncheckedUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUncheckedUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUncheckedUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUncheckedUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUncheckedUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUncheckedUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberCreateManyInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupCreateInput = {
    id?: string
    name: string
    type: $Enums.GroupType
    description?: string | null
    leaderId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    events?: EventCreateNestedManyWithoutGroupInput
    files?: GroupFileCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.GroupType
    description?: string | null
    leaderId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    events?: EventUncheckedCreateNestedManyWithoutGroupInput
    files?: GroupFileUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumGroupTypeFieldUpdateOperationsInput | $Enums.GroupType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    events?: EventUpdateManyWithoutGroupNestedInput
    files?: GroupFileUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumGroupTypeFieldUpdateOperationsInput | $Enums.GroupType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    events?: EventUncheckedUpdateManyWithoutGroupNestedInput
    files?: GroupFileUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupCreateManyInput = {
    id?: string
    name: string
    type: $Enums.GroupType
    description?: string | null
    leaderId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumGroupTypeFieldUpdateOperationsInput | $Enums.GroupType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumGroupTypeFieldUpdateOperationsInput | $Enums.GroupType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMemberCreateInput = {
    id?: string
    joinedAt?: Date | string
    isActive?: boolean
    member: MemberCreateNestedOneWithoutGroupsInput
    group: GroupCreateNestedOneWithoutMembersInput
  }

  export type GroupMemberUncheckedCreateInput = {
    id?: string
    memberId: string
    groupId: string
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type GroupMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    member?: MemberUpdateOneRequiredWithoutGroupsNestedInput
    group?: GroupUpdateOneRequiredWithoutMembersNestedInput
  }

  export type GroupMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GroupMemberCreateManyInput = {
    id?: string
    memberId: string
    groupId: string
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type GroupMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GroupMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JourneyTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    milestones?: MilestoneCreateNestedManyWithoutTemplateInput
    journeyStages?: JourneyStageCreateNestedManyWithoutTemplateInput
  }

  export type JourneyTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    milestones?: MilestoneUncheckedCreateNestedManyWithoutTemplateInput
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type JourneyTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    milestones?: MilestoneUpdateManyWithoutTemplateNestedInput
    journeyStages?: JourneyStageUpdateManyWithoutTemplateNestedInput
  }

  export type JourneyTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    milestones?: MilestoneUncheckedUpdateManyWithoutTemplateNestedInput
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type JourneyTemplateCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JourneyTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MilestoneCreateInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    template: JourneyTemplateCreateNestedOneWithoutMilestonesInput
    journeyStages?: JourneyStageCreateNestedManyWithoutMilestoneInput
  }

  export type MilestoneUncheckedCreateInput = {
    id?: string
    templateId: string
    name: string
    description?: string | null
    sequence: number
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutMilestoneInput
  }

  export type MilestoneUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    template?: JourneyTemplateUpdateOneRequiredWithoutMilestonesNestedInput
    journeyStages?: JourneyStageUpdateManyWithoutMilestoneNestedInput
  }

  export type MilestoneUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutMilestoneNestedInput
  }

  export type MilestoneCreateManyInput = {
    id?: string
    templateId: string
    name: string
    description?: string | null
    sequence: number
  }

  export type MilestoneUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
  }

  export type MilestoneUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
  }

  export type JourneyStageCreateInput = {
    id?: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    member: MemberCreateNestedOneWithoutJourneyStagesInput
    template: JourneyTemplateCreateNestedOneWithoutJourneyStagesInput
    milestone: MilestoneCreateNestedOneWithoutJourneyStagesInput
  }

  export type JourneyStageUncheckedCreateInput = {
    id?: string
    memberId: string
    templateId: string
    milestoneId: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JourneyStageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutJourneyStagesNestedInput
    template?: JourneyTemplateUpdateOneRequiredWithoutJourneyStagesNestedInput
    milestone?: MilestoneUpdateOneRequiredWithoutJourneyStagesNestedInput
  }

  export type JourneyStageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    milestoneId?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyStageCreateManyInput = {
    id?: string
    memberId: string
    templateId: string
    milestoneId: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JourneyStageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyStageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    milestoneId?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    id?: string
    title: string
    description?: string | null
    dateTime: Date | string
    location?: string | null
    calendarType?: $Enums.CalendarType
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    group?: GroupCreateNestedOneWithoutEventsInput
    attendances?: EventAttendanceCreateNestedManyWithoutEventInput
    tags?: EventTagCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    dateTime: Date | string
    location?: string | null
    groupId?: string | null
    calendarType?: $Enums.CalendarType
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendances?: EventAttendanceUncheckedCreateNestedManyWithoutEventInput
    tags?: EventTagUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: GroupUpdateOneWithoutEventsNestedInput
    attendances?: EventAttendanceUpdateManyWithoutEventNestedInput
    tags?: EventTagUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: EventAttendanceUncheckedUpdateManyWithoutEventNestedInput
    tags?: EventTagUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    dateTime: Date | string
    location?: string | null
    groupId?: string | null
    calendarType?: $Enums.CalendarType
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendanceCreateInput = {
    id?: string
    attended?: boolean
    checkedInAt?: Date | string | null
    event: EventCreateNestedOneWithoutAttendancesInput
    member: MemberCreateNestedOneWithoutEventAttendancesInput
  }

  export type EventAttendanceUncheckedCreateInput = {
    id?: string
    eventId: string
    memberId: string
    attended?: boolean
    checkedInAt?: Date | string | null
  }

  export type EventAttendanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    attended?: BoolFieldUpdateOperationsInput | boolean
    checkedInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event?: EventUpdateOneRequiredWithoutAttendancesNestedInput
    member?: MemberUpdateOneRequiredWithoutEventAttendancesNestedInput
  }

  export type EventAttendanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    attended?: BoolFieldUpdateOperationsInput | boolean
    checkedInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventAttendanceCreateManyInput = {
    id?: string
    eventId: string
    memberId: string
    attended?: boolean
    checkedInAt?: Date | string | null
  }

  export type EventAttendanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    attended?: BoolFieldUpdateOperationsInput | boolean
    checkedInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventAttendanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    attended?: BoolFieldUpdateOperationsInput | boolean
    checkedInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CareLogCreateInput = {
    id?: string
    type: $Enums.CareType
    notes: string
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
    member: MemberCreateNestedOneWithoutCareLogsInput
    caregiver: UserCreateNestedOneWithoutCareLogsInput
  }

  export type CareLogUncheckedCreateInput = {
    id?: string
    memberId: string
    caregiverId: string
    type: $Enums.CareType
    notes: string
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
  }

  export type CareLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCareTypeFieldUpdateOperationsInput | $Enums.CareType
    notes?: StringFieldUpdateOperationsInput | string
    followUpRequired?: BoolFieldUpdateOperationsInput | boolean
    confidential?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutCareLogsNestedInput
    caregiver?: UserUpdateOneRequiredWithoutCareLogsNestedInput
  }

  export type CareLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    caregiverId?: StringFieldUpdateOperationsInput | string
    type?: EnumCareTypeFieldUpdateOperationsInput | $Enums.CareType
    notes?: StringFieldUpdateOperationsInput | string
    followUpRequired?: BoolFieldUpdateOperationsInput | boolean
    confidential?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareLogCreateManyInput = {
    id?: string
    memberId: string
    caregiverId: string
    type: $Enums.CareType
    notes: string
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
  }

  export type CareLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCareTypeFieldUpdateOperationsInput | $Enums.CareType
    notes?: StringFieldUpdateOperationsInput | string
    followUpRequired?: BoolFieldUpdateOperationsInput | boolean
    confidential?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    caregiverId?: StringFieldUpdateOperationsInput | string
    type?: EnumCareTypeFieldUpdateOperationsInput | $Enums.CareType
    notes?: StringFieldUpdateOperationsInput | string
    followUpRequired?: BoolFieldUpdateOperationsInput | boolean
    confidential?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    id?: string
    label: string
    category?: $Enums.TagCategory
    color?: string
    createdAt?: Date | string
    members?: MemberTagCreateNestedManyWithoutTagInput
    events?: EventTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    label: string
    category?: $Enums.TagCategory
    color?: string
    createdAt?: Date | string
    members?: MemberTagUncheckedCreateNestedManyWithoutTagInput
    events?: EventTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberTagUpdateManyWithoutTagNestedInput
    events?: EventTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberTagUncheckedUpdateManyWithoutTagNestedInput
    events?: EventTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    label: string
    category?: $Enums.TagCategory
    color?: string
    createdAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberTagCreateInput = {
    id?: string
    member: MemberCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutMembersInput
  }

  export type MemberTagUncheckedCreateInput = {
    id?: string
    memberId: string
    tagId: string
  }

  export type MemberTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    member?: MemberUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutMembersNestedInput
  }

  export type MemberTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type MemberTagCreateManyInput = {
    id?: string
    memberId: string
    tagId: string
  }

  export type MemberTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type MemberTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type EventTagCreateInput = {
    id?: string
    event: EventCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutEventsInput
  }

  export type EventTagUncheckedCreateInput = {
    id?: string
    eventId: string
    tagId: string
  }

  export type EventTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type EventTagCreateManyInput = {
    id?: string
    eventId: string
    tagId: string
  }

  export type EventTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type EventTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type GroupFileCreateInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileSize: number
    mimeType: string
    uploadedBy: string
    uploadedAt?: Date | string
    group: GroupCreateNestedOneWithoutFilesInput
  }

  export type GroupFileUncheckedCreateInput = {
    id?: string
    groupId: string
    fileName: string
    fileUrl: string
    fileSize: number
    mimeType: string
    uploadedBy: string
    uploadedAt?: Date | string
  }

  export type GroupFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: GroupUpdateOneRequiredWithoutFilesNestedInput
  }

  export type GroupFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupFileCreateManyInput = {
    id?: string
    groupId: string
    fileName: string
    fileUrl: string
    fileSize: number
    mimeType: string
    uploadedBy: string
    uploadedAt?: Date | string
  }

  export type GroupFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberFamilyCreateInput = {
    id?: string
    relationship: string
    member: MemberCreateNestedOneWithoutFamilyConnectionsInput
    relatedMember: MemberCreateNestedOneWithoutRelatedConnectionsInput
  }

  export type MemberFamilyUncheckedCreateInput = {
    id?: string
    memberId: string
    relatedId: string
    relationship: string
  }

  export type MemberFamilyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    member?: MemberUpdateOneRequiredWithoutFamilyConnectionsNestedInput
    relatedMember?: MemberUpdateOneRequiredWithoutRelatedConnectionsNestedInput
  }

  export type MemberFamilyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    relatedId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
  }

  export type MemberFamilyCreateManyInput = {
    id?: string
    memberId: string
    relatedId: string
    relationship: string
  }

  export type MemberFamilyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
  }

  export type MemberFamilyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    relatedId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MemberNullableRelationFilter = {
    is?: MemberWhereInput | null
    isNot?: MemberWhereInput | null
  }

  export type CareLogListRelationFilter = {
    every?: CareLogWhereInput
    some?: CareLogWhereInput
    none?: CareLogWhereInput
  }

  export type CareLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type EnumMaritalStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaritalStatusNullableFilter<$PrismaModel> | $Enums.MaritalStatus | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type GroupMemberListRelationFilter = {
    every?: GroupMemberWhereInput
    some?: GroupMemberWhereInput
    none?: GroupMemberWhereInput
  }

  export type JourneyStageListRelationFilter = {
    every?: JourneyStageWhereInput
    some?: JourneyStageWhereInput
    none?: JourneyStageWhereInput
  }

  export type EventAttendanceListRelationFilter = {
    every?: EventAttendanceWhereInput
    some?: EventAttendanceWhereInput
    none?: EventAttendanceWhereInput
  }

  export type MemberTagListRelationFilter = {
    every?: MemberTagWhereInput
    some?: MemberTagWhereInput
    none?: MemberTagWhereInput
  }

  export type MemberFamilyListRelationFilter = {
    every?: MemberFamilyWhereInput
    some?: MemberFamilyWhereInput
    none?: MemberFamilyWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GroupMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JourneyStageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventAttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberFamilyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    maritalStatus?: SortOrder
    spiritualStatus?: SortOrder
    profilePhotoUrl?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MemberMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    maritalStatus?: SortOrder
    spiritualStatus?: SortOrder
    profilePhotoUrl?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MemberMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    maritalStatus?: SortOrder
    spiritualStatus?: SortOrder
    profilePhotoUrl?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type EnumMaritalStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaritalStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.MaritalStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMaritalStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumMaritalStatusNullableFilter<$PrismaModel>
  }

  export type EnumGroupTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.GroupType | EnumGroupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GroupType[] | ListEnumGroupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GroupType[] | ListEnumGroupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGroupTypeFilter<$PrismaModel> | $Enums.GroupType
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type GroupFileListRelationFilter = {
    every?: GroupFileWhereInput
    some?: GroupFileWhereInput
    none?: GroupFileWhereInput
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    leaderId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    leaderId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    leaderId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumGroupTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GroupType | EnumGroupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GroupType[] | ListEnumGroupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GroupType[] | ListEnumGroupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGroupTypeWithAggregatesFilter<$PrismaModel> | $Enums.GroupType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGroupTypeFilter<$PrismaModel>
    _max?: NestedEnumGroupTypeFilter<$PrismaModel>
  }

  export type MemberRelationFilter = {
    is?: MemberWhereInput
    isNot?: MemberWhereInput
  }

  export type GroupRelationFilter = {
    is?: GroupWhereInput
    isNot?: GroupWhereInput
  }

  export type GroupMemberMemberIdGroupIdCompoundUniqueInput = {
    memberId: string
    groupId: string
  }

  export type GroupMemberCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    groupId?: SortOrder
    joinedAt?: SortOrder
    isActive?: SortOrder
  }

  export type GroupMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    groupId?: SortOrder
    joinedAt?: SortOrder
    isActive?: SortOrder
  }

  export type GroupMemberMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    groupId?: SortOrder
    joinedAt?: SortOrder
    isActive?: SortOrder
  }

  export type MilestoneListRelationFilter = {
    every?: MilestoneWhereInput
    some?: MilestoneWhereInput
    none?: MilestoneWhereInput
  }

  export type MilestoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JourneyTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JourneyTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JourneyTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type JourneyTemplateRelationFilter = {
    is?: JourneyTemplateWhereInput
    isNot?: JourneyTemplateWhereInput
  }

  export type MilestoneTemplateIdSequenceCompoundUniqueInput = {
    templateId: string
    sequence: number
  }

  export type MilestoneCountOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sequence?: SortOrder
  }

  export type MilestoneAvgOrderByAggregateInput = {
    sequence?: SortOrder
  }

  export type MilestoneMaxOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sequence?: SortOrder
  }

  export type MilestoneMinOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sequence?: SortOrder
  }

  export type MilestoneSumOrderByAggregateInput = {
    sequence?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumStageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StageStatus | EnumStageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StageStatus[] | ListEnumStageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageStatus[] | ListEnumStageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStageStatusFilter<$PrismaModel> | $Enums.StageStatus
  }

  export type MilestoneRelationFilter = {
    is?: MilestoneWhereInput
    isNot?: MilestoneWhereInput
  }

  export type JourneyStageMemberIdMilestoneIdCompoundUniqueInput = {
    memberId: string
    milestoneId: string
  }

  export type JourneyStageCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    templateId?: SortOrder
    milestoneId?: SortOrder
    status?: SortOrder
    autoProgress?: SortOrder
    flagForFollowUp?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JourneyStageMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    templateId?: SortOrder
    milestoneId?: SortOrder
    status?: SortOrder
    autoProgress?: SortOrder
    flagForFollowUp?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JourneyStageMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    templateId?: SortOrder
    milestoneId?: SortOrder
    status?: SortOrder
    autoProgress?: SortOrder
    flagForFollowUp?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StageStatus | EnumStageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StageStatus[] | ListEnumStageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageStatus[] | ListEnumStageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStageStatusWithAggregatesFilter<$PrismaModel> | $Enums.StageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStageStatusFilter<$PrismaModel>
    _max?: NestedEnumStageStatusFilter<$PrismaModel>
  }

  export type EnumCalendarTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarType | EnumCalendarTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarType[] | ListEnumCalendarTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarType[] | ListEnumCalendarTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarTypeFilter<$PrismaModel> | $Enums.CalendarType
  }

  export type GroupNullableRelationFilter = {
    is?: GroupWhereInput | null
    isNot?: GroupWhereInput | null
  }

  export type EventTagListRelationFilter = {
    every?: EventTagWhereInput
    some?: EventTagWhereInput
    none?: EventTagWhereInput
  }

  export type EventTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dateTime?: SortOrder
    location?: SortOrder
    groupId?: SortOrder
    calendarType?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dateTime?: SortOrder
    location?: SortOrder
    groupId?: SortOrder
    calendarType?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dateTime?: SortOrder
    location?: SortOrder
    groupId?: SortOrder
    calendarType?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCalendarTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarType | EnumCalendarTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarType[] | ListEnumCalendarTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarType[] | ListEnumCalendarTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarTypeWithAggregatesFilter<$PrismaModel> | $Enums.CalendarType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCalendarTypeFilter<$PrismaModel>
    _max?: NestedEnumCalendarTypeFilter<$PrismaModel>
  }

  export type EventRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type EventAttendanceEventIdMemberIdCompoundUniqueInput = {
    eventId: string
    memberId: string
  }

  export type EventAttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    memberId?: SortOrder
    attended?: SortOrder
    checkedInAt?: SortOrder
  }

  export type EventAttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    memberId?: SortOrder
    attended?: SortOrder
    checkedInAt?: SortOrder
  }

  export type EventAttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    memberId?: SortOrder
    attended?: SortOrder
    checkedInAt?: SortOrder
  }

  export type EnumCareTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CareType | EnumCareTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CareType[] | ListEnumCareTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CareType[] | ListEnumCareTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCareTypeFilter<$PrismaModel> | $Enums.CareType
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CareLogCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    caregiverId?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    followUpRequired?: SortOrder
    confidential?: SortOrder
    followUpDate?: SortOrder
    createdAt?: SortOrder
  }

  export type CareLogMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    caregiverId?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    followUpRequired?: SortOrder
    confidential?: SortOrder
    followUpDate?: SortOrder
    createdAt?: SortOrder
  }

  export type CareLogMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    caregiverId?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    followUpRequired?: SortOrder
    confidential?: SortOrder
    followUpDate?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumCareTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CareType | EnumCareTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CareType[] | ListEnumCareTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CareType[] | ListEnumCareTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCareTypeWithAggregatesFilter<$PrismaModel> | $Enums.CareType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCareTypeFilter<$PrismaModel>
    _max?: NestedEnumCareTypeFilter<$PrismaModel>
  }

  export type EnumTagCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.TagCategory | EnumTagCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTagCategoryFilter<$PrismaModel> | $Enums.TagCategory
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumTagCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TagCategory | EnumTagCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTagCategoryWithAggregatesFilter<$PrismaModel> | $Enums.TagCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTagCategoryFilter<$PrismaModel>
    _max?: NestedEnumTagCategoryFilter<$PrismaModel>
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type MemberTagMemberIdTagIdCompoundUniqueInput = {
    memberId: string
    tagId: string
  }

  export type MemberTagCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    tagId?: SortOrder
  }

  export type MemberTagMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    tagId?: SortOrder
  }

  export type MemberTagMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    tagId?: SortOrder
  }

  export type EventTagEventIdTagIdCompoundUniqueInput = {
    eventId: string
    tagId: string
  }

  export type EventTagCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    tagId?: SortOrder
  }

  export type EventTagMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    tagId?: SortOrder
  }

  export type EventTagMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    tagId?: SortOrder
  }

  export type GroupFileCountOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
  }

  export type GroupFileAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type GroupFileMaxOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
  }

  export type GroupFileMinOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
  }

  export type GroupFileSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type MemberFamilyMemberIdRelatedIdCompoundUniqueInput = {
    memberId: string
    relatedId: string
  }

  export type MemberFamilyCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    relatedId?: SortOrder
    relationship?: SortOrder
  }

  export type MemberFamilyMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    relatedId?: SortOrder
    relationship?: SortOrder
  }

  export type MemberFamilyMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    relatedId?: SortOrder
    relationship?: SortOrder
  }

  export type MemberCreateNestedOneWithoutUserInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput
    connect?: MemberWhereUniqueInput
  }

  export type CareLogCreateNestedManyWithoutCaregiverInput = {
    create?: XOR<CareLogCreateWithoutCaregiverInput, CareLogUncheckedCreateWithoutCaregiverInput> | CareLogCreateWithoutCaregiverInput[] | CareLogUncheckedCreateWithoutCaregiverInput[]
    connectOrCreate?: CareLogCreateOrConnectWithoutCaregiverInput | CareLogCreateOrConnectWithoutCaregiverInput[]
    createMany?: CareLogCreateManyCaregiverInputEnvelope
    connect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
  }

  export type MemberUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput
    connect?: MemberWhereUniqueInput
  }

  export type CareLogUncheckedCreateNestedManyWithoutCaregiverInput = {
    create?: XOR<CareLogCreateWithoutCaregiverInput, CareLogUncheckedCreateWithoutCaregiverInput> | CareLogCreateWithoutCaregiverInput[] | CareLogUncheckedCreateWithoutCaregiverInput[]
    connectOrCreate?: CareLogCreateOrConnectWithoutCaregiverInput | CareLogCreateOrConnectWithoutCaregiverInput[]
    createMany?: CareLogCreateManyCaregiverInputEnvelope
    connect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MemberUpdateOneWithoutUserNestedInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput
    upsert?: MemberUpsertWithoutUserInput
    disconnect?: MemberWhereInput | boolean
    delete?: MemberWhereInput | boolean
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutUserInput, MemberUpdateWithoutUserInput>, MemberUncheckedUpdateWithoutUserInput>
  }

  export type CareLogUpdateManyWithoutCaregiverNestedInput = {
    create?: XOR<CareLogCreateWithoutCaregiverInput, CareLogUncheckedCreateWithoutCaregiverInput> | CareLogCreateWithoutCaregiverInput[] | CareLogUncheckedCreateWithoutCaregiverInput[]
    connectOrCreate?: CareLogCreateOrConnectWithoutCaregiverInput | CareLogCreateOrConnectWithoutCaregiverInput[]
    upsert?: CareLogUpsertWithWhereUniqueWithoutCaregiverInput | CareLogUpsertWithWhereUniqueWithoutCaregiverInput[]
    createMany?: CareLogCreateManyCaregiverInputEnvelope
    set?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    disconnect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    delete?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    connect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    update?: CareLogUpdateWithWhereUniqueWithoutCaregiverInput | CareLogUpdateWithWhereUniqueWithoutCaregiverInput[]
    updateMany?: CareLogUpdateManyWithWhereWithoutCaregiverInput | CareLogUpdateManyWithWhereWithoutCaregiverInput[]
    deleteMany?: CareLogScalarWhereInput | CareLogScalarWhereInput[]
  }

  export type MemberUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput
    upsert?: MemberUpsertWithoutUserInput
    disconnect?: MemberWhereInput | boolean
    delete?: MemberWhereInput | boolean
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutUserInput, MemberUpdateWithoutUserInput>, MemberUncheckedUpdateWithoutUserInput>
  }

  export type CareLogUncheckedUpdateManyWithoutCaregiverNestedInput = {
    create?: XOR<CareLogCreateWithoutCaregiverInput, CareLogUncheckedCreateWithoutCaregiverInput> | CareLogCreateWithoutCaregiverInput[] | CareLogUncheckedCreateWithoutCaregiverInput[]
    connectOrCreate?: CareLogCreateOrConnectWithoutCaregiverInput | CareLogCreateOrConnectWithoutCaregiverInput[]
    upsert?: CareLogUpsertWithWhereUniqueWithoutCaregiverInput | CareLogUpsertWithWhereUniqueWithoutCaregiverInput[]
    createMany?: CareLogCreateManyCaregiverInputEnvelope
    set?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    disconnect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    delete?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    connect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    update?: CareLogUpdateWithWhereUniqueWithoutCaregiverInput | CareLogUpdateWithWhereUniqueWithoutCaregiverInput[]
    updateMany?: CareLogUpdateManyWithWhereWithoutCaregiverInput | CareLogUpdateManyWithWhereWithoutCaregiverInput[]
    deleteMany?: CareLogScalarWhereInput | CareLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMemberInput = {
    create?: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemberInput
    connect?: UserWhereUniqueInput
  }

  export type GroupMemberCreateNestedManyWithoutMemberInput = {
    create?: XOR<GroupMemberCreateWithoutMemberInput, GroupMemberUncheckedCreateWithoutMemberInput> | GroupMemberCreateWithoutMemberInput[] | GroupMemberUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutMemberInput | GroupMemberCreateOrConnectWithoutMemberInput[]
    createMany?: GroupMemberCreateManyMemberInputEnvelope
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
  }

  export type JourneyStageCreateNestedManyWithoutMemberInput = {
    create?: XOR<JourneyStageCreateWithoutMemberInput, JourneyStageUncheckedCreateWithoutMemberInput> | JourneyStageCreateWithoutMemberInput[] | JourneyStageUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutMemberInput | JourneyStageCreateOrConnectWithoutMemberInput[]
    createMany?: JourneyStageCreateManyMemberInputEnvelope
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
  }

  export type CareLogCreateNestedManyWithoutMemberInput = {
    create?: XOR<CareLogCreateWithoutMemberInput, CareLogUncheckedCreateWithoutMemberInput> | CareLogCreateWithoutMemberInput[] | CareLogUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: CareLogCreateOrConnectWithoutMemberInput | CareLogCreateOrConnectWithoutMemberInput[]
    createMany?: CareLogCreateManyMemberInputEnvelope
    connect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
  }

  export type EventAttendanceCreateNestedManyWithoutMemberInput = {
    create?: XOR<EventAttendanceCreateWithoutMemberInput, EventAttendanceUncheckedCreateWithoutMemberInput> | EventAttendanceCreateWithoutMemberInput[] | EventAttendanceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: EventAttendanceCreateOrConnectWithoutMemberInput | EventAttendanceCreateOrConnectWithoutMemberInput[]
    createMany?: EventAttendanceCreateManyMemberInputEnvelope
    connect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
  }

  export type MemberTagCreateNestedManyWithoutMemberInput = {
    create?: XOR<MemberTagCreateWithoutMemberInput, MemberTagUncheckedCreateWithoutMemberInput> | MemberTagCreateWithoutMemberInput[] | MemberTagUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: MemberTagCreateOrConnectWithoutMemberInput | MemberTagCreateOrConnectWithoutMemberInput[]
    createMany?: MemberTagCreateManyMemberInputEnvelope
    connect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
  }

  export type MemberFamilyCreateNestedManyWithoutMemberInput = {
    create?: XOR<MemberFamilyCreateWithoutMemberInput, MemberFamilyUncheckedCreateWithoutMemberInput> | MemberFamilyCreateWithoutMemberInput[] | MemberFamilyUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: MemberFamilyCreateOrConnectWithoutMemberInput | MemberFamilyCreateOrConnectWithoutMemberInput[]
    createMany?: MemberFamilyCreateManyMemberInputEnvelope
    connect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
  }

  export type MemberFamilyCreateNestedManyWithoutRelatedMemberInput = {
    create?: XOR<MemberFamilyCreateWithoutRelatedMemberInput, MemberFamilyUncheckedCreateWithoutRelatedMemberInput> | MemberFamilyCreateWithoutRelatedMemberInput[] | MemberFamilyUncheckedCreateWithoutRelatedMemberInput[]
    connectOrCreate?: MemberFamilyCreateOrConnectWithoutRelatedMemberInput | MemberFamilyCreateOrConnectWithoutRelatedMemberInput[]
    createMany?: MemberFamilyCreateManyRelatedMemberInputEnvelope
    connect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
  }

  export type GroupMemberUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<GroupMemberCreateWithoutMemberInput, GroupMemberUncheckedCreateWithoutMemberInput> | GroupMemberCreateWithoutMemberInput[] | GroupMemberUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutMemberInput | GroupMemberCreateOrConnectWithoutMemberInput[]
    createMany?: GroupMemberCreateManyMemberInputEnvelope
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
  }

  export type JourneyStageUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<JourneyStageCreateWithoutMemberInput, JourneyStageUncheckedCreateWithoutMemberInput> | JourneyStageCreateWithoutMemberInput[] | JourneyStageUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutMemberInput | JourneyStageCreateOrConnectWithoutMemberInput[]
    createMany?: JourneyStageCreateManyMemberInputEnvelope
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
  }

  export type CareLogUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<CareLogCreateWithoutMemberInput, CareLogUncheckedCreateWithoutMemberInput> | CareLogCreateWithoutMemberInput[] | CareLogUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: CareLogCreateOrConnectWithoutMemberInput | CareLogCreateOrConnectWithoutMemberInput[]
    createMany?: CareLogCreateManyMemberInputEnvelope
    connect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
  }

  export type EventAttendanceUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<EventAttendanceCreateWithoutMemberInput, EventAttendanceUncheckedCreateWithoutMemberInput> | EventAttendanceCreateWithoutMemberInput[] | EventAttendanceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: EventAttendanceCreateOrConnectWithoutMemberInput | EventAttendanceCreateOrConnectWithoutMemberInput[]
    createMany?: EventAttendanceCreateManyMemberInputEnvelope
    connect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
  }

  export type MemberTagUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<MemberTagCreateWithoutMemberInput, MemberTagUncheckedCreateWithoutMemberInput> | MemberTagCreateWithoutMemberInput[] | MemberTagUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: MemberTagCreateOrConnectWithoutMemberInput | MemberTagCreateOrConnectWithoutMemberInput[]
    createMany?: MemberTagCreateManyMemberInputEnvelope
    connect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
  }

  export type MemberFamilyUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<MemberFamilyCreateWithoutMemberInput, MemberFamilyUncheckedCreateWithoutMemberInput> | MemberFamilyCreateWithoutMemberInput[] | MemberFamilyUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: MemberFamilyCreateOrConnectWithoutMemberInput | MemberFamilyCreateOrConnectWithoutMemberInput[]
    createMany?: MemberFamilyCreateManyMemberInputEnvelope
    connect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
  }

  export type MemberFamilyUncheckedCreateNestedManyWithoutRelatedMemberInput = {
    create?: XOR<MemberFamilyCreateWithoutRelatedMemberInput, MemberFamilyUncheckedCreateWithoutRelatedMemberInput> | MemberFamilyCreateWithoutRelatedMemberInput[] | MemberFamilyUncheckedCreateWithoutRelatedMemberInput[]
    connectOrCreate?: MemberFamilyCreateOrConnectWithoutRelatedMemberInput | MemberFamilyCreateOrConnectWithoutRelatedMemberInput[]
    createMany?: MemberFamilyCreateManyRelatedMemberInputEnvelope
    connect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type NullableEnumMaritalStatusFieldUpdateOperationsInput = {
    set?: $Enums.MaritalStatus | null
  }

  export type UserUpdateOneWithoutMemberNestedInput = {
    create?: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemberInput
    upsert?: UserUpsertWithoutMemberInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMemberInput, UserUpdateWithoutMemberInput>, UserUncheckedUpdateWithoutMemberInput>
  }

  export type GroupMemberUpdateManyWithoutMemberNestedInput = {
    create?: XOR<GroupMemberCreateWithoutMemberInput, GroupMemberUncheckedCreateWithoutMemberInput> | GroupMemberCreateWithoutMemberInput[] | GroupMemberUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutMemberInput | GroupMemberCreateOrConnectWithoutMemberInput[]
    upsert?: GroupMemberUpsertWithWhereUniqueWithoutMemberInput | GroupMemberUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: GroupMemberCreateManyMemberInputEnvelope
    set?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    disconnect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    delete?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    update?: GroupMemberUpdateWithWhereUniqueWithoutMemberInput | GroupMemberUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: GroupMemberUpdateManyWithWhereWithoutMemberInput | GroupMemberUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
  }

  export type JourneyStageUpdateManyWithoutMemberNestedInput = {
    create?: XOR<JourneyStageCreateWithoutMemberInput, JourneyStageUncheckedCreateWithoutMemberInput> | JourneyStageCreateWithoutMemberInput[] | JourneyStageUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutMemberInput | JourneyStageCreateOrConnectWithoutMemberInput[]
    upsert?: JourneyStageUpsertWithWhereUniqueWithoutMemberInput | JourneyStageUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: JourneyStageCreateManyMemberInputEnvelope
    set?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    disconnect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    delete?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    update?: JourneyStageUpdateWithWhereUniqueWithoutMemberInput | JourneyStageUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: JourneyStageUpdateManyWithWhereWithoutMemberInput | JourneyStageUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: JourneyStageScalarWhereInput | JourneyStageScalarWhereInput[]
  }

  export type CareLogUpdateManyWithoutMemberNestedInput = {
    create?: XOR<CareLogCreateWithoutMemberInput, CareLogUncheckedCreateWithoutMemberInput> | CareLogCreateWithoutMemberInput[] | CareLogUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: CareLogCreateOrConnectWithoutMemberInput | CareLogCreateOrConnectWithoutMemberInput[]
    upsert?: CareLogUpsertWithWhereUniqueWithoutMemberInput | CareLogUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: CareLogCreateManyMemberInputEnvelope
    set?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    disconnect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    delete?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    connect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    update?: CareLogUpdateWithWhereUniqueWithoutMemberInput | CareLogUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: CareLogUpdateManyWithWhereWithoutMemberInput | CareLogUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: CareLogScalarWhereInput | CareLogScalarWhereInput[]
  }

  export type EventAttendanceUpdateManyWithoutMemberNestedInput = {
    create?: XOR<EventAttendanceCreateWithoutMemberInput, EventAttendanceUncheckedCreateWithoutMemberInput> | EventAttendanceCreateWithoutMemberInput[] | EventAttendanceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: EventAttendanceCreateOrConnectWithoutMemberInput | EventAttendanceCreateOrConnectWithoutMemberInput[]
    upsert?: EventAttendanceUpsertWithWhereUniqueWithoutMemberInput | EventAttendanceUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: EventAttendanceCreateManyMemberInputEnvelope
    set?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    disconnect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    delete?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    connect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    update?: EventAttendanceUpdateWithWhereUniqueWithoutMemberInput | EventAttendanceUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: EventAttendanceUpdateManyWithWhereWithoutMemberInput | EventAttendanceUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: EventAttendanceScalarWhereInput | EventAttendanceScalarWhereInput[]
  }

  export type MemberTagUpdateManyWithoutMemberNestedInput = {
    create?: XOR<MemberTagCreateWithoutMemberInput, MemberTagUncheckedCreateWithoutMemberInput> | MemberTagCreateWithoutMemberInput[] | MemberTagUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: MemberTagCreateOrConnectWithoutMemberInput | MemberTagCreateOrConnectWithoutMemberInput[]
    upsert?: MemberTagUpsertWithWhereUniqueWithoutMemberInput | MemberTagUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: MemberTagCreateManyMemberInputEnvelope
    set?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    disconnect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    delete?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    connect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    update?: MemberTagUpdateWithWhereUniqueWithoutMemberInput | MemberTagUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: MemberTagUpdateManyWithWhereWithoutMemberInput | MemberTagUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: MemberTagScalarWhereInput | MemberTagScalarWhereInput[]
  }

  export type MemberFamilyUpdateManyWithoutMemberNestedInput = {
    create?: XOR<MemberFamilyCreateWithoutMemberInput, MemberFamilyUncheckedCreateWithoutMemberInput> | MemberFamilyCreateWithoutMemberInput[] | MemberFamilyUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: MemberFamilyCreateOrConnectWithoutMemberInput | MemberFamilyCreateOrConnectWithoutMemberInput[]
    upsert?: MemberFamilyUpsertWithWhereUniqueWithoutMemberInput | MemberFamilyUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: MemberFamilyCreateManyMemberInputEnvelope
    set?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    disconnect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    delete?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    connect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    update?: MemberFamilyUpdateWithWhereUniqueWithoutMemberInput | MemberFamilyUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: MemberFamilyUpdateManyWithWhereWithoutMemberInput | MemberFamilyUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: MemberFamilyScalarWhereInput | MemberFamilyScalarWhereInput[]
  }

  export type MemberFamilyUpdateManyWithoutRelatedMemberNestedInput = {
    create?: XOR<MemberFamilyCreateWithoutRelatedMemberInput, MemberFamilyUncheckedCreateWithoutRelatedMemberInput> | MemberFamilyCreateWithoutRelatedMemberInput[] | MemberFamilyUncheckedCreateWithoutRelatedMemberInput[]
    connectOrCreate?: MemberFamilyCreateOrConnectWithoutRelatedMemberInput | MemberFamilyCreateOrConnectWithoutRelatedMemberInput[]
    upsert?: MemberFamilyUpsertWithWhereUniqueWithoutRelatedMemberInput | MemberFamilyUpsertWithWhereUniqueWithoutRelatedMemberInput[]
    createMany?: MemberFamilyCreateManyRelatedMemberInputEnvelope
    set?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    disconnect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    delete?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    connect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    update?: MemberFamilyUpdateWithWhereUniqueWithoutRelatedMemberInput | MemberFamilyUpdateWithWhereUniqueWithoutRelatedMemberInput[]
    updateMany?: MemberFamilyUpdateManyWithWhereWithoutRelatedMemberInput | MemberFamilyUpdateManyWithWhereWithoutRelatedMemberInput[]
    deleteMany?: MemberFamilyScalarWhereInput | MemberFamilyScalarWhereInput[]
  }

  export type GroupMemberUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<GroupMemberCreateWithoutMemberInput, GroupMemberUncheckedCreateWithoutMemberInput> | GroupMemberCreateWithoutMemberInput[] | GroupMemberUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutMemberInput | GroupMemberCreateOrConnectWithoutMemberInput[]
    upsert?: GroupMemberUpsertWithWhereUniqueWithoutMemberInput | GroupMemberUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: GroupMemberCreateManyMemberInputEnvelope
    set?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    disconnect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    delete?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    update?: GroupMemberUpdateWithWhereUniqueWithoutMemberInput | GroupMemberUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: GroupMemberUpdateManyWithWhereWithoutMemberInput | GroupMemberUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
  }

  export type JourneyStageUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<JourneyStageCreateWithoutMemberInput, JourneyStageUncheckedCreateWithoutMemberInput> | JourneyStageCreateWithoutMemberInput[] | JourneyStageUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutMemberInput | JourneyStageCreateOrConnectWithoutMemberInput[]
    upsert?: JourneyStageUpsertWithWhereUniqueWithoutMemberInput | JourneyStageUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: JourneyStageCreateManyMemberInputEnvelope
    set?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    disconnect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    delete?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    update?: JourneyStageUpdateWithWhereUniqueWithoutMemberInput | JourneyStageUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: JourneyStageUpdateManyWithWhereWithoutMemberInput | JourneyStageUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: JourneyStageScalarWhereInput | JourneyStageScalarWhereInput[]
  }

  export type CareLogUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<CareLogCreateWithoutMemberInput, CareLogUncheckedCreateWithoutMemberInput> | CareLogCreateWithoutMemberInput[] | CareLogUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: CareLogCreateOrConnectWithoutMemberInput | CareLogCreateOrConnectWithoutMemberInput[]
    upsert?: CareLogUpsertWithWhereUniqueWithoutMemberInput | CareLogUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: CareLogCreateManyMemberInputEnvelope
    set?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    disconnect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    delete?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    connect?: CareLogWhereUniqueInput | CareLogWhereUniqueInput[]
    update?: CareLogUpdateWithWhereUniqueWithoutMemberInput | CareLogUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: CareLogUpdateManyWithWhereWithoutMemberInput | CareLogUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: CareLogScalarWhereInput | CareLogScalarWhereInput[]
  }

  export type EventAttendanceUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<EventAttendanceCreateWithoutMemberInput, EventAttendanceUncheckedCreateWithoutMemberInput> | EventAttendanceCreateWithoutMemberInput[] | EventAttendanceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: EventAttendanceCreateOrConnectWithoutMemberInput | EventAttendanceCreateOrConnectWithoutMemberInput[]
    upsert?: EventAttendanceUpsertWithWhereUniqueWithoutMemberInput | EventAttendanceUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: EventAttendanceCreateManyMemberInputEnvelope
    set?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    disconnect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    delete?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    connect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    update?: EventAttendanceUpdateWithWhereUniqueWithoutMemberInput | EventAttendanceUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: EventAttendanceUpdateManyWithWhereWithoutMemberInput | EventAttendanceUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: EventAttendanceScalarWhereInput | EventAttendanceScalarWhereInput[]
  }

  export type MemberTagUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<MemberTagCreateWithoutMemberInput, MemberTagUncheckedCreateWithoutMemberInput> | MemberTagCreateWithoutMemberInput[] | MemberTagUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: MemberTagCreateOrConnectWithoutMemberInput | MemberTagCreateOrConnectWithoutMemberInput[]
    upsert?: MemberTagUpsertWithWhereUniqueWithoutMemberInput | MemberTagUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: MemberTagCreateManyMemberInputEnvelope
    set?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    disconnect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    delete?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    connect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    update?: MemberTagUpdateWithWhereUniqueWithoutMemberInput | MemberTagUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: MemberTagUpdateManyWithWhereWithoutMemberInput | MemberTagUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: MemberTagScalarWhereInput | MemberTagScalarWhereInput[]
  }

  export type MemberFamilyUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<MemberFamilyCreateWithoutMemberInput, MemberFamilyUncheckedCreateWithoutMemberInput> | MemberFamilyCreateWithoutMemberInput[] | MemberFamilyUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: MemberFamilyCreateOrConnectWithoutMemberInput | MemberFamilyCreateOrConnectWithoutMemberInput[]
    upsert?: MemberFamilyUpsertWithWhereUniqueWithoutMemberInput | MemberFamilyUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: MemberFamilyCreateManyMemberInputEnvelope
    set?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    disconnect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    delete?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    connect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    update?: MemberFamilyUpdateWithWhereUniqueWithoutMemberInput | MemberFamilyUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: MemberFamilyUpdateManyWithWhereWithoutMemberInput | MemberFamilyUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: MemberFamilyScalarWhereInput | MemberFamilyScalarWhereInput[]
  }

  export type MemberFamilyUncheckedUpdateManyWithoutRelatedMemberNestedInput = {
    create?: XOR<MemberFamilyCreateWithoutRelatedMemberInput, MemberFamilyUncheckedCreateWithoutRelatedMemberInput> | MemberFamilyCreateWithoutRelatedMemberInput[] | MemberFamilyUncheckedCreateWithoutRelatedMemberInput[]
    connectOrCreate?: MemberFamilyCreateOrConnectWithoutRelatedMemberInput | MemberFamilyCreateOrConnectWithoutRelatedMemberInput[]
    upsert?: MemberFamilyUpsertWithWhereUniqueWithoutRelatedMemberInput | MemberFamilyUpsertWithWhereUniqueWithoutRelatedMemberInput[]
    createMany?: MemberFamilyCreateManyRelatedMemberInputEnvelope
    set?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    disconnect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    delete?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    connect?: MemberFamilyWhereUniqueInput | MemberFamilyWhereUniqueInput[]
    update?: MemberFamilyUpdateWithWhereUniqueWithoutRelatedMemberInput | MemberFamilyUpdateWithWhereUniqueWithoutRelatedMemberInput[]
    updateMany?: MemberFamilyUpdateManyWithWhereWithoutRelatedMemberInput | MemberFamilyUpdateManyWithWhereWithoutRelatedMemberInput[]
    deleteMany?: MemberFamilyScalarWhereInput | MemberFamilyScalarWhereInput[]
  }

  export type GroupMemberCreateNestedManyWithoutGroupInput = {
    create?: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput> | GroupMemberCreateWithoutGroupInput[] | GroupMemberUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutGroupInput | GroupMemberCreateOrConnectWithoutGroupInput[]
    createMany?: GroupMemberCreateManyGroupInputEnvelope
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutGroupInput = {
    create?: XOR<EventCreateWithoutGroupInput, EventUncheckedCreateWithoutGroupInput> | EventCreateWithoutGroupInput[] | EventUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EventCreateOrConnectWithoutGroupInput | EventCreateOrConnectWithoutGroupInput[]
    createMany?: EventCreateManyGroupInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type GroupFileCreateNestedManyWithoutGroupInput = {
    create?: XOR<GroupFileCreateWithoutGroupInput, GroupFileUncheckedCreateWithoutGroupInput> | GroupFileCreateWithoutGroupInput[] | GroupFileUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupFileCreateOrConnectWithoutGroupInput | GroupFileCreateOrConnectWithoutGroupInput[]
    createMany?: GroupFileCreateManyGroupInputEnvelope
    connect?: GroupFileWhereUniqueInput | GroupFileWhereUniqueInput[]
  }

  export type GroupMemberUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput> | GroupMemberCreateWithoutGroupInput[] | GroupMemberUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutGroupInput | GroupMemberCreateOrConnectWithoutGroupInput[]
    createMany?: GroupMemberCreateManyGroupInputEnvelope
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<EventCreateWithoutGroupInput, EventUncheckedCreateWithoutGroupInput> | EventCreateWithoutGroupInput[] | EventUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EventCreateOrConnectWithoutGroupInput | EventCreateOrConnectWithoutGroupInput[]
    createMany?: EventCreateManyGroupInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type GroupFileUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<GroupFileCreateWithoutGroupInput, GroupFileUncheckedCreateWithoutGroupInput> | GroupFileCreateWithoutGroupInput[] | GroupFileUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupFileCreateOrConnectWithoutGroupInput | GroupFileCreateOrConnectWithoutGroupInput[]
    createMany?: GroupFileCreateManyGroupInputEnvelope
    connect?: GroupFileWhereUniqueInput | GroupFileWhereUniqueInput[]
  }

  export type EnumGroupTypeFieldUpdateOperationsInput = {
    set?: $Enums.GroupType
  }

  export type GroupMemberUpdateManyWithoutGroupNestedInput = {
    create?: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput> | GroupMemberCreateWithoutGroupInput[] | GroupMemberUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutGroupInput | GroupMemberCreateOrConnectWithoutGroupInput[]
    upsert?: GroupMemberUpsertWithWhereUniqueWithoutGroupInput | GroupMemberUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: GroupMemberCreateManyGroupInputEnvelope
    set?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    disconnect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    delete?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    update?: GroupMemberUpdateWithWhereUniqueWithoutGroupInput | GroupMemberUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: GroupMemberUpdateManyWithWhereWithoutGroupInput | GroupMemberUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
  }

  export type EventUpdateManyWithoutGroupNestedInput = {
    create?: XOR<EventCreateWithoutGroupInput, EventUncheckedCreateWithoutGroupInput> | EventCreateWithoutGroupInput[] | EventUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EventCreateOrConnectWithoutGroupInput | EventCreateOrConnectWithoutGroupInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutGroupInput | EventUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: EventCreateManyGroupInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutGroupInput | EventUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: EventUpdateManyWithWhereWithoutGroupInput | EventUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type GroupFileUpdateManyWithoutGroupNestedInput = {
    create?: XOR<GroupFileCreateWithoutGroupInput, GroupFileUncheckedCreateWithoutGroupInput> | GroupFileCreateWithoutGroupInput[] | GroupFileUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupFileCreateOrConnectWithoutGroupInput | GroupFileCreateOrConnectWithoutGroupInput[]
    upsert?: GroupFileUpsertWithWhereUniqueWithoutGroupInput | GroupFileUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: GroupFileCreateManyGroupInputEnvelope
    set?: GroupFileWhereUniqueInput | GroupFileWhereUniqueInput[]
    disconnect?: GroupFileWhereUniqueInput | GroupFileWhereUniqueInput[]
    delete?: GroupFileWhereUniqueInput | GroupFileWhereUniqueInput[]
    connect?: GroupFileWhereUniqueInput | GroupFileWhereUniqueInput[]
    update?: GroupFileUpdateWithWhereUniqueWithoutGroupInput | GroupFileUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: GroupFileUpdateManyWithWhereWithoutGroupInput | GroupFileUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: GroupFileScalarWhereInput | GroupFileScalarWhereInput[]
  }

  export type GroupMemberUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput> | GroupMemberCreateWithoutGroupInput[] | GroupMemberUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutGroupInput | GroupMemberCreateOrConnectWithoutGroupInput[]
    upsert?: GroupMemberUpsertWithWhereUniqueWithoutGroupInput | GroupMemberUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: GroupMemberCreateManyGroupInputEnvelope
    set?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    disconnect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    delete?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    update?: GroupMemberUpdateWithWhereUniqueWithoutGroupInput | GroupMemberUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: GroupMemberUpdateManyWithWhereWithoutGroupInput | GroupMemberUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<EventCreateWithoutGroupInput, EventUncheckedCreateWithoutGroupInput> | EventCreateWithoutGroupInput[] | EventUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EventCreateOrConnectWithoutGroupInput | EventCreateOrConnectWithoutGroupInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutGroupInput | EventUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: EventCreateManyGroupInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutGroupInput | EventUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: EventUpdateManyWithWhereWithoutGroupInput | EventUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type GroupFileUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<GroupFileCreateWithoutGroupInput, GroupFileUncheckedCreateWithoutGroupInput> | GroupFileCreateWithoutGroupInput[] | GroupFileUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupFileCreateOrConnectWithoutGroupInput | GroupFileCreateOrConnectWithoutGroupInput[]
    upsert?: GroupFileUpsertWithWhereUniqueWithoutGroupInput | GroupFileUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: GroupFileCreateManyGroupInputEnvelope
    set?: GroupFileWhereUniqueInput | GroupFileWhereUniqueInput[]
    disconnect?: GroupFileWhereUniqueInput | GroupFileWhereUniqueInput[]
    delete?: GroupFileWhereUniqueInput | GroupFileWhereUniqueInput[]
    connect?: GroupFileWhereUniqueInput | GroupFileWhereUniqueInput[]
    update?: GroupFileUpdateWithWhereUniqueWithoutGroupInput | GroupFileUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: GroupFileUpdateManyWithWhereWithoutGroupInput | GroupFileUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: GroupFileScalarWhereInput | GroupFileScalarWhereInput[]
  }

  export type MemberCreateNestedOneWithoutGroupsInput = {
    create?: XOR<MemberCreateWithoutGroupsInput, MemberUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutGroupsInput
    connect?: MemberWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutMembersInput = {
    create?: XOR<GroupCreateWithoutMembersInput, GroupUncheckedCreateWithoutMembersInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMembersInput
    connect?: GroupWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutGroupsNestedInput = {
    create?: XOR<MemberCreateWithoutGroupsInput, MemberUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutGroupsInput
    upsert?: MemberUpsertWithoutGroupsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutGroupsInput, MemberUpdateWithoutGroupsInput>, MemberUncheckedUpdateWithoutGroupsInput>
  }

  export type GroupUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<GroupCreateWithoutMembersInput, GroupUncheckedCreateWithoutMembersInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMembersInput
    upsert?: GroupUpsertWithoutMembersInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutMembersInput, GroupUpdateWithoutMembersInput>, GroupUncheckedUpdateWithoutMembersInput>
  }

  export type MilestoneCreateNestedManyWithoutTemplateInput = {
    create?: XOR<MilestoneCreateWithoutTemplateInput, MilestoneUncheckedCreateWithoutTemplateInput> | MilestoneCreateWithoutTemplateInput[] | MilestoneUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutTemplateInput | MilestoneCreateOrConnectWithoutTemplateInput[]
    createMany?: MilestoneCreateManyTemplateInputEnvelope
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
  }

  export type JourneyStageCreateNestedManyWithoutTemplateInput = {
    create?: XOR<JourneyStageCreateWithoutTemplateInput, JourneyStageUncheckedCreateWithoutTemplateInput> | JourneyStageCreateWithoutTemplateInput[] | JourneyStageUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutTemplateInput | JourneyStageCreateOrConnectWithoutTemplateInput[]
    createMany?: JourneyStageCreateManyTemplateInputEnvelope
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
  }

  export type MilestoneUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<MilestoneCreateWithoutTemplateInput, MilestoneUncheckedCreateWithoutTemplateInput> | MilestoneCreateWithoutTemplateInput[] | MilestoneUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutTemplateInput | MilestoneCreateOrConnectWithoutTemplateInput[]
    createMany?: MilestoneCreateManyTemplateInputEnvelope
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
  }

  export type JourneyStageUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<JourneyStageCreateWithoutTemplateInput, JourneyStageUncheckedCreateWithoutTemplateInput> | JourneyStageCreateWithoutTemplateInput[] | JourneyStageUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutTemplateInput | JourneyStageCreateOrConnectWithoutTemplateInput[]
    createMany?: JourneyStageCreateManyTemplateInputEnvelope
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
  }

  export type MilestoneUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<MilestoneCreateWithoutTemplateInput, MilestoneUncheckedCreateWithoutTemplateInput> | MilestoneCreateWithoutTemplateInput[] | MilestoneUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutTemplateInput | MilestoneCreateOrConnectWithoutTemplateInput[]
    upsert?: MilestoneUpsertWithWhereUniqueWithoutTemplateInput | MilestoneUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: MilestoneCreateManyTemplateInputEnvelope
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    update?: MilestoneUpdateWithWhereUniqueWithoutTemplateInput | MilestoneUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: MilestoneUpdateManyWithWhereWithoutTemplateInput | MilestoneUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
  }

  export type JourneyStageUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<JourneyStageCreateWithoutTemplateInput, JourneyStageUncheckedCreateWithoutTemplateInput> | JourneyStageCreateWithoutTemplateInput[] | JourneyStageUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutTemplateInput | JourneyStageCreateOrConnectWithoutTemplateInput[]
    upsert?: JourneyStageUpsertWithWhereUniqueWithoutTemplateInput | JourneyStageUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: JourneyStageCreateManyTemplateInputEnvelope
    set?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    disconnect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    delete?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    update?: JourneyStageUpdateWithWhereUniqueWithoutTemplateInput | JourneyStageUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: JourneyStageUpdateManyWithWhereWithoutTemplateInput | JourneyStageUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: JourneyStageScalarWhereInput | JourneyStageScalarWhereInput[]
  }

  export type MilestoneUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<MilestoneCreateWithoutTemplateInput, MilestoneUncheckedCreateWithoutTemplateInput> | MilestoneCreateWithoutTemplateInput[] | MilestoneUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutTemplateInput | MilestoneCreateOrConnectWithoutTemplateInput[]
    upsert?: MilestoneUpsertWithWhereUniqueWithoutTemplateInput | MilestoneUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: MilestoneCreateManyTemplateInputEnvelope
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    update?: MilestoneUpdateWithWhereUniqueWithoutTemplateInput | MilestoneUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: MilestoneUpdateManyWithWhereWithoutTemplateInput | MilestoneUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
  }

  export type JourneyStageUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<JourneyStageCreateWithoutTemplateInput, JourneyStageUncheckedCreateWithoutTemplateInput> | JourneyStageCreateWithoutTemplateInput[] | JourneyStageUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutTemplateInput | JourneyStageCreateOrConnectWithoutTemplateInput[]
    upsert?: JourneyStageUpsertWithWhereUniqueWithoutTemplateInput | JourneyStageUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: JourneyStageCreateManyTemplateInputEnvelope
    set?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    disconnect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    delete?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    update?: JourneyStageUpdateWithWhereUniqueWithoutTemplateInput | JourneyStageUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: JourneyStageUpdateManyWithWhereWithoutTemplateInput | JourneyStageUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: JourneyStageScalarWhereInput | JourneyStageScalarWhereInput[]
  }

  export type JourneyTemplateCreateNestedOneWithoutMilestonesInput = {
    create?: XOR<JourneyTemplateCreateWithoutMilestonesInput, JourneyTemplateUncheckedCreateWithoutMilestonesInput>
    connectOrCreate?: JourneyTemplateCreateOrConnectWithoutMilestonesInput
    connect?: JourneyTemplateWhereUniqueInput
  }

  export type JourneyStageCreateNestedManyWithoutMilestoneInput = {
    create?: XOR<JourneyStageCreateWithoutMilestoneInput, JourneyStageUncheckedCreateWithoutMilestoneInput> | JourneyStageCreateWithoutMilestoneInput[] | JourneyStageUncheckedCreateWithoutMilestoneInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutMilestoneInput | JourneyStageCreateOrConnectWithoutMilestoneInput[]
    createMany?: JourneyStageCreateManyMilestoneInputEnvelope
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
  }

  export type JourneyStageUncheckedCreateNestedManyWithoutMilestoneInput = {
    create?: XOR<JourneyStageCreateWithoutMilestoneInput, JourneyStageUncheckedCreateWithoutMilestoneInput> | JourneyStageCreateWithoutMilestoneInput[] | JourneyStageUncheckedCreateWithoutMilestoneInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutMilestoneInput | JourneyStageCreateOrConnectWithoutMilestoneInput[]
    createMany?: JourneyStageCreateManyMilestoneInputEnvelope
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JourneyTemplateUpdateOneRequiredWithoutMilestonesNestedInput = {
    create?: XOR<JourneyTemplateCreateWithoutMilestonesInput, JourneyTemplateUncheckedCreateWithoutMilestonesInput>
    connectOrCreate?: JourneyTemplateCreateOrConnectWithoutMilestonesInput
    upsert?: JourneyTemplateUpsertWithoutMilestonesInput
    connect?: JourneyTemplateWhereUniqueInput
    update?: XOR<XOR<JourneyTemplateUpdateToOneWithWhereWithoutMilestonesInput, JourneyTemplateUpdateWithoutMilestonesInput>, JourneyTemplateUncheckedUpdateWithoutMilestonesInput>
  }

  export type JourneyStageUpdateManyWithoutMilestoneNestedInput = {
    create?: XOR<JourneyStageCreateWithoutMilestoneInput, JourneyStageUncheckedCreateWithoutMilestoneInput> | JourneyStageCreateWithoutMilestoneInput[] | JourneyStageUncheckedCreateWithoutMilestoneInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutMilestoneInput | JourneyStageCreateOrConnectWithoutMilestoneInput[]
    upsert?: JourneyStageUpsertWithWhereUniqueWithoutMilestoneInput | JourneyStageUpsertWithWhereUniqueWithoutMilestoneInput[]
    createMany?: JourneyStageCreateManyMilestoneInputEnvelope
    set?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    disconnect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    delete?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    update?: JourneyStageUpdateWithWhereUniqueWithoutMilestoneInput | JourneyStageUpdateWithWhereUniqueWithoutMilestoneInput[]
    updateMany?: JourneyStageUpdateManyWithWhereWithoutMilestoneInput | JourneyStageUpdateManyWithWhereWithoutMilestoneInput[]
    deleteMany?: JourneyStageScalarWhereInput | JourneyStageScalarWhereInput[]
  }

  export type JourneyStageUncheckedUpdateManyWithoutMilestoneNestedInput = {
    create?: XOR<JourneyStageCreateWithoutMilestoneInput, JourneyStageUncheckedCreateWithoutMilestoneInput> | JourneyStageCreateWithoutMilestoneInput[] | JourneyStageUncheckedCreateWithoutMilestoneInput[]
    connectOrCreate?: JourneyStageCreateOrConnectWithoutMilestoneInput | JourneyStageCreateOrConnectWithoutMilestoneInput[]
    upsert?: JourneyStageUpsertWithWhereUniqueWithoutMilestoneInput | JourneyStageUpsertWithWhereUniqueWithoutMilestoneInput[]
    createMany?: JourneyStageCreateManyMilestoneInputEnvelope
    set?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    disconnect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    delete?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    connect?: JourneyStageWhereUniqueInput | JourneyStageWhereUniqueInput[]
    update?: JourneyStageUpdateWithWhereUniqueWithoutMilestoneInput | JourneyStageUpdateWithWhereUniqueWithoutMilestoneInput[]
    updateMany?: JourneyStageUpdateManyWithWhereWithoutMilestoneInput | JourneyStageUpdateManyWithWhereWithoutMilestoneInput[]
    deleteMany?: JourneyStageScalarWhereInput | JourneyStageScalarWhereInput[]
  }

  export type MemberCreateNestedOneWithoutJourneyStagesInput = {
    create?: XOR<MemberCreateWithoutJourneyStagesInput, MemberUncheckedCreateWithoutJourneyStagesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutJourneyStagesInput
    connect?: MemberWhereUniqueInput
  }

  export type JourneyTemplateCreateNestedOneWithoutJourneyStagesInput = {
    create?: XOR<JourneyTemplateCreateWithoutJourneyStagesInput, JourneyTemplateUncheckedCreateWithoutJourneyStagesInput>
    connectOrCreate?: JourneyTemplateCreateOrConnectWithoutJourneyStagesInput
    connect?: JourneyTemplateWhereUniqueInput
  }

  export type MilestoneCreateNestedOneWithoutJourneyStagesInput = {
    create?: XOR<MilestoneCreateWithoutJourneyStagesInput, MilestoneUncheckedCreateWithoutJourneyStagesInput>
    connectOrCreate?: MilestoneCreateOrConnectWithoutJourneyStagesInput
    connect?: MilestoneWhereUniqueInput
  }

  export type EnumStageStatusFieldUpdateOperationsInput = {
    set?: $Enums.StageStatus
  }

  export type MemberUpdateOneRequiredWithoutJourneyStagesNestedInput = {
    create?: XOR<MemberCreateWithoutJourneyStagesInput, MemberUncheckedCreateWithoutJourneyStagesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutJourneyStagesInput
    upsert?: MemberUpsertWithoutJourneyStagesInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutJourneyStagesInput, MemberUpdateWithoutJourneyStagesInput>, MemberUncheckedUpdateWithoutJourneyStagesInput>
  }

  export type JourneyTemplateUpdateOneRequiredWithoutJourneyStagesNestedInput = {
    create?: XOR<JourneyTemplateCreateWithoutJourneyStagesInput, JourneyTemplateUncheckedCreateWithoutJourneyStagesInput>
    connectOrCreate?: JourneyTemplateCreateOrConnectWithoutJourneyStagesInput
    upsert?: JourneyTemplateUpsertWithoutJourneyStagesInput
    connect?: JourneyTemplateWhereUniqueInput
    update?: XOR<XOR<JourneyTemplateUpdateToOneWithWhereWithoutJourneyStagesInput, JourneyTemplateUpdateWithoutJourneyStagesInput>, JourneyTemplateUncheckedUpdateWithoutJourneyStagesInput>
  }

  export type MilestoneUpdateOneRequiredWithoutJourneyStagesNestedInput = {
    create?: XOR<MilestoneCreateWithoutJourneyStagesInput, MilestoneUncheckedCreateWithoutJourneyStagesInput>
    connectOrCreate?: MilestoneCreateOrConnectWithoutJourneyStagesInput
    upsert?: MilestoneUpsertWithoutJourneyStagesInput
    connect?: MilestoneWhereUniqueInput
    update?: XOR<XOR<MilestoneUpdateToOneWithWhereWithoutJourneyStagesInput, MilestoneUpdateWithoutJourneyStagesInput>, MilestoneUncheckedUpdateWithoutJourneyStagesInput>
  }

  export type GroupCreateNestedOneWithoutEventsInput = {
    create?: XOR<GroupCreateWithoutEventsInput, GroupUncheckedCreateWithoutEventsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutEventsInput
    connect?: GroupWhereUniqueInput
  }

  export type EventAttendanceCreateNestedManyWithoutEventInput = {
    create?: XOR<EventAttendanceCreateWithoutEventInput, EventAttendanceUncheckedCreateWithoutEventInput> | EventAttendanceCreateWithoutEventInput[] | EventAttendanceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendanceCreateOrConnectWithoutEventInput | EventAttendanceCreateOrConnectWithoutEventInput[]
    createMany?: EventAttendanceCreateManyEventInputEnvelope
    connect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
  }

  export type EventTagCreateNestedManyWithoutEventInput = {
    create?: XOR<EventTagCreateWithoutEventInput, EventTagUncheckedCreateWithoutEventInput> | EventTagCreateWithoutEventInput[] | EventTagUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventTagCreateOrConnectWithoutEventInput | EventTagCreateOrConnectWithoutEventInput[]
    createMany?: EventTagCreateManyEventInputEnvelope
    connect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
  }

  export type EventAttendanceUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventAttendanceCreateWithoutEventInput, EventAttendanceUncheckedCreateWithoutEventInput> | EventAttendanceCreateWithoutEventInput[] | EventAttendanceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendanceCreateOrConnectWithoutEventInput | EventAttendanceCreateOrConnectWithoutEventInput[]
    createMany?: EventAttendanceCreateManyEventInputEnvelope
    connect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
  }

  export type EventTagUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventTagCreateWithoutEventInput, EventTagUncheckedCreateWithoutEventInput> | EventTagCreateWithoutEventInput[] | EventTagUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventTagCreateOrConnectWithoutEventInput | EventTagCreateOrConnectWithoutEventInput[]
    createMany?: EventTagCreateManyEventInputEnvelope
    connect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
  }

  export type EnumCalendarTypeFieldUpdateOperationsInput = {
    set?: $Enums.CalendarType
  }

  export type GroupUpdateOneWithoutEventsNestedInput = {
    create?: XOR<GroupCreateWithoutEventsInput, GroupUncheckedCreateWithoutEventsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutEventsInput
    upsert?: GroupUpsertWithoutEventsInput
    disconnect?: GroupWhereInput | boolean
    delete?: GroupWhereInput | boolean
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutEventsInput, GroupUpdateWithoutEventsInput>, GroupUncheckedUpdateWithoutEventsInput>
  }

  export type EventAttendanceUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventAttendanceCreateWithoutEventInput, EventAttendanceUncheckedCreateWithoutEventInput> | EventAttendanceCreateWithoutEventInput[] | EventAttendanceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendanceCreateOrConnectWithoutEventInput | EventAttendanceCreateOrConnectWithoutEventInput[]
    upsert?: EventAttendanceUpsertWithWhereUniqueWithoutEventInput | EventAttendanceUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventAttendanceCreateManyEventInputEnvelope
    set?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    disconnect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    delete?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    connect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    update?: EventAttendanceUpdateWithWhereUniqueWithoutEventInput | EventAttendanceUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventAttendanceUpdateManyWithWhereWithoutEventInput | EventAttendanceUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventAttendanceScalarWhereInput | EventAttendanceScalarWhereInput[]
  }

  export type EventTagUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventTagCreateWithoutEventInput, EventTagUncheckedCreateWithoutEventInput> | EventTagCreateWithoutEventInput[] | EventTagUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventTagCreateOrConnectWithoutEventInput | EventTagCreateOrConnectWithoutEventInput[]
    upsert?: EventTagUpsertWithWhereUniqueWithoutEventInput | EventTagUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventTagCreateManyEventInputEnvelope
    set?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    disconnect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    delete?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    connect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    update?: EventTagUpdateWithWhereUniqueWithoutEventInput | EventTagUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventTagUpdateManyWithWhereWithoutEventInput | EventTagUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventTagScalarWhereInput | EventTagScalarWhereInput[]
  }

  export type EventAttendanceUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventAttendanceCreateWithoutEventInput, EventAttendanceUncheckedCreateWithoutEventInput> | EventAttendanceCreateWithoutEventInput[] | EventAttendanceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendanceCreateOrConnectWithoutEventInput | EventAttendanceCreateOrConnectWithoutEventInput[]
    upsert?: EventAttendanceUpsertWithWhereUniqueWithoutEventInput | EventAttendanceUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventAttendanceCreateManyEventInputEnvelope
    set?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    disconnect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    delete?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    connect?: EventAttendanceWhereUniqueInput | EventAttendanceWhereUniqueInput[]
    update?: EventAttendanceUpdateWithWhereUniqueWithoutEventInput | EventAttendanceUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventAttendanceUpdateManyWithWhereWithoutEventInput | EventAttendanceUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventAttendanceScalarWhereInput | EventAttendanceScalarWhereInput[]
  }

  export type EventTagUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventTagCreateWithoutEventInput, EventTagUncheckedCreateWithoutEventInput> | EventTagCreateWithoutEventInput[] | EventTagUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventTagCreateOrConnectWithoutEventInput | EventTagCreateOrConnectWithoutEventInput[]
    upsert?: EventTagUpsertWithWhereUniqueWithoutEventInput | EventTagUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventTagCreateManyEventInputEnvelope
    set?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    disconnect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    delete?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    connect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    update?: EventTagUpdateWithWhereUniqueWithoutEventInput | EventTagUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventTagUpdateManyWithWhereWithoutEventInput | EventTagUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventTagScalarWhereInput | EventTagScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutAttendancesInput = {
    create?: XOR<EventCreateWithoutAttendancesInput, EventUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendancesInput
    connect?: EventWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutEventAttendancesInput = {
    create?: XOR<MemberCreateWithoutEventAttendancesInput, MemberUncheckedCreateWithoutEventAttendancesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutEventAttendancesInput
    connect?: MemberWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutAttendancesNestedInput = {
    create?: XOR<EventCreateWithoutAttendancesInput, EventUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendancesInput
    upsert?: EventUpsertWithoutAttendancesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutAttendancesInput, EventUpdateWithoutAttendancesInput>, EventUncheckedUpdateWithoutAttendancesInput>
  }

  export type MemberUpdateOneRequiredWithoutEventAttendancesNestedInput = {
    create?: XOR<MemberCreateWithoutEventAttendancesInput, MemberUncheckedCreateWithoutEventAttendancesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutEventAttendancesInput
    upsert?: MemberUpsertWithoutEventAttendancesInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutEventAttendancesInput, MemberUpdateWithoutEventAttendancesInput>, MemberUncheckedUpdateWithoutEventAttendancesInput>
  }

  export type MemberCreateNestedOneWithoutCareLogsInput = {
    create?: XOR<MemberCreateWithoutCareLogsInput, MemberUncheckedCreateWithoutCareLogsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutCareLogsInput
    connect?: MemberWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCareLogsInput = {
    create?: XOR<UserCreateWithoutCareLogsInput, UserUncheckedCreateWithoutCareLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCareLogsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCareTypeFieldUpdateOperationsInput = {
    set?: $Enums.CareType
  }

  export type MemberUpdateOneRequiredWithoutCareLogsNestedInput = {
    create?: XOR<MemberCreateWithoutCareLogsInput, MemberUncheckedCreateWithoutCareLogsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutCareLogsInput
    upsert?: MemberUpsertWithoutCareLogsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutCareLogsInput, MemberUpdateWithoutCareLogsInput>, MemberUncheckedUpdateWithoutCareLogsInput>
  }

  export type UserUpdateOneRequiredWithoutCareLogsNestedInput = {
    create?: XOR<UserCreateWithoutCareLogsInput, UserUncheckedCreateWithoutCareLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCareLogsInput
    upsert?: UserUpsertWithoutCareLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCareLogsInput, UserUpdateWithoutCareLogsInput>, UserUncheckedUpdateWithoutCareLogsInput>
  }

  export type MemberTagCreateNestedManyWithoutTagInput = {
    create?: XOR<MemberTagCreateWithoutTagInput, MemberTagUncheckedCreateWithoutTagInput> | MemberTagCreateWithoutTagInput[] | MemberTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MemberTagCreateOrConnectWithoutTagInput | MemberTagCreateOrConnectWithoutTagInput[]
    createMany?: MemberTagCreateManyTagInputEnvelope
    connect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
  }

  export type EventTagCreateNestedManyWithoutTagInput = {
    create?: XOR<EventTagCreateWithoutTagInput, EventTagUncheckedCreateWithoutTagInput> | EventTagCreateWithoutTagInput[] | EventTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: EventTagCreateOrConnectWithoutTagInput | EventTagCreateOrConnectWithoutTagInput[]
    createMany?: EventTagCreateManyTagInputEnvelope
    connect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
  }

  export type MemberTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<MemberTagCreateWithoutTagInput, MemberTagUncheckedCreateWithoutTagInput> | MemberTagCreateWithoutTagInput[] | MemberTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MemberTagCreateOrConnectWithoutTagInput | MemberTagCreateOrConnectWithoutTagInput[]
    createMany?: MemberTagCreateManyTagInputEnvelope
    connect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
  }

  export type EventTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<EventTagCreateWithoutTagInput, EventTagUncheckedCreateWithoutTagInput> | EventTagCreateWithoutTagInput[] | EventTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: EventTagCreateOrConnectWithoutTagInput | EventTagCreateOrConnectWithoutTagInput[]
    createMany?: EventTagCreateManyTagInputEnvelope
    connect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
  }

  export type EnumTagCategoryFieldUpdateOperationsInput = {
    set?: $Enums.TagCategory
  }

  export type MemberTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<MemberTagCreateWithoutTagInput, MemberTagUncheckedCreateWithoutTagInput> | MemberTagCreateWithoutTagInput[] | MemberTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MemberTagCreateOrConnectWithoutTagInput | MemberTagCreateOrConnectWithoutTagInput[]
    upsert?: MemberTagUpsertWithWhereUniqueWithoutTagInput | MemberTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: MemberTagCreateManyTagInputEnvelope
    set?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    disconnect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    delete?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    connect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    update?: MemberTagUpdateWithWhereUniqueWithoutTagInput | MemberTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: MemberTagUpdateManyWithWhereWithoutTagInput | MemberTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: MemberTagScalarWhereInput | MemberTagScalarWhereInput[]
  }

  export type EventTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<EventTagCreateWithoutTagInput, EventTagUncheckedCreateWithoutTagInput> | EventTagCreateWithoutTagInput[] | EventTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: EventTagCreateOrConnectWithoutTagInput | EventTagCreateOrConnectWithoutTagInput[]
    upsert?: EventTagUpsertWithWhereUniqueWithoutTagInput | EventTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: EventTagCreateManyTagInputEnvelope
    set?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    disconnect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    delete?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    connect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    update?: EventTagUpdateWithWhereUniqueWithoutTagInput | EventTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: EventTagUpdateManyWithWhereWithoutTagInput | EventTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: EventTagScalarWhereInput | EventTagScalarWhereInput[]
  }

  export type MemberTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<MemberTagCreateWithoutTagInput, MemberTagUncheckedCreateWithoutTagInput> | MemberTagCreateWithoutTagInput[] | MemberTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MemberTagCreateOrConnectWithoutTagInput | MemberTagCreateOrConnectWithoutTagInput[]
    upsert?: MemberTagUpsertWithWhereUniqueWithoutTagInput | MemberTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: MemberTagCreateManyTagInputEnvelope
    set?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    disconnect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    delete?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    connect?: MemberTagWhereUniqueInput | MemberTagWhereUniqueInput[]
    update?: MemberTagUpdateWithWhereUniqueWithoutTagInput | MemberTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: MemberTagUpdateManyWithWhereWithoutTagInput | MemberTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: MemberTagScalarWhereInput | MemberTagScalarWhereInput[]
  }

  export type EventTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<EventTagCreateWithoutTagInput, EventTagUncheckedCreateWithoutTagInput> | EventTagCreateWithoutTagInput[] | EventTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: EventTagCreateOrConnectWithoutTagInput | EventTagCreateOrConnectWithoutTagInput[]
    upsert?: EventTagUpsertWithWhereUniqueWithoutTagInput | EventTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: EventTagCreateManyTagInputEnvelope
    set?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    disconnect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    delete?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    connect?: EventTagWhereUniqueInput | EventTagWhereUniqueInput[]
    update?: EventTagUpdateWithWhereUniqueWithoutTagInput | EventTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: EventTagUpdateManyWithWhereWithoutTagInput | EventTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: EventTagScalarWhereInput | EventTagScalarWhereInput[]
  }

  export type MemberCreateNestedOneWithoutTagsInput = {
    create?: XOR<MemberCreateWithoutTagsInput, MemberUncheckedCreateWithoutTagsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutTagsInput
    connect?: MemberWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutMembersInput = {
    create?: XOR<TagCreateWithoutMembersInput, TagUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TagCreateOrConnectWithoutMembersInput
    connect?: TagWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<MemberCreateWithoutTagsInput, MemberUncheckedCreateWithoutTagsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutTagsInput
    upsert?: MemberUpsertWithoutTagsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutTagsInput, MemberUpdateWithoutTagsInput>, MemberUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<TagCreateWithoutMembersInput, TagUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TagCreateOrConnectWithoutMembersInput
    upsert?: TagUpsertWithoutMembersInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutMembersInput, TagUpdateWithoutMembersInput>, TagUncheckedUpdateWithoutMembersInput>
  }

  export type EventCreateNestedOneWithoutTagsInput = {
    create?: XOR<EventCreateWithoutTagsInput, EventUncheckedCreateWithoutTagsInput>
    connectOrCreate?: EventCreateOrConnectWithoutTagsInput
    connect?: EventWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutEventsInput = {
    create?: XOR<TagCreateWithoutEventsInput, TagUncheckedCreateWithoutEventsInput>
    connectOrCreate?: TagCreateOrConnectWithoutEventsInput
    connect?: TagWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<EventCreateWithoutTagsInput, EventUncheckedCreateWithoutTagsInput>
    connectOrCreate?: EventCreateOrConnectWithoutTagsInput
    upsert?: EventUpsertWithoutTagsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutTagsInput, EventUpdateWithoutTagsInput>, EventUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<TagCreateWithoutEventsInput, TagUncheckedCreateWithoutEventsInput>
    connectOrCreate?: TagCreateOrConnectWithoutEventsInput
    upsert?: TagUpsertWithoutEventsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutEventsInput, TagUpdateWithoutEventsInput>, TagUncheckedUpdateWithoutEventsInput>
  }

  export type GroupCreateNestedOneWithoutFilesInput = {
    create?: XOR<GroupCreateWithoutFilesInput, GroupUncheckedCreateWithoutFilesInput>
    connectOrCreate?: GroupCreateOrConnectWithoutFilesInput
    connect?: GroupWhereUniqueInput
  }

  export type GroupUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<GroupCreateWithoutFilesInput, GroupUncheckedCreateWithoutFilesInput>
    connectOrCreate?: GroupCreateOrConnectWithoutFilesInput
    upsert?: GroupUpsertWithoutFilesInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutFilesInput, GroupUpdateWithoutFilesInput>, GroupUncheckedUpdateWithoutFilesInput>
  }

  export type MemberCreateNestedOneWithoutFamilyConnectionsInput = {
    create?: XOR<MemberCreateWithoutFamilyConnectionsInput, MemberUncheckedCreateWithoutFamilyConnectionsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutFamilyConnectionsInput
    connect?: MemberWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutRelatedConnectionsInput = {
    create?: XOR<MemberCreateWithoutRelatedConnectionsInput, MemberUncheckedCreateWithoutRelatedConnectionsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutRelatedConnectionsInput
    connect?: MemberWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutFamilyConnectionsNestedInput = {
    create?: XOR<MemberCreateWithoutFamilyConnectionsInput, MemberUncheckedCreateWithoutFamilyConnectionsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutFamilyConnectionsInput
    upsert?: MemberUpsertWithoutFamilyConnectionsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutFamilyConnectionsInput, MemberUpdateWithoutFamilyConnectionsInput>, MemberUncheckedUpdateWithoutFamilyConnectionsInput>
  }

  export type MemberUpdateOneRequiredWithoutRelatedConnectionsNestedInput = {
    create?: XOR<MemberCreateWithoutRelatedConnectionsInput, MemberUncheckedCreateWithoutRelatedConnectionsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutRelatedConnectionsInput
    upsert?: MemberUpsertWithoutRelatedConnectionsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutRelatedConnectionsInput, MemberUpdateWithoutRelatedConnectionsInput>, MemberUncheckedUpdateWithoutRelatedConnectionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedEnumMaritalStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaritalStatusNullableFilter<$PrismaModel> | $Enums.MaritalStatus | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type NestedEnumMaritalStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaritalStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.MaritalStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMaritalStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumMaritalStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumGroupTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.GroupType | EnumGroupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GroupType[] | ListEnumGroupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GroupType[] | ListEnumGroupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGroupTypeFilter<$PrismaModel> | $Enums.GroupType
  }

  export type NestedEnumGroupTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GroupType | EnumGroupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GroupType[] | ListEnumGroupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GroupType[] | ListEnumGroupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGroupTypeWithAggregatesFilter<$PrismaModel> | $Enums.GroupType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGroupTypeFilter<$PrismaModel>
    _max?: NestedEnumGroupTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumStageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StageStatus | EnumStageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StageStatus[] | ListEnumStageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageStatus[] | ListEnumStageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStageStatusFilter<$PrismaModel> | $Enums.StageStatus
  }

  export type NestedEnumStageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StageStatus | EnumStageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StageStatus[] | ListEnumStageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageStatus[] | ListEnumStageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStageStatusWithAggregatesFilter<$PrismaModel> | $Enums.StageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStageStatusFilter<$PrismaModel>
    _max?: NestedEnumStageStatusFilter<$PrismaModel>
  }

  export type NestedEnumCalendarTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarType | EnumCalendarTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarType[] | ListEnumCalendarTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarType[] | ListEnumCalendarTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarTypeFilter<$PrismaModel> | $Enums.CalendarType
  }

  export type NestedEnumCalendarTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarType | EnumCalendarTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarType[] | ListEnumCalendarTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarType[] | ListEnumCalendarTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarTypeWithAggregatesFilter<$PrismaModel> | $Enums.CalendarType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCalendarTypeFilter<$PrismaModel>
    _max?: NestedEnumCalendarTypeFilter<$PrismaModel>
  }

  export type NestedEnumCareTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CareType | EnumCareTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CareType[] | ListEnumCareTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CareType[] | ListEnumCareTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCareTypeFilter<$PrismaModel> | $Enums.CareType
  }

  export type NestedEnumCareTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CareType | EnumCareTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CareType[] | ListEnumCareTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CareType[] | ListEnumCareTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCareTypeWithAggregatesFilter<$PrismaModel> | $Enums.CareType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCareTypeFilter<$PrismaModel>
    _max?: NestedEnumCareTypeFilter<$PrismaModel>
  }

  export type NestedEnumTagCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.TagCategory | EnumTagCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTagCategoryFilter<$PrismaModel> | $Enums.TagCategory
  }

  export type NestedEnumTagCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TagCategory | EnumTagCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagCategory[] | ListEnumTagCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTagCategoryWithAggregatesFilter<$PrismaModel> | $Enums.TagCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTagCategoryFilter<$PrismaModel>
    _max?: NestedEnumTagCategoryFilter<$PrismaModel>
  }

  export type MemberCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupMemberCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageCreateNestedManyWithoutMemberInput
    careLogs?: CareLogCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceCreateNestedManyWithoutMemberInput
    tags?: MemberTagCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberUncheckedCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupMemberUncheckedCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutMemberInput
    careLogs?: CareLogUncheckedCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceUncheckedCreateNestedManyWithoutMemberInput
    tags?: MemberTagUncheckedCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyUncheckedCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyUncheckedCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberCreateOrConnectWithoutUserInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
  }

  export type CareLogCreateWithoutCaregiverInput = {
    id?: string
    type: $Enums.CareType
    notes: string
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
    member: MemberCreateNestedOneWithoutCareLogsInput
  }

  export type CareLogUncheckedCreateWithoutCaregiverInput = {
    id?: string
    memberId: string
    type: $Enums.CareType
    notes: string
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
  }

  export type CareLogCreateOrConnectWithoutCaregiverInput = {
    where: CareLogWhereUniqueInput
    create: XOR<CareLogCreateWithoutCaregiverInput, CareLogUncheckedCreateWithoutCaregiverInput>
  }

  export type CareLogCreateManyCaregiverInputEnvelope = {
    data: CareLogCreateManyCaregiverInput | CareLogCreateManyCaregiverInput[]
    skipDuplicates?: boolean
  }

  export type MemberUpsertWithoutUserInput = {
    update: XOR<MemberUpdateWithoutUserInput, MemberUncheckedUpdateWithoutUserInput>
    create: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutUserInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutUserInput, MemberUncheckedUpdateWithoutUserInput>
  }

  export type MemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupMemberUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupMemberUncheckedUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUncheckedUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUncheckedUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUncheckedUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUncheckedUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUncheckedUpdateManyWithoutRelatedMemberNestedInput
  }

  export type CareLogUpsertWithWhereUniqueWithoutCaregiverInput = {
    where: CareLogWhereUniqueInput
    update: XOR<CareLogUpdateWithoutCaregiverInput, CareLogUncheckedUpdateWithoutCaregiverInput>
    create: XOR<CareLogCreateWithoutCaregiverInput, CareLogUncheckedCreateWithoutCaregiverInput>
  }

  export type CareLogUpdateWithWhereUniqueWithoutCaregiverInput = {
    where: CareLogWhereUniqueInput
    data: XOR<CareLogUpdateWithoutCaregiverInput, CareLogUncheckedUpdateWithoutCaregiverInput>
  }

  export type CareLogUpdateManyWithWhereWithoutCaregiverInput = {
    where: CareLogScalarWhereInput
    data: XOR<CareLogUpdateManyMutationInput, CareLogUncheckedUpdateManyWithoutCaregiverInput>
  }

  export type CareLogScalarWhereInput = {
    AND?: CareLogScalarWhereInput | CareLogScalarWhereInput[]
    OR?: CareLogScalarWhereInput[]
    NOT?: CareLogScalarWhereInput | CareLogScalarWhereInput[]
    id?: StringFilter<"CareLog"> | string
    memberId?: StringFilter<"CareLog"> | string
    caregiverId?: StringFilter<"CareLog"> | string
    type?: EnumCareTypeFilter<"CareLog"> | $Enums.CareType
    notes?: StringFilter<"CareLog"> | string
    followUpRequired?: BoolFilter<"CareLog"> | boolean
    confidential?: BoolFilter<"CareLog"> | boolean
    followUpDate?: DateTimeNullableFilter<"CareLog"> | Date | string | null
    createdAt?: DateTimeFilter<"CareLog"> | Date | string
  }

  export type UserCreateWithoutMemberInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    careLogs?: CareLogCreateNestedManyWithoutCaregiverInput
  }

  export type UserUncheckedCreateWithoutMemberInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    careLogs?: CareLogUncheckedCreateNestedManyWithoutCaregiverInput
  }

  export type UserCreateOrConnectWithoutMemberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
  }

  export type GroupMemberCreateWithoutMemberInput = {
    id?: string
    joinedAt?: Date | string
    isActive?: boolean
    group: GroupCreateNestedOneWithoutMembersInput
  }

  export type GroupMemberUncheckedCreateWithoutMemberInput = {
    id?: string
    groupId: string
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type GroupMemberCreateOrConnectWithoutMemberInput = {
    where: GroupMemberWhereUniqueInput
    create: XOR<GroupMemberCreateWithoutMemberInput, GroupMemberUncheckedCreateWithoutMemberInput>
  }

  export type GroupMemberCreateManyMemberInputEnvelope = {
    data: GroupMemberCreateManyMemberInput | GroupMemberCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type JourneyStageCreateWithoutMemberInput = {
    id?: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    template: JourneyTemplateCreateNestedOneWithoutJourneyStagesInput
    milestone: MilestoneCreateNestedOneWithoutJourneyStagesInput
  }

  export type JourneyStageUncheckedCreateWithoutMemberInput = {
    id?: string
    templateId: string
    milestoneId: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JourneyStageCreateOrConnectWithoutMemberInput = {
    where: JourneyStageWhereUniqueInput
    create: XOR<JourneyStageCreateWithoutMemberInput, JourneyStageUncheckedCreateWithoutMemberInput>
  }

  export type JourneyStageCreateManyMemberInputEnvelope = {
    data: JourneyStageCreateManyMemberInput | JourneyStageCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type CareLogCreateWithoutMemberInput = {
    id?: string
    type: $Enums.CareType
    notes: string
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
    caregiver: UserCreateNestedOneWithoutCareLogsInput
  }

  export type CareLogUncheckedCreateWithoutMemberInput = {
    id?: string
    caregiverId: string
    type: $Enums.CareType
    notes: string
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
  }

  export type CareLogCreateOrConnectWithoutMemberInput = {
    where: CareLogWhereUniqueInput
    create: XOR<CareLogCreateWithoutMemberInput, CareLogUncheckedCreateWithoutMemberInput>
  }

  export type CareLogCreateManyMemberInputEnvelope = {
    data: CareLogCreateManyMemberInput | CareLogCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type EventAttendanceCreateWithoutMemberInput = {
    id?: string
    attended?: boolean
    checkedInAt?: Date | string | null
    event: EventCreateNestedOneWithoutAttendancesInput
  }

  export type EventAttendanceUncheckedCreateWithoutMemberInput = {
    id?: string
    eventId: string
    attended?: boolean
    checkedInAt?: Date | string | null
  }

  export type EventAttendanceCreateOrConnectWithoutMemberInput = {
    where: EventAttendanceWhereUniqueInput
    create: XOR<EventAttendanceCreateWithoutMemberInput, EventAttendanceUncheckedCreateWithoutMemberInput>
  }

  export type EventAttendanceCreateManyMemberInputEnvelope = {
    data: EventAttendanceCreateManyMemberInput | EventAttendanceCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type MemberTagCreateWithoutMemberInput = {
    id?: string
    tag: TagCreateNestedOneWithoutMembersInput
  }

  export type MemberTagUncheckedCreateWithoutMemberInput = {
    id?: string
    tagId: string
  }

  export type MemberTagCreateOrConnectWithoutMemberInput = {
    where: MemberTagWhereUniqueInput
    create: XOR<MemberTagCreateWithoutMemberInput, MemberTagUncheckedCreateWithoutMemberInput>
  }

  export type MemberTagCreateManyMemberInputEnvelope = {
    data: MemberTagCreateManyMemberInput | MemberTagCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type MemberFamilyCreateWithoutMemberInput = {
    id?: string
    relationship: string
    relatedMember: MemberCreateNestedOneWithoutRelatedConnectionsInput
  }

  export type MemberFamilyUncheckedCreateWithoutMemberInput = {
    id?: string
    relatedId: string
    relationship: string
  }

  export type MemberFamilyCreateOrConnectWithoutMemberInput = {
    where: MemberFamilyWhereUniqueInput
    create: XOR<MemberFamilyCreateWithoutMemberInput, MemberFamilyUncheckedCreateWithoutMemberInput>
  }

  export type MemberFamilyCreateManyMemberInputEnvelope = {
    data: MemberFamilyCreateManyMemberInput | MemberFamilyCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type MemberFamilyCreateWithoutRelatedMemberInput = {
    id?: string
    relationship: string
    member: MemberCreateNestedOneWithoutFamilyConnectionsInput
  }

  export type MemberFamilyUncheckedCreateWithoutRelatedMemberInput = {
    id?: string
    memberId: string
    relationship: string
  }

  export type MemberFamilyCreateOrConnectWithoutRelatedMemberInput = {
    where: MemberFamilyWhereUniqueInput
    create: XOR<MemberFamilyCreateWithoutRelatedMemberInput, MemberFamilyUncheckedCreateWithoutRelatedMemberInput>
  }

  export type MemberFamilyCreateManyRelatedMemberInputEnvelope = {
    data: MemberFamilyCreateManyRelatedMemberInput | MemberFamilyCreateManyRelatedMemberInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMemberInput = {
    update: XOR<UserUpdateWithoutMemberInput, UserUncheckedUpdateWithoutMemberInput>
    create: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMemberInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMemberInput, UserUncheckedUpdateWithoutMemberInput>
  }

  export type UserUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    careLogs?: CareLogUpdateManyWithoutCaregiverNestedInput
  }

  export type UserUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    careLogs?: CareLogUncheckedUpdateManyWithoutCaregiverNestedInput
  }

  export type GroupMemberUpsertWithWhereUniqueWithoutMemberInput = {
    where: GroupMemberWhereUniqueInput
    update: XOR<GroupMemberUpdateWithoutMemberInput, GroupMemberUncheckedUpdateWithoutMemberInput>
    create: XOR<GroupMemberCreateWithoutMemberInput, GroupMemberUncheckedCreateWithoutMemberInput>
  }

  export type GroupMemberUpdateWithWhereUniqueWithoutMemberInput = {
    where: GroupMemberWhereUniqueInput
    data: XOR<GroupMemberUpdateWithoutMemberInput, GroupMemberUncheckedUpdateWithoutMemberInput>
  }

  export type GroupMemberUpdateManyWithWhereWithoutMemberInput = {
    where: GroupMemberScalarWhereInput
    data: XOR<GroupMemberUpdateManyMutationInput, GroupMemberUncheckedUpdateManyWithoutMemberInput>
  }

  export type GroupMemberScalarWhereInput = {
    AND?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
    OR?: GroupMemberScalarWhereInput[]
    NOT?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
    id?: StringFilter<"GroupMember"> | string
    memberId?: StringFilter<"GroupMember"> | string
    groupId?: StringFilter<"GroupMember"> | string
    joinedAt?: DateTimeFilter<"GroupMember"> | Date | string
    isActive?: BoolFilter<"GroupMember"> | boolean
  }

  export type JourneyStageUpsertWithWhereUniqueWithoutMemberInput = {
    where: JourneyStageWhereUniqueInput
    update: XOR<JourneyStageUpdateWithoutMemberInput, JourneyStageUncheckedUpdateWithoutMemberInput>
    create: XOR<JourneyStageCreateWithoutMemberInput, JourneyStageUncheckedCreateWithoutMemberInput>
  }

  export type JourneyStageUpdateWithWhereUniqueWithoutMemberInput = {
    where: JourneyStageWhereUniqueInput
    data: XOR<JourneyStageUpdateWithoutMemberInput, JourneyStageUncheckedUpdateWithoutMemberInput>
  }

  export type JourneyStageUpdateManyWithWhereWithoutMemberInput = {
    where: JourneyStageScalarWhereInput
    data: XOR<JourneyStageUpdateManyMutationInput, JourneyStageUncheckedUpdateManyWithoutMemberInput>
  }

  export type JourneyStageScalarWhereInput = {
    AND?: JourneyStageScalarWhereInput | JourneyStageScalarWhereInput[]
    OR?: JourneyStageScalarWhereInput[]
    NOT?: JourneyStageScalarWhereInput | JourneyStageScalarWhereInput[]
    id?: StringFilter<"JourneyStage"> | string
    memberId?: StringFilter<"JourneyStage"> | string
    templateId?: StringFilter<"JourneyStage"> | string
    milestoneId?: StringFilter<"JourneyStage"> | string
    status?: EnumStageStatusFilter<"JourneyStage"> | $Enums.StageStatus
    autoProgress?: BoolFilter<"JourneyStage"> | boolean
    flagForFollowUp?: BoolFilter<"JourneyStage"> | boolean
    completedAt?: DateTimeNullableFilter<"JourneyStage"> | Date | string | null
    notes?: StringNullableFilter<"JourneyStage"> | string | null
    createdAt?: DateTimeFilter<"JourneyStage"> | Date | string
    updatedAt?: DateTimeFilter<"JourneyStage"> | Date | string
  }

  export type CareLogUpsertWithWhereUniqueWithoutMemberInput = {
    where: CareLogWhereUniqueInput
    update: XOR<CareLogUpdateWithoutMemberInput, CareLogUncheckedUpdateWithoutMemberInput>
    create: XOR<CareLogCreateWithoutMemberInput, CareLogUncheckedCreateWithoutMemberInput>
  }

  export type CareLogUpdateWithWhereUniqueWithoutMemberInput = {
    where: CareLogWhereUniqueInput
    data: XOR<CareLogUpdateWithoutMemberInput, CareLogUncheckedUpdateWithoutMemberInput>
  }

  export type CareLogUpdateManyWithWhereWithoutMemberInput = {
    where: CareLogScalarWhereInput
    data: XOR<CareLogUpdateManyMutationInput, CareLogUncheckedUpdateManyWithoutMemberInput>
  }

  export type EventAttendanceUpsertWithWhereUniqueWithoutMemberInput = {
    where: EventAttendanceWhereUniqueInput
    update: XOR<EventAttendanceUpdateWithoutMemberInput, EventAttendanceUncheckedUpdateWithoutMemberInput>
    create: XOR<EventAttendanceCreateWithoutMemberInput, EventAttendanceUncheckedCreateWithoutMemberInput>
  }

  export type EventAttendanceUpdateWithWhereUniqueWithoutMemberInput = {
    where: EventAttendanceWhereUniqueInput
    data: XOR<EventAttendanceUpdateWithoutMemberInput, EventAttendanceUncheckedUpdateWithoutMemberInput>
  }

  export type EventAttendanceUpdateManyWithWhereWithoutMemberInput = {
    where: EventAttendanceScalarWhereInput
    data: XOR<EventAttendanceUpdateManyMutationInput, EventAttendanceUncheckedUpdateManyWithoutMemberInput>
  }

  export type EventAttendanceScalarWhereInput = {
    AND?: EventAttendanceScalarWhereInput | EventAttendanceScalarWhereInput[]
    OR?: EventAttendanceScalarWhereInput[]
    NOT?: EventAttendanceScalarWhereInput | EventAttendanceScalarWhereInput[]
    id?: StringFilter<"EventAttendance"> | string
    eventId?: StringFilter<"EventAttendance"> | string
    memberId?: StringFilter<"EventAttendance"> | string
    attended?: BoolFilter<"EventAttendance"> | boolean
    checkedInAt?: DateTimeNullableFilter<"EventAttendance"> | Date | string | null
  }

  export type MemberTagUpsertWithWhereUniqueWithoutMemberInput = {
    where: MemberTagWhereUniqueInput
    update: XOR<MemberTagUpdateWithoutMemberInput, MemberTagUncheckedUpdateWithoutMemberInput>
    create: XOR<MemberTagCreateWithoutMemberInput, MemberTagUncheckedCreateWithoutMemberInput>
  }

  export type MemberTagUpdateWithWhereUniqueWithoutMemberInput = {
    where: MemberTagWhereUniqueInput
    data: XOR<MemberTagUpdateWithoutMemberInput, MemberTagUncheckedUpdateWithoutMemberInput>
  }

  export type MemberTagUpdateManyWithWhereWithoutMemberInput = {
    where: MemberTagScalarWhereInput
    data: XOR<MemberTagUpdateManyMutationInput, MemberTagUncheckedUpdateManyWithoutMemberInput>
  }

  export type MemberTagScalarWhereInput = {
    AND?: MemberTagScalarWhereInput | MemberTagScalarWhereInput[]
    OR?: MemberTagScalarWhereInput[]
    NOT?: MemberTagScalarWhereInput | MemberTagScalarWhereInput[]
    id?: StringFilter<"MemberTag"> | string
    memberId?: StringFilter<"MemberTag"> | string
    tagId?: StringFilter<"MemberTag"> | string
  }

  export type MemberFamilyUpsertWithWhereUniqueWithoutMemberInput = {
    where: MemberFamilyWhereUniqueInput
    update: XOR<MemberFamilyUpdateWithoutMemberInput, MemberFamilyUncheckedUpdateWithoutMemberInput>
    create: XOR<MemberFamilyCreateWithoutMemberInput, MemberFamilyUncheckedCreateWithoutMemberInput>
  }

  export type MemberFamilyUpdateWithWhereUniqueWithoutMemberInput = {
    where: MemberFamilyWhereUniqueInput
    data: XOR<MemberFamilyUpdateWithoutMemberInput, MemberFamilyUncheckedUpdateWithoutMemberInput>
  }

  export type MemberFamilyUpdateManyWithWhereWithoutMemberInput = {
    where: MemberFamilyScalarWhereInput
    data: XOR<MemberFamilyUpdateManyMutationInput, MemberFamilyUncheckedUpdateManyWithoutMemberInput>
  }

  export type MemberFamilyScalarWhereInput = {
    AND?: MemberFamilyScalarWhereInput | MemberFamilyScalarWhereInput[]
    OR?: MemberFamilyScalarWhereInput[]
    NOT?: MemberFamilyScalarWhereInput | MemberFamilyScalarWhereInput[]
    id?: StringFilter<"MemberFamily"> | string
    memberId?: StringFilter<"MemberFamily"> | string
    relatedId?: StringFilter<"MemberFamily"> | string
    relationship?: StringFilter<"MemberFamily"> | string
  }

  export type MemberFamilyUpsertWithWhereUniqueWithoutRelatedMemberInput = {
    where: MemberFamilyWhereUniqueInput
    update: XOR<MemberFamilyUpdateWithoutRelatedMemberInput, MemberFamilyUncheckedUpdateWithoutRelatedMemberInput>
    create: XOR<MemberFamilyCreateWithoutRelatedMemberInput, MemberFamilyUncheckedCreateWithoutRelatedMemberInput>
  }

  export type MemberFamilyUpdateWithWhereUniqueWithoutRelatedMemberInput = {
    where: MemberFamilyWhereUniqueInput
    data: XOR<MemberFamilyUpdateWithoutRelatedMemberInput, MemberFamilyUncheckedUpdateWithoutRelatedMemberInput>
  }

  export type MemberFamilyUpdateManyWithWhereWithoutRelatedMemberInput = {
    where: MemberFamilyScalarWhereInput
    data: XOR<MemberFamilyUpdateManyMutationInput, MemberFamilyUncheckedUpdateManyWithoutRelatedMemberInput>
  }

  export type GroupMemberCreateWithoutGroupInput = {
    id?: string
    joinedAt?: Date | string
    isActive?: boolean
    member: MemberCreateNestedOneWithoutGroupsInput
  }

  export type GroupMemberUncheckedCreateWithoutGroupInput = {
    id?: string
    memberId: string
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type GroupMemberCreateOrConnectWithoutGroupInput = {
    where: GroupMemberWhereUniqueInput
    create: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput>
  }

  export type GroupMemberCreateManyGroupInputEnvelope = {
    data: GroupMemberCreateManyGroupInput | GroupMemberCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutGroupInput = {
    id?: string
    title: string
    description?: string | null
    dateTime: Date | string
    location?: string | null
    calendarType?: $Enums.CalendarType
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendances?: EventAttendanceCreateNestedManyWithoutEventInput
    tags?: EventTagCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutGroupInput = {
    id?: string
    title: string
    description?: string | null
    dateTime: Date | string
    location?: string | null
    calendarType?: $Enums.CalendarType
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendances?: EventAttendanceUncheckedCreateNestedManyWithoutEventInput
    tags?: EventTagUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutGroupInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutGroupInput, EventUncheckedCreateWithoutGroupInput>
  }

  export type EventCreateManyGroupInputEnvelope = {
    data: EventCreateManyGroupInput | EventCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type GroupFileCreateWithoutGroupInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileSize: number
    mimeType: string
    uploadedBy: string
    uploadedAt?: Date | string
  }

  export type GroupFileUncheckedCreateWithoutGroupInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileSize: number
    mimeType: string
    uploadedBy: string
    uploadedAt?: Date | string
  }

  export type GroupFileCreateOrConnectWithoutGroupInput = {
    where: GroupFileWhereUniqueInput
    create: XOR<GroupFileCreateWithoutGroupInput, GroupFileUncheckedCreateWithoutGroupInput>
  }

  export type GroupFileCreateManyGroupInputEnvelope = {
    data: GroupFileCreateManyGroupInput | GroupFileCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type GroupMemberUpsertWithWhereUniqueWithoutGroupInput = {
    where: GroupMemberWhereUniqueInput
    update: XOR<GroupMemberUpdateWithoutGroupInput, GroupMemberUncheckedUpdateWithoutGroupInput>
    create: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput>
  }

  export type GroupMemberUpdateWithWhereUniqueWithoutGroupInput = {
    where: GroupMemberWhereUniqueInput
    data: XOR<GroupMemberUpdateWithoutGroupInput, GroupMemberUncheckedUpdateWithoutGroupInput>
  }

  export type GroupMemberUpdateManyWithWhereWithoutGroupInput = {
    where: GroupMemberScalarWhereInput
    data: XOR<GroupMemberUpdateManyMutationInput, GroupMemberUncheckedUpdateManyWithoutGroupInput>
  }

  export type EventUpsertWithWhereUniqueWithoutGroupInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutGroupInput, EventUncheckedUpdateWithoutGroupInput>
    create: XOR<EventCreateWithoutGroupInput, EventUncheckedCreateWithoutGroupInput>
  }

  export type EventUpdateWithWhereUniqueWithoutGroupInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutGroupInput, EventUncheckedUpdateWithoutGroupInput>
  }

  export type EventUpdateManyWithWhereWithoutGroupInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutGroupInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    dateTime?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    groupId?: StringNullableFilter<"Event"> | string | null
    calendarType?: EnumCalendarTypeFilter<"Event"> | $Enums.CalendarType
    createdBy?: StringFilter<"Event"> | string
    isActive?: BoolFilter<"Event"> | boolean
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
  }

  export type GroupFileUpsertWithWhereUniqueWithoutGroupInput = {
    where: GroupFileWhereUniqueInput
    update: XOR<GroupFileUpdateWithoutGroupInput, GroupFileUncheckedUpdateWithoutGroupInput>
    create: XOR<GroupFileCreateWithoutGroupInput, GroupFileUncheckedCreateWithoutGroupInput>
  }

  export type GroupFileUpdateWithWhereUniqueWithoutGroupInput = {
    where: GroupFileWhereUniqueInput
    data: XOR<GroupFileUpdateWithoutGroupInput, GroupFileUncheckedUpdateWithoutGroupInput>
  }

  export type GroupFileUpdateManyWithWhereWithoutGroupInput = {
    where: GroupFileScalarWhereInput
    data: XOR<GroupFileUpdateManyMutationInput, GroupFileUncheckedUpdateManyWithoutGroupInput>
  }

  export type GroupFileScalarWhereInput = {
    AND?: GroupFileScalarWhereInput | GroupFileScalarWhereInput[]
    OR?: GroupFileScalarWhereInput[]
    NOT?: GroupFileScalarWhereInput | GroupFileScalarWhereInput[]
    id?: StringFilter<"GroupFile"> | string
    groupId?: StringFilter<"GroupFile"> | string
    fileName?: StringFilter<"GroupFile"> | string
    fileUrl?: StringFilter<"GroupFile"> | string
    fileSize?: IntFilter<"GroupFile"> | number
    mimeType?: StringFilter<"GroupFile"> | string
    uploadedBy?: StringFilter<"GroupFile"> | string
    uploadedAt?: DateTimeFilter<"GroupFile"> | Date | string
  }

  export type MemberCreateWithoutGroupsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutMemberInput
    journeyStages?: JourneyStageCreateNestedManyWithoutMemberInput
    careLogs?: CareLogCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceCreateNestedManyWithoutMemberInput
    tags?: MemberTagCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberUncheckedCreateWithoutGroupsInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutMemberInput
    careLogs?: CareLogUncheckedCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceUncheckedCreateNestedManyWithoutMemberInput
    tags?: MemberTagUncheckedCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyUncheckedCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyUncheckedCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberCreateOrConnectWithoutGroupsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutGroupsInput, MemberUncheckedCreateWithoutGroupsInput>
  }

  export type GroupCreateWithoutMembersInput = {
    id?: string
    name: string
    type: $Enums.GroupType
    description?: string | null
    leaderId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutGroupInput
    files?: GroupFileCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    type: $Enums.GroupType
    description?: string | null
    leaderId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutGroupInput
    files?: GroupFileUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutMembersInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutMembersInput, GroupUncheckedCreateWithoutMembersInput>
  }

  export type MemberUpsertWithoutGroupsInput = {
    update: XOR<MemberUpdateWithoutGroupsInput, MemberUncheckedUpdateWithoutGroupsInput>
    create: XOR<MemberCreateWithoutGroupsInput, MemberUncheckedCreateWithoutGroupsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutGroupsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutGroupsInput, MemberUncheckedUpdateWithoutGroupsInput>
  }

  export type MemberUpdateWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutMemberNestedInput
    journeyStages?: JourneyStageUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUncheckedUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUncheckedUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUncheckedUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUncheckedUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUncheckedUpdateManyWithoutRelatedMemberNestedInput
  }

  export type GroupUpsertWithoutMembersInput = {
    update: XOR<GroupUpdateWithoutMembersInput, GroupUncheckedUpdateWithoutMembersInput>
    create: XOR<GroupCreateWithoutMembersInput, GroupUncheckedCreateWithoutMembersInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutMembersInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutMembersInput, GroupUncheckedUpdateWithoutMembersInput>
  }

  export type GroupUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumGroupTypeFieldUpdateOperationsInput | $Enums.GroupType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutGroupNestedInput
    files?: GroupFileUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumGroupTypeFieldUpdateOperationsInput | $Enums.GroupType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutGroupNestedInput
    files?: GroupFileUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type MilestoneCreateWithoutTemplateInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    journeyStages?: JourneyStageCreateNestedManyWithoutMilestoneInput
  }

  export type MilestoneUncheckedCreateWithoutTemplateInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutMilestoneInput
  }

  export type MilestoneCreateOrConnectWithoutTemplateInput = {
    where: MilestoneWhereUniqueInput
    create: XOR<MilestoneCreateWithoutTemplateInput, MilestoneUncheckedCreateWithoutTemplateInput>
  }

  export type MilestoneCreateManyTemplateInputEnvelope = {
    data: MilestoneCreateManyTemplateInput | MilestoneCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type JourneyStageCreateWithoutTemplateInput = {
    id?: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    member: MemberCreateNestedOneWithoutJourneyStagesInput
    milestone: MilestoneCreateNestedOneWithoutJourneyStagesInput
  }

  export type JourneyStageUncheckedCreateWithoutTemplateInput = {
    id?: string
    memberId: string
    milestoneId: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JourneyStageCreateOrConnectWithoutTemplateInput = {
    where: JourneyStageWhereUniqueInput
    create: XOR<JourneyStageCreateWithoutTemplateInput, JourneyStageUncheckedCreateWithoutTemplateInput>
  }

  export type JourneyStageCreateManyTemplateInputEnvelope = {
    data: JourneyStageCreateManyTemplateInput | JourneyStageCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type MilestoneUpsertWithWhereUniqueWithoutTemplateInput = {
    where: MilestoneWhereUniqueInput
    update: XOR<MilestoneUpdateWithoutTemplateInput, MilestoneUncheckedUpdateWithoutTemplateInput>
    create: XOR<MilestoneCreateWithoutTemplateInput, MilestoneUncheckedCreateWithoutTemplateInput>
  }

  export type MilestoneUpdateWithWhereUniqueWithoutTemplateInput = {
    where: MilestoneWhereUniqueInput
    data: XOR<MilestoneUpdateWithoutTemplateInput, MilestoneUncheckedUpdateWithoutTemplateInput>
  }

  export type MilestoneUpdateManyWithWhereWithoutTemplateInput = {
    where: MilestoneScalarWhereInput
    data: XOR<MilestoneUpdateManyMutationInput, MilestoneUncheckedUpdateManyWithoutTemplateInput>
  }

  export type MilestoneScalarWhereInput = {
    AND?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
    OR?: MilestoneScalarWhereInput[]
    NOT?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
    id?: StringFilter<"Milestone"> | string
    templateId?: StringFilter<"Milestone"> | string
    name?: StringFilter<"Milestone"> | string
    description?: StringNullableFilter<"Milestone"> | string | null
    sequence?: IntFilter<"Milestone"> | number
  }

  export type JourneyStageUpsertWithWhereUniqueWithoutTemplateInput = {
    where: JourneyStageWhereUniqueInput
    update: XOR<JourneyStageUpdateWithoutTemplateInput, JourneyStageUncheckedUpdateWithoutTemplateInput>
    create: XOR<JourneyStageCreateWithoutTemplateInput, JourneyStageUncheckedCreateWithoutTemplateInput>
  }

  export type JourneyStageUpdateWithWhereUniqueWithoutTemplateInput = {
    where: JourneyStageWhereUniqueInput
    data: XOR<JourneyStageUpdateWithoutTemplateInput, JourneyStageUncheckedUpdateWithoutTemplateInput>
  }

  export type JourneyStageUpdateManyWithWhereWithoutTemplateInput = {
    where: JourneyStageScalarWhereInput
    data: XOR<JourneyStageUpdateManyMutationInput, JourneyStageUncheckedUpdateManyWithoutTemplateInput>
  }

  export type JourneyTemplateCreateWithoutMilestonesInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    journeyStages?: JourneyStageCreateNestedManyWithoutTemplateInput
  }

  export type JourneyTemplateUncheckedCreateWithoutMilestonesInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type JourneyTemplateCreateOrConnectWithoutMilestonesInput = {
    where: JourneyTemplateWhereUniqueInput
    create: XOR<JourneyTemplateCreateWithoutMilestonesInput, JourneyTemplateUncheckedCreateWithoutMilestonesInput>
  }

  export type JourneyStageCreateWithoutMilestoneInput = {
    id?: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    member: MemberCreateNestedOneWithoutJourneyStagesInput
    template: JourneyTemplateCreateNestedOneWithoutJourneyStagesInput
  }

  export type JourneyStageUncheckedCreateWithoutMilestoneInput = {
    id?: string
    memberId: string
    templateId: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JourneyStageCreateOrConnectWithoutMilestoneInput = {
    where: JourneyStageWhereUniqueInput
    create: XOR<JourneyStageCreateWithoutMilestoneInput, JourneyStageUncheckedCreateWithoutMilestoneInput>
  }

  export type JourneyStageCreateManyMilestoneInputEnvelope = {
    data: JourneyStageCreateManyMilestoneInput | JourneyStageCreateManyMilestoneInput[]
    skipDuplicates?: boolean
  }

  export type JourneyTemplateUpsertWithoutMilestonesInput = {
    update: XOR<JourneyTemplateUpdateWithoutMilestonesInput, JourneyTemplateUncheckedUpdateWithoutMilestonesInput>
    create: XOR<JourneyTemplateCreateWithoutMilestonesInput, JourneyTemplateUncheckedCreateWithoutMilestonesInput>
    where?: JourneyTemplateWhereInput
  }

  export type JourneyTemplateUpdateToOneWithWhereWithoutMilestonesInput = {
    where?: JourneyTemplateWhereInput
    data: XOR<JourneyTemplateUpdateWithoutMilestonesInput, JourneyTemplateUncheckedUpdateWithoutMilestonesInput>
  }

  export type JourneyTemplateUpdateWithoutMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    journeyStages?: JourneyStageUpdateManyWithoutTemplateNestedInput
  }

  export type JourneyTemplateUncheckedUpdateWithoutMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type JourneyStageUpsertWithWhereUniqueWithoutMilestoneInput = {
    where: JourneyStageWhereUniqueInput
    update: XOR<JourneyStageUpdateWithoutMilestoneInput, JourneyStageUncheckedUpdateWithoutMilestoneInput>
    create: XOR<JourneyStageCreateWithoutMilestoneInput, JourneyStageUncheckedCreateWithoutMilestoneInput>
  }

  export type JourneyStageUpdateWithWhereUniqueWithoutMilestoneInput = {
    where: JourneyStageWhereUniqueInput
    data: XOR<JourneyStageUpdateWithoutMilestoneInput, JourneyStageUncheckedUpdateWithoutMilestoneInput>
  }

  export type JourneyStageUpdateManyWithWhereWithoutMilestoneInput = {
    where: JourneyStageScalarWhereInput
    data: XOR<JourneyStageUpdateManyMutationInput, JourneyStageUncheckedUpdateManyWithoutMilestoneInput>
  }

  export type MemberCreateWithoutJourneyStagesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutMemberInput
    groups?: GroupMemberCreateNestedManyWithoutMemberInput
    careLogs?: CareLogCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceCreateNestedManyWithoutMemberInput
    tags?: MemberTagCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberUncheckedCreateWithoutJourneyStagesInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupMemberUncheckedCreateNestedManyWithoutMemberInput
    careLogs?: CareLogUncheckedCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceUncheckedCreateNestedManyWithoutMemberInput
    tags?: MemberTagUncheckedCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyUncheckedCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyUncheckedCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberCreateOrConnectWithoutJourneyStagesInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutJourneyStagesInput, MemberUncheckedCreateWithoutJourneyStagesInput>
  }

  export type JourneyTemplateCreateWithoutJourneyStagesInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    milestones?: MilestoneCreateNestedManyWithoutTemplateInput
  }

  export type JourneyTemplateUncheckedCreateWithoutJourneyStagesInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    milestones?: MilestoneUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type JourneyTemplateCreateOrConnectWithoutJourneyStagesInput = {
    where: JourneyTemplateWhereUniqueInput
    create: XOR<JourneyTemplateCreateWithoutJourneyStagesInput, JourneyTemplateUncheckedCreateWithoutJourneyStagesInput>
  }

  export type MilestoneCreateWithoutJourneyStagesInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    template: JourneyTemplateCreateNestedOneWithoutMilestonesInput
  }

  export type MilestoneUncheckedCreateWithoutJourneyStagesInput = {
    id?: string
    templateId: string
    name: string
    description?: string | null
    sequence: number
  }

  export type MilestoneCreateOrConnectWithoutJourneyStagesInput = {
    where: MilestoneWhereUniqueInput
    create: XOR<MilestoneCreateWithoutJourneyStagesInput, MilestoneUncheckedCreateWithoutJourneyStagesInput>
  }

  export type MemberUpsertWithoutJourneyStagesInput = {
    update: XOR<MemberUpdateWithoutJourneyStagesInput, MemberUncheckedUpdateWithoutJourneyStagesInput>
    create: XOR<MemberCreateWithoutJourneyStagesInput, MemberUncheckedCreateWithoutJourneyStagesInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutJourneyStagesInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutJourneyStagesInput, MemberUncheckedUpdateWithoutJourneyStagesInput>
  }

  export type MemberUpdateWithoutJourneyStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutMemberNestedInput
    groups?: GroupMemberUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutJourneyStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupMemberUncheckedUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUncheckedUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUncheckedUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUncheckedUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUncheckedUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUncheckedUpdateManyWithoutRelatedMemberNestedInput
  }

  export type JourneyTemplateUpsertWithoutJourneyStagesInput = {
    update: XOR<JourneyTemplateUpdateWithoutJourneyStagesInput, JourneyTemplateUncheckedUpdateWithoutJourneyStagesInput>
    create: XOR<JourneyTemplateCreateWithoutJourneyStagesInput, JourneyTemplateUncheckedCreateWithoutJourneyStagesInput>
    where?: JourneyTemplateWhereInput
  }

  export type JourneyTemplateUpdateToOneWithWhereWithoutJourneyStagesInput = {
    where?: JourneyTemplateWhereInput
    data: XOR<JourneyTemplateUpdateWithoutJourneyStagesInput, JourneyTemplateUncheckedUpdateWithoutJourneyStagesInput>
  }

  export type JourneyTemplateUpdateWithoutJourneyStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    milestones?: MilestoneUpdateManyWithoutTemplateNestedInput
  }

  export type JourneyTemplateUncheckedUpdateWithoutJourneyStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    milestones?: MilestoneUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type MilestoneUpsertWithoutJourneyStagesInput = {
    update: XOR<MilestoneUpdateWithoutJourneyStagesInput, MilestoneUncheckedUpdateWithoutJourneyStagesInput>
    create: XOR<MilestoneCreateWithoutJourneyStagesInput, MilestoneUncheckedCreateWithoutJourneyStagesInput>
    where?: MilestoneWhereInput
  }

  export type MilestoneUpdateToOneWithWhereWithoutJourneyStagesInput = {
    where?: MilestoneWhereInput
    data: XOR<MilestoneUpdateWithoutJourneyStagesInput, MilestoneUncheckedUpdateWithoutJourneyStagesInput>
  }

  export type MilestoneUpdateWithoutJourneyStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    template?: JourneyTemplateUpdateOneRequiredWithoutMilestonesNestedInput
  }

  export type MilestoneUncheckedUpdateWithoutJourneyStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
  }

  export type GroupCreateWithoutEventsInput = {
    id?: string
    name: string
    type: $Enums.GroupType
    description?: string | null
    leaderId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    files?: GroupFileCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    type: $Enums.GroupType
    description?: string | null
    leaderId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    files?: GroupFileUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutEventsInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutEventsInput, GroupUncheckedCreateWithoutEventsInput>
  }

  export type EventAttendanceCreateWithoutEventInput = {
    id?: string
    attended?: boolean
    checkedInAt?: Date | string | null
    member: MemberCreateNestedOneWithoutEventAttendancesInput
  }

  export type EventAttendanceUncheckedCreateWithoutEventInput = {
    id?: string
    memberId: string
    attended?: boolean
    checkedInAt?: Date | string | null
  }

  export type EventAttendanceCreateOrConnectWithoutEventInput = {
    where: EventAttendanceWhereUniqueInput
    create: XOR<EventAttendanceCreateWithoutEventInput, EventAttendanceUncheckedCreateWithoutEventInput>
  }

  export type EventAttendanceCreateManyEventInputEnvelope = {
    data: EventAttendanceCreateManyEventInput | EventAttendanceCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EventTagCreateWithoutEventInput = {
    id?: string
    tag: TagCreateNestedOneWithoutEventsInput
  }

  export type EventTagUncheckedCreateWithoutEventInput = {
    id?: string
    tagId: string
  }

  export type EventTagCreateOrConnectWithoutEventInput = {
    where: EventTagWhereUniqueInput
    create: XOR<EventTagCreateWithoutEventInput, EventTagUncheckedCreateWithoutEventInput>
  }

  export type EventTagCreateManyEventInputEnvelope = {
    data: EventTagCreateManyEventInput | EventTagCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type GroupUpsertWithoutEventsInput = {
    update: XOR<GroupUpdateWithoutEventsInput, GroupUncheckedUpdateWithoutEventsInput>
    create: XOR<GroupCreateWithoutEventsInput, GroupUncheckedCreateWithoutEventsInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutEventsInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutEventsInput, GroupUncheckedUpdateWithoutEventsInput>
  }

  export type GroupUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumGroupTypeFieldUpdateOperationsInput | $Enums.GroupType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    files?: GroupFileUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumGroupTypeFieldUpdateOperationsInput | $Enums.GroupType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    files?: GroupFileUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type EventAttendanceUpsertWithWhereUniqueWithoutEventInput = {
    where: EventAttendanceWhereUniqueInput
    update: XOR<EventAttendanceUpdateWithoutEventInput, EventAttendanceUncheckedUpdateWithoutEventInput>
    create: XOR<EventAttendanceCreateWithoutEventInput, EventAttendanceUncheckedCreateWithoutEventInput>
  }

  export type EventAttendanceUpdateWithWhereUniqueWithoutEventInput = {
    where: EventAttendanceWhereUniqueInput
    data: XOR<EventAttendanceUpdateWithoutEventInput, EventAttendanceUncheckedUpdateWithoutEventInput>
  }

  export type EventAttendanceUpdateManyWithWhereWithoutEventInput = {
    where: EventAttendanceScalarWhereInput
    data: XOR<EventAttendanceUpdateManyMutationInput, EventAttendanceUncheckedUpdateManyWithoutEventInput>
  }

  export type EventTagUpsertWithWhereUniqueWithoutEventInput = {
    where: EventTagWhereUniqueInput
    update: XOR<EventTagUpdateWithoutEventInput, EventTagUncheckedUpdateWithoutEventInput>
    create: XOR<EventTagCreateWithoutEventInput, EventTagUncheckedCreateWithoutEventInput>
  }

  export type EventTagUpdateWithWhereUniqueWithoutEventInput = {
    where: EventTagWhereUniqueInput
    data: XOR<EventTagUpdateWithoutEventInput, EventTagUncheckedUpdateWithoutEventInput>
  }

  export type EventTagUpdateManyWithWhereWithoutEventInput = {
    where: EventTagScalarWhereInput
    data: XOR<EventTagUpdateManyMutationInput, EventTagUncheckedUpdateManyWithoutEventInput>
  }

  export type EventTagScalarWhereInput = {
    AND?: EventTagScalarWhereInput | EventTagScalarWhereInput[]
    OR?: EventTagScalarWhereInput[]
    NOT?: EventTagScalarWhereInput | EventTagScalarWhereInput[]
    id?: StringFilter<"EventTag"> | string
    eventId?: StringFilter<"EventTag"> | string
    tagId?: StringFilter<"EventTag"> | string
  }

  export type EventCreateWithoutAttendancesInput = {
    id?: string
    title: string
    description?: string | null
    dateTime: Date | string
    location?: string | null
    calendarType?: $Enums.CalendarType
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    group?: GroupCreateNestedOneWithoutEventsInput
    tags?: EventTagCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutAttendancesInput = {
    id?: string
    title: string
    description?: string | null
    dateTime: Date | string
    location?: string | null
    groupId?: string | null
    calendarType?: $Enums.CalendarType
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: EventTagUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutAttendancesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAttendancesInput, EventUncheckedCreateWithoutAttendancesInput>
  }

  export type MemberCreateWithoutEventAttendancesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutMemberInput
    groups?: GroupMemberCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageCreateNestedManyWithoutMemberInput
    careLogs?: CareLogCreateNestedManyWithoutMemberInput
    tags?: MemberTagCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberUncheckedCreateWithoutEventAttendancesInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupMemberUncheckedCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutMemberInput
    careLogs?: CareLogUncheckedCreateNestedManyWithoutMemberInput
    tags?: MemberTagUncheckedCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyUncheckedCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyUncheckedCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberCreateOrConnectWithoutEventAttendancesInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutEventAttendancesInput, MemberUncheckedCreateWithoutEventAttendancesInput>
  }

  export type EventUpsertWithoutAttendancesInput = {
    update: XOR<EventUpdateWithoutAttendancesInput, EventUncheckedUpdateWithoutAttendancesInput>
    create: XOR<EventCreateWithoutAttendancesInput, EventUncheckedCreateWithoutAttendancesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutAttendancesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutAttendancesInput, EventUncheckedUpdateWithoutAttendancesInput>
  }

  export type EventUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: GroupUpdateOneWithoutEventsNestedInput
    tags?: EventTagUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: EventTagUncheckedUpdateManyWithoutEventNestedInput
  }

  export type MemberUpsertWithoutEventAttendancesInput = {
    update: XOR<MemberUpdateWithoutEventAttendancesInput, MemberUncheckedUpdateWithoutEventAttendancesInput>
    create: XOR<MemberCreateWithoutEventAttendancesInput, MemberUncheckedCreateWithoutEventAttendancesInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutEventAttendancesInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutEventAttendancesInput, MemberUncheckedUpdateWithoutEventAttendancesInput>
  }

  export type MemberUpdateWithoutEventAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutMemberNestedInput
    groups?: GroupMemberUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutEventAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupMemberUncheckedUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUncheckedUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUncheckedUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUncheckedUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUncheckedUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberCreateWithoutCareLogsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutMemberInput
    groups?: GroupMemberCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceCreateNestedManyWithoutMemberInput
    tags?: MemberTagCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberUncheckedCreateWithoutCareLogsInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupMemberUncheckedCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceUncheckedCreateNestedManyWithoutMemberInput
    tags?: MemberTagUncheckedCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyUncheckedCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyUncheckedCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberCreateOrConnectWithoutCareLogsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutCareLogsInput, MemberUncheckedCreateWithoutCareLogsInput>
  }

  export type UserCreateWithoutCareLogsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    member?: MemberCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCareLogsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    member?: MemberUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCareLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCareLogsInput, UserUncheckedCreateWithoutCareLogsInput>
  }

  export type MemberUpsertWithoutCareLogsInput = {
    update: XOR<MemberUpdateWithoutCareLogsInput, MemberUncheckedUpdateWithoutCareLogsInput>
    create: XOR<MemberCreateWithoutCareLogsInput, MemberUncheckedCreateWithoutCareLogsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutCareLogsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutCareLogsInput, MemberUncheckedUpdateWithoutCareLogsInput>
  }

  export type MemberUpdateWithoutCareLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutMemberNestedInput
    groups?: GroupMemberUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutCareLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupMemberUncheckedUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUncheckedUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUncheckedUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUncheckedUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUncheckedUpdateManyWithoutRelatedMemberNestedInput
  }

  export type UserUpsertWithoutCareLogsInput = {
    update: XOR<UserUpdateWithoutCareLogsInput, UserUncheckedUpdateWithoutCareLogsInput>
    create: XOR<UserCreateWithoutCareLogsInput, UserUncheckedCreateWithoutCareLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCareLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCareLogsInput, UserUncheckedUpdateWithoutCareLogsInput>
  }

  export type UserUpdateWithoutCareLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCareLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUncheckedUpdateOneWithoutUserNestedInput
  }

  export type MemberTagCreateWithoutTagInput = {
    id?: string
    member: MemberCreateNestedOneWithoutTagsInput
  }

  export type MemberTagUncheckedCreateWithoutTagInput = {
    id?: string
    memberId: string
  }

  export type MemberTagCreateOrConnectWithoutTagInput = {
    where: MemberTagWhereUniqueInput
    create: XOR<MemberTagCreateWithoutTagInput, MemberTagUncheckedCreateWithoutTagInput>
  }

  export type MemberTagCreateManyTagInputEnvelope = {
    data: MemberTagCreateManyTagInput | MemberTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type EventTagCreateWithoutTagInput = {
    id?: string
    event: EventCreateNestedOneWithoutTagsInput
  }

  export type EventTagUncheckedCreateWithoutTagInput = {
    id?: string
    eventId: string
  }

  export type EventTagCreateOrConnectWithoutTagInput = {
    where: EventTagWhereUniqueInput
    create: XOR<EventTagCreateWithoutTagInput, EventTagUncheckedCreateWithoutTagInput>
  }

  export type EventTagCreateManyTagInputEnvelope = {
    data: EventTagCreateManyTagInput | EventTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type MemberTagUpsertWithWhereUniqueWithoutTagInput = {
    where: MemberTagWhereUniqueInput
    update: XOR<MemberTagUpdateWithoutTagInput, MemberTagUncheckedUpdateWithoutTagInput>
    create: XOR<MemberTagCreateWithoutTagInput, MemberTagUncheckedCreateWithoutTagInput>
  }

  export type MemberTagUpdateWithWhereUniqueWithoutTagInput = {
    where: MemberTagWhereUniqueInput
    data: XOR<MemberTagUpdateWithoutTagInput, MemberTagUncheckedUpdateWithoutTagInput>
  }

  export type MemberTagUpdateManyWithWhereWithoutTagInput = {
    where: MemberTagScalarWhereInput
    data: XOR<MemberTagUpdateManyMutationInput, MemberTagUncheckedUpdateManyWithoutTagInput>
  }

  export type EventTagUpsertWithWhereUniqueWithoutTagInput = {
    where: EventTagWhereUniqueInput
    update: XOR<EventTagUpdateWithoutTagInput, EventTagUncheckedUpdateWithoutTagInput>
    create: XOR<EventTagCreateWithoutTagInput, EventTagUncheckedCreateWithoutTagInput>
  }

  export type EventTagUpdateWithWhereUniqueWithoutTagInput = {
    where: EventTagWhereUniqueInput
    data: XOR<EventTagUpdateWithoutTagInput, EventTagUncheckedUpdateWithoutTagInput>
  }

  export type EventTagUpdateManyWithWhereWithoutTagInput = {
    where: EventTagScalarWhereInput
    data: XOR<EventTagUpdateManyMutationInput, EventTagUncheckedUpdateManyWithoutTagInput>
  }

  export type MemberCreateWithoutTagsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutMemberInput
    groups?: GroupMemberCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageCreateNestedManyWithoutMemberInput
    careLogs?: CareLogCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberUncheckedCreateWithoutTagsInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupMemberUncheckedCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutMemberInput
    careLogs?: CareLogUncheckedCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceUncheckedCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyUncheckedCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyUncheckedCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberCreateOrConnectWithoutTagsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutTagsInput, MemberUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutMembersInput = {
    id?: string
    label: string
    category?: $Enums.TagCategory
    color?: string
    createdAt?: Date | string
    events?: EventTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutMembersInput = {
    id?: string
    label: string
    category?: $Enums.TagCategory
    color?: string
    createdAt?: Date | string
    events?: EventTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutMembersInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutMembersInput, TagUncheckedCreateWithoutMembersInput>
  }

  export type MemberUpsertWithoutTagsInput = {
    update: XOR<MemberUpdateWithoutTagsInput, MemberUncheckedUpdateWithoutTagsInput>
    create: XOR<MemberCreateWithoutTagsInput, MemberUncheckedCreateWithoutTagsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutTagsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutTagsInput, MemberUncheckedUpdateWithoutTagsInput>
  }

  export type MemberUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutMemberNestedInput
    groups?: GroupMemberUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupMemberUncheckedUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUncheckedUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUncheckedUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUncheckedUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUncheckedUpdateManyWithoutRelatedMemberNestedInput
  }

  export type TagUpsertWithoutMembersInput = {
    update: XOR<TagUpdateWithoutMembersInput, TagUncheckedUpdateWithoutMembersInput>
    create: XOR<TagCreateWithoutMembersInput, TagUncheckedCreateWithoutMembersInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutMembersInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutMembersInput, TagUncheckedUpdateWithoutMembersInput>
  }

  export type TagUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type EventCreateWithoutTagsInput = {
    id?: string
    title: string
    description?: string | null
    dateTime: Date | string
    location?: string | null
    calendarType?: $Enums.CalendarType
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    group?: GroupCreateNestedOneWithoutEventsInput
    attendances?: EventAttendanceCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutTagsInput = {
    id?: string
    title: string
    description?: string | null
    dateTime: Date | string
    location?: string | null
    groupId?: string | null
    calendarType?: $Enums.CalendarType
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendances?: EventAttendanceUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutTagsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutTagsInput, EventUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutEventsInput = {
    id?: string
    label: string
    category?: $Enums.TagCategory
    color?: string
    createdAt?: Date | string
    members?: MemberTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutEventsInput = {
    id?: string
    label: string
    category?: $Enums.TagCategory
    color?: string
    createdAt?: Date | string
    members?: MemberTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutEventsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutEventsInput, TagUncheckedCreateWithoutEventsInput>
  }

  export type EventUpsertWithoutTagsInput = {
    update: XOR<EventUpdateWithoutTagsInput, EventUncheckedUpdateWithoutTagsInput>
    create: XOR<EventCreateWithoutTagsInput, EventUncheckedCreateWithoutTagsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutTagsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutTagsInput, EventUncheckedUpdateWithoutTagsInput>
  }

  export type EventUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: GroupUpdateOneWithoutEventsNestedInput
    attendances?: EventAttendanceUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: EventAttendanceUncheckedUpdateManyWithoutEventNestedInput
  }

  export type TagUpsertWithoutEventsInput = {
    update: XOR<TagUpdateWithoutEventsInput, TagUncheckedUpdateWithoutEventsInput>
    create: XOR<TagCreateWithoutEventsInput, TagUncheckedCreateWithoutEventsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutEventsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutEventsInput, TagUncheckedUpdateWithoutEventsInput>
  }

  export type TagUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: EnumTagCategoryFieldUpdateOperationsInput | $Enums.TagCategory
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type GroupCreateWithoutFilesInput = {
    id?: string
    name: string
    type: $Enums.GroupType
    description?: string | null
    leaderId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    events?: EventCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    type: $Enums.GroupType
    description?: string | null
    leaderId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    events?: EventUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutFilesInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutFilesInput, GroupUncheckedCreateWithoutFilesInput>
  }

  export type GroupUpsertWithoutFilesInput = {
    update: XOR<GroupUpdateWithoutFilesInput, GroupUncheckedUpdateWithoutFilesInput>
    create: XOR<GroupCreateWithoutFilesInput, GroupUncheckedCreateWithoutFilesInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutFilesInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutFilesInput, GroupUncheckedUpdateWithoutFilesInput>
  }

  export type GroupUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumGroupTypeFieldUpdateOperationsInput | $Enums.GroupType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    events?: EventUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumGroupTypeFieldUpdateOperationsInput | $Enums.GroupType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    events?: EventUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type MemberCreateWithoutFamilyConnectionsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutMemberInput
    groups?: GroupMemberCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageCreateNestedManyWithoutMemberInput
    careLogs?: CareLogCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceCreateNestedManyWithoutMemberInput
    tags?: MemberTagCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberUncheckedCreateWithoutFamilyConnectionsInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupMemberUncheckedCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutMemberInput
    careLogs?: CareLogUncheckedCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceUncheckedCreateNestedManyWithoutMemberInput
    tags?: MemberTagUncheckedCreateNestedManyWithoutMemberInput
    relatedConnections?: MemberFamilyUncheckedCreateNestedManyWithoutRelatedMemberInput
  }

  export type MemberCreateOrConnectWithoutFamilyConnectionsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutFamilyConnectionsInput, MemberUncheckedCreateWithoutFamilyConnectionsInput>
  }

  export type MemberCreateWithoutRelatedConnectionsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutMemberInput
    groups?: GroupMemberCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageCreateNestedManyWithoutMemberInput
    careLogs?: CareLogCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceCreateNestedManyWithoutMemberInput
    tags?: MemberTagCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutRelatedConnectionsInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    maritalStatus?: $Enums.MaritalStatus | null
    spiritualStatus?: string | null
    profilePhotoUrl?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupMemberUncheckedCreateNestedManyWithoutMemberInput
    journeyStages?: JourneyStageUncheckedCreateNestedManyWithoutMemberInput
    careLogs?: CareLogUncheckedCreateNestedManyWithoutMemberInput
    eventAttendances?: EventAttendanceUncheckedCreateNestedManyWithoutMemberInput
    tags?: MemberTagUncheckedCreateNestedManyWithoutMemberInput
    familyConnections?: MemberFamilyUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutRelatedConnectionsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutRelatedConnectionsInput, MemberUncheckedCreateWithoutRelatedConnectionsInput>
  }

  export type MemberUpsertWithoutFamilyConnectionsInput = {
    update: XOR<MemberUpdateWithoutFamilyConnectionsInput, MemberUncheckedUpdateWithoutFamilyConnectionsInput>
    create: XOR<MemberCreateWithoutFamilyConnectionsInput, MemberUncheckedCreateWithoutFamilyConnectionsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutFamilyConnectionsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutFamilyConnectionsInput, MemberUncheckedUpdateWithoutFamilyConnectionsInput>
  }

  export type MemberUpdateWithoutFamilyConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutMemberNestedInput
    groups?: GroupMemberUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutFamilyConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupMemberUncheckedUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUncheckedUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUncheckedUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUncheckedUpdateManyWithoutMemberNestedInput
    relatedConnections?: MemberFamilyUncheckedUpdateManyWithoutRelatedMemberNestedInput
  }

  export type MemberUpsertWithoutRelatedConnectionsInput = {
    update: XOR<MemberUpdateWithoutRelatedConnectionsInput, MemberUncheckedUpdateWithoutRelatedConnectionsInput>
    create: XOR<MemberCreateWithoutRelatedConnectionsInput, MemberUncheckedCreateWithoutRelatedConnectionsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutRelatedConnectionsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutRelatedConnectionsInput, MemberUncheckedUpdateWithoutRelatedConnectionsInput>
  }

  export type MemberUpdateWithoutRelatedConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutMemberNestedInput
    groups?: GroupMemberUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutRelatedConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    spiritualStatus?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupMemberUncheckedUpdateManyWithoutMemberNestedInput
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutMemberNestedInput
    careLogs?: CareLogUncheckedUpdateManyWithoutMemberNestedInput
    eventAttendances?: EventAttendanceUncheckedUpdateManyWithoutMemberNestedInput
    tags?: MemberTagUncheckedUpdateManyWithoutMemberNestedInput
    familyConnections?: MemberFamilyUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type CareLogCreateManyCaregiverInput = {
    id?: string
    memberId: string
    type: $Enums.CareType
    notes: string
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
  }

  export type CareLogUpdateWithoutCaregiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCareTypeFieldUpdateOperationsInput | $Enums.CareType
    notes?: StringFieldUpdateOperationsInput | string
    followUpRequired?: BoolFieldUpdateOperationsInput | boolean
    confidential?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutCareLogsNestedInput
  }

  export type CareLogUncheckedUpdateWithoutCaregiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    type?: EnumCareTypeFieldUpdateOperationsInput | $Enums.CareType
    notes?: StringFieldUpdateOperationsInput | string
    followUpRequired?: BoolFieldUpdateOperationsInput | boolean
    confidential?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareLogUncheckedUpdateManyWithoutCaregiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    type?: EnumCareTypeFieldUpdateOperationsInput | $Enums.CareType
    notes?: StringFieldUpdateOperationsInput | string
    followUpRequired?: BoolFieldUpdateOperationsInput | boolean
    confidential?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMemberCreateManyMemberInput = {
    id?: string
    groupId: string
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type JourneyStageCreateManyMemberInput = {
    id?: string
    templateId: string
    milestoneId: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CareLogCreateManyMemberInput = {
    id?: string
    caregiverId: string
    type: $Enums.CareType
    notes: string
    followUpRequired?: boolean
    confidential?: boolean
    followUpDate?: Date | string | null
    createdAt?: Date | string
  }

  export type EventAttendanceCreateManyMemberInput = {
    id?: string
    eventId: string
    attended?: boolean
    checkedInAt?: Date | string | null
  }

  export type MemberTagCreateManyMemberInput = {
    id?: string
    tagId: string
  }

  export type MemberFamilyCreateManyMemberInput = {
    id?: string
    relatedId: string
    relationship: string
  }

  export type MemberFamilyCreateManyRelatedMemberInput = {
    id?: string
    memberId: string
    relationship: string
  }

  export type GroupMemberUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    group?: GroupUpdateOneRequiredWithoutMembersNestedInput
  }

  export type GroupMemberUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GroupMemberUncheckedUpdateManyWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JourneyStageUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: JourneyTemplateUpdateOneRequiredWithoutJourneyStagesNestedInput
    milestone?: MilestoneUpdateOneRequiredWithoutJourneyStagesNestedInput
  }

  export type JourneyStageUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    milestoneId?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyStageUncheckedUpdateManyWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    milestoneId?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareLogUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCareTypeFieldUpdateOperationsInput | $Enums.CareType
    notes?: StringFieldUpdateOperationsInput | string
    followUpRequired?: BoolFieldUpdateOperationsInput | boolean
    confidential?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caregiver?: UserUpdateOneRequiredWithoutCareLogsNestedInput
  }

  export type CareLogUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    caregiverId?: StringFieldUpdateOperationsInput | string
    type?: EnumCareTypeFieldUpdateOperationsInput | $Enums.CareType
    notes?: StringFieldUpdateOperationsInput | string
    followUpRequired?: BoolFieldUpdateOperationsInput | boolean
    confidential?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareLogUncheckedUpdateManyWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    caregiverId?: StringFieldUpdateOperationsInput | string
    type?: EnumCareTypeFieldUpdateOperationsInput | $Enums.CareType
    notes?: StringFieldUpdateOperationsInput | string
    followUpRequired?: BoolFieldUpdateOperationsInput | boolean
    confidential?: BoolFieldUpdateOperationsInput | boolean
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendanceUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    attended?: BoolFieldUpdateOperationsInput | boolean
    checkedInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event?: EventUpdateOneRequiredWithoutAttendancesNestedInput
  }

  export type EventAttendanceUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    attended?: BoolFieldUpdateOperationsInput | boolean
    checkedInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventAttendanceUncheckedUpdateManyWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    attended?: BoolFieldUpdateOperationsInput | boolean
    checkedInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MemberTagUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutMembersNestedInput
  }

  export type MemberTagUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type MemberTagUncheckedUpdateManyWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type MemberFamilyUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    relatedMember?: MemberUpdateOneRequiredWithoutRelatedConnectionsNestedInput
  }

  export type MemberFamilyUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    relatedId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
  }

  export type MemberFamilyUncheckedUpdateManyWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    relatedId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
  }

  export type MemberFamilyUpdateWithoutRelatedMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    member?: MemberUpdateOneRequiredWithoutFamilyConnectionsNestedInput
  }

  export type MemberFamilyUncheckedUpdateWithoutRelatedMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
  }

  export type MemberFamilyUncheckedUpdateManyWithoutRelatedMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
  }

  export type GroupMemberCreateManyGroupInput = {
    id?: string
    memberId: string
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type EventCreateManyGroupInput = {
    id?: string
    title: string
    description?: string | null
    dateTime: Date | string
    location?: string | null
    calendarType?: $Enums.CalendarType
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupFileCreateManyGroupInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileSize: number
    mimeType: string
    uploadedBy: string
    uploadedAt?: Date | string
  }

  export type GroupMemberUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    member?: MemberUpdateOneRequiredWithoutGroupsNestedInput
  }

  export type GroupMemberUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GroupMemberUncheckedUpdateManyWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: EventAttendanceUpdateManyWithoutEventNestedInput
    tags?: EventTagUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: EventAttendanceUncheckedUpdateManyWithoutEventNestedInput
    tags?: EventTagUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    calendarType?: EnumCalendarTypeFieldUpdateOperationsInput | $Enums.CalendarType
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupFileUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupFileUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupFileUncheckedUpdateManyWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MilestoneCreateManyTemplateInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
  }

  export type JourneyStageCreateManyTemplateInput = {
    id?: string
    memberId: string
    milestoneId: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MilestoneUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    journeyStages?: JourneyStageUpdateManyWithoutMilestoneNestedInput
  }

  export type MilestoneUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    journeyStages?: JourneyStageUncheckedUpdateManyWithoutMilestoneNestedInput
  }

  export type MilestoneUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
  }

  export type JourneyStageUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutJourneyStagesNestedInput
    milestone?: MilestoneUpdateOneRequiredWithoutJourneyStagesNestedInput
  }

  export type JourneyStageUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    milestoneId?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyStageUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    milestoneId?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyStageCreateManyMilestoneInput = {
    id?: string
    memberId: string
    templateId: string
    status?: $Enums.StageStatus
    autoProgress?: boolean
    flagForFollowUp?: boolean
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JourneyStageUpdateWithoutMilestoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutJourneyStagesNestedInput
    template?: JourneyTemplateUpdateOneRequiredWithoutJourneyStagesNestedInput
  }

  export type JourneyStageUncheckedUpdateWithoutMilestoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyStageUncheckedUpdateManyWithoutMilestoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    status?: EnumStageStatusFieldUpdateOperationsInput | $Enums.StageStatus
    autoProgress?: BoolFieldUpdateOperationsInput | boolean
    flagForFollowUp?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendanceCreateManyEventInput = {
    id?: string
    memberId: string
    attended?: boolean
    checkedInAt?: Date | string | null
  }

  export type EventTagCreateManyEventInput = {
    id?: string
    tagId: string
  }

  export type EventAttendanceUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    attended?: BoolFieldUpdateOperationsInput | boolean
    checkedInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    member?: MemberUpdateOneRequiredWithoutEventAttendancesNestedInput
  }

  export type EventAttendanceUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    attended?: BoolFieldUpdateOperationsInput | boolean
    checkedInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventAttendanceUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    attended?: BoolFieldUpdateOperationsInput | boolean
    checkedInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventTagUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventTagUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type EventTagUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type MemberTagCreateManyTagInput = {
    id?: string
    memberId: string
  }

  export type EventTagCreateManyTagInput = {
    id?: string
    eventId: string
  }

  export type MemberTagUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    member?: MemberUpdateOneRequiredWithoutTagsNestedInput
  }

  export type MemberTagUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type MemberTagUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type EventTagUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneRequiredWithoutTagsNestedInput
  }

  export type EventTagUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type EventTagUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemberCountOutputTypeDefaultArgs instead
     */
    export type MemberCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemberCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupCountOutputTypeDefaultArgs instead
     */
    export type GroupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JourneyTemplateCountOutputTypeDefaultArgs instead
     */
    export type JourneyTemplateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JourneyTemplateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MilestoneCountOutputTypeDefaultArgs instead
     */
    export type MilestoneCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MilestoneCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemberDefaultArgs instead
     */
    export type MemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupDefaultArgs instead
     */
    export type GroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupMemberDefaultArgs instead
     */
    export type GroupMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JourneyTemplateDefaultArgs instead
     */
    export type JourneyTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JourneyTemplateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MilestoneDefaultArgs instead
     */
    export type MilestoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MilestoneDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JourneyStageDefaultArgs instead
     */
    export type JourneyStageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JourneyStageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventAttendanceDefaultArgs instead
     */
    export type EventAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventAttendanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CareLogDefaultArgs instead
     */
    export type CareLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CareLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemberTagDefaultArgs instead
     */
    export type MemberTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemberTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventTagDefaultArgs instead
     */
    export type EventTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupFileDefaultArgs instead
     */
    export type GroupFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupFileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemberFamilyDefaultArgs instead
     */
    export type MemberFamilyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemberFamilyDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}