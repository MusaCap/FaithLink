// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(MEMBER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  member   Member?
  careLogs CareLog[] @relation("CareGiver")

  @@map("users")
}

model Member {
  id              String         @id @default(cuid())
  userId          String?        @unique
  firstName       String
  lastName        String
  email           String         @unique
  phone           String?
  dateOfBirth     DateTime?
  gender          Gender?
  address         String?
  maritalStatus   MaritalStatus?
  spiritualStatus String?
  profilePhotoUrl String?
  notes           String?
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  user               User?             @relation(fields: [userId], references: [id])
  groups             GroupMember[]
  journeyStages      JourneyStage[]
  careLogs           CareLog[]
  eventAttendances   EventAttendance[]
  tags               MemberTag[]
  familyConnections  MemberFamily[]    @relation("MemberFamily")
  relatedConnections MemberFamily[]    @relation("RelatedMember")

  @@map("members")
}

model Group {
  id          String    @id @default(cuid())
  name        String
  type        GroupType
  description String?
  leaderId    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  members GroupMember[]
  events  Event[]
  files   GroupFile[]

  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  memberId String
  groupId  String
  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)

  // Relations
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  group  Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([memberId, groupId])
  @@map("group_members")
}

model JourneyTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  milestones    Milestone[]
  journeyStages JourneyStage[]

  @@map("journey_templates")
}

model Milestone {
  id          String  @id @default(cuid())
  templateId  String
  name        String
  description String?
  sequence    Int

  // Relations
  template      JourneyTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  journeyStages JourneyStage[]

  @@unique([templateId, sequence])
  @@map("milestones")
}

model JourneyStage {
  id              String      @id @default(cuid())
  memberId        String
  templateId      String
  milestoneId     String
  status          StageStatus @default(NOT_STARTED)
  autoProgress    Boolean     @default(false)
  flagForFollowUp Boolean     @default(false)
  completedAt     DateTime?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  member    Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  template  JourneyTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  milestone Milestone       @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@unique([memberId, milestoneId])
  @@map("journey_stages")
}

model Event {
  id           String       @id @default(cuid())
  title        String
  description  String?
  dateTime     DateTime
  location     String?
  groupId      String?
  calendarType CalendarType @default(ONEOFF)
  createdBy    String
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  group       Group?            @relation(fields: [groupId], references: [id])
  attendances EventAttendance[]
  tags        EventTag[]

  @@map("events")
}

model EventAttendance {
  id          String    @id @default(cuid())
  eventId     String
  memberId    String
  attended    Boolean   @default(false)
  checkedInAt DateTime?

  // Relations
  event  Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([eventId, memberId])
  @@map("event_attendances")
}

model CareLog {
  id               String    @id @default(cuid())
  memberId         String
  caregiverId      String
  type             CareType
  notes            String
  followUpRequired Boolean   @default(false)
  confidential     Boolean   @default(false)
  followUpDate     DateTime?
  createdAt        DateTime  @default(now())

  // Relations
  member    Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  caregiver User   @relation("CareGiver", fields: [caregiverId], references: [id])

  @@map("care_logs")
}

model Tag {
  id        String      @id @default(cuid())
  label     String      @unique
  category  TagCategory @default(MEMBER)
  color     String      @default("#7ED321")
  createdAt DateTime    @default(now())

  // Relations
  members MemberTag[]
  events  EventTag[]

  @@map("tags")
}

model MemberTag {
  id       String @id @default(cuid())
  memberId String
  tagId    String

  // Relations
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([memberId, tagId])
  @@map("member_tags")
}

model EventTag {
  id      String @id @default(cuid())
  eventId String
  tagId   String

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([eventId, tagId])
  @@map("event_tags")
}

model GroupFile {
  id         String   @id @default(cuid())
  groupId    String
  fileName   String
  fileUrl    String
  fileSize   Int
  mimeType   String
  uploadedBy String
  uploadedAt DateTime @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("group_files")
}

model MemberFamily {
  id           String @id @default(cuid())
  memberId     String
  relatedId    String
  relationship String

  // Relations
  member        Member @relation("MemberFamily", fields: [memberId], references: [id], onDelete: Cascade)
  relatedMember Member @relation("RelatedMember", fields: [relatedId], references: [id], onDelete: Cascade)

  @@unique([memberId, relatedId])
  @@map("member_families")
}

// Enums
enum Role {
  ADMIN
  PASTOR
  CARE_TEAM
  GROUP_LEADER
  MEMBER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum GroupType {
  MINISTRY
  LIFEGROUP
  TEAM
}

enum StageStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum CalendarType {
  WEEKLY
  MONTHLY
  ONEOFF
}

enum CareType {
  PRAYER
  VISIT
  COUNSELING
  CALL
}

enum TagCategory {
  MEMBER
  EVENT
  GROUP
}
