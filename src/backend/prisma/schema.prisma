generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  password   String
  createdAt  DateTime   @default(now())
  isActive   Boolean    @default(true)
  updatedAt  DateTime   @updatedAt
  role       String     @default("MEMBER")
  churchId   String?
  careLogs   CareLog[]  @relation("CareGiver")
  member     Member?
  activities Activity[]

  @@map("users")
}

model Member {
  id                 String               @id @default(cuid())
  userId             String?              @unique
  memberNumber       String?              @unique // Unique member number for financial system integration
  firstName          String
  lastName           String
  email              String               @unique
  phone              String?
  dateOfBirth        DateTime?
  gender             String?
  address            String?
  maritalStatus      String?
  spiritualStatus    String?
  profilePhotoUrl    String?
  notes              String?
  isActive           Boolean              @default(true)
  churchId           String?
  membershipStatus   String?              @default("pending")
  role               String?              @default("member")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  careLogs           CareLog[]
  eventAttendances   EventAttendance[]
  groups             GroupMember[]
  journeyStages      JourneyStage[]
  familyConnections  MemberFamily[]       @relation("MemberFamily")
  relatedConnections MemberFamily[]       @relation("RelatedMember")
  tags               MemberTag[]
  prayerRequests     PrayerRequest[]
  counselingSessions CounselingSession[]
  activities         Activity[]
  church             Church?              @relation("ChurchMembers", fields: [churchId], references: [id])
  user               User?                @relation(fields: [userId], references: [id])

  @@map("members")
}

model Group {
  id          String        @id @default(cuid())
  name        String
  type        String
  description String?
  leaderId    String?
  churchId    String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  events      Event[]
  files       GroupFile[]
  members     GroupMember[]
  church      Church?       @relation("ChurchGroups", fields: [churchId], references: [id])

  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  memberId String
  groupId  String
  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  member   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId, groupId])
  @@map("group_members")
}

model JourneyTemplate {
  id            String         @id @default(cuid())
  name          String
  description   String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  journeyStages JourneyStage[]
  milestones    Milestone[]

  @@map("journey_templates")
}

model Milestone {
  id            String          @id @default(cuid())
  templateId    String
  name          String
  description   String?
  sequence      Int
  journeyStages JourneyStage[]
  template      JourneyTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, sequence])
  @@map("milestones")
}

model JourneyStage {
  id              String          @id @default(cuid())
  memberId        String
  templateId      String
  milestoneId     String
  status          String          @default("NOT_STARTED")
  autoProgress    Boolean         @default(false)
  flagForFollowUp Boolean         @default(false)
  completedAt     DateTime?
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  member          Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  milestone       Milestone       @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  template        JourneyTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([memberId, milestoneId])
  @@map("journey_stages")
}

model Event {
  id           String            @id @default(cuid())
  title        String
  description  String?
  dateTime     DateTime
  location     String?
  groupId      String?
  churchId     String?
  calendarType String            @default("ONEOFF")
  createdBy    String
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  attendances  EventAttendance[]
  tags         EventTag[]
  group        Group?            @relation(fields: [groupId], references: [id])
  church       Church?           @relation("ChurchEvents", fields: [churchId], references: [id])

  @@map("events")
}

model EventAttendance {
  id          String    @id @default(cuid())
  eventId     String
  memberId    String
  attended    Boolean   @default(false)
  checkedInAt DateTime?
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([eventId, memberId])
  @@map("event_attendances")
}

model CareLog {
  id               String    @id @default(cuid())
  memberId         String
  caregiverId      String
  type             String
  notes            String
  followUpRequired Boolean   @default(false)
  confidential     Boolean   @default(false)
  followUpDate     DateTime?
  createdAt        DateTime  @default(now())
  caregiver        User      @relation("CareGiver", fields: [caregiverId], references: [id])
  member           Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("care_logs")
}

model Tag {
  id        String      @id @default(cuid())
  label     String      @unique
  category  String      @default("MEMBER")
  color     String      @default("#7ED321")
  createdAt DateTime    @default(now())
  events    EventTag[]
  members   MemberTag[]

  @@map("tags")
}

model MemberTag {
  id       String @id @default(cuid())
  memberId String
  tagId    String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([memberId, tagId])
  @@map("member_tags")
}

model EventTag {
  id      String @id @default(cuid())
  eventId String
  tagId   String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([eventId, tagId])
  @@map("event_tags")
}

model GroupFile {
  id         String   @id @default(cuid())
  groupId    String
  fileName   String
  fileUrl    String
  fileSize   Int
  mimeType   String
  uploadedBy String
  uploadedAt DateTime @default(now())
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("group_files")
}

model MemberFamily {
  id            String @id @default(cuid())
  memberId      String
  relatedId     String
  relationship  String
  member        Member @relation("MemberFamily", fields: [memberId], references: [id], onDelete: Cascade)
  relatedMember Member @relation("RelatedMember", fields: [relatedId], references: [id], onDelete: Cascade)

  @@unique([memberId, relatedId])
  @@map("member_families")
}

model Church {
  id           String   @id @default(cuid())
  name         String
  description  String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  phone        String?
  email        String?
  website      String?
  denomination String?
  isPublic     Boolean  @default(true)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  members      Member[] @relation("ChurchMembers")
  groups       Group[]  @relation("ChurchGroups")
  events       Event[]  @relation("ChurchEvents")

  @@map("churches")
}

model PrayerRequest {
  id              String          @id @default(cuid())
  title           String
  description     String
  requestedBy     String
  requestedByName String
  category        String          
  priority        String          @default("medium")
  status          String          @default("active")
  isPrivate       Boolean         @default(false)
  assignedTo      String?
  assignedBy      String?
  assignedAt      DateTime?
  prayerCount     Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  updates         PrayerUpdate[]
  member          Member          @relation(fields: [requestedBy], references: [id], onDelete: Cascade)

  @@map("prayer_requests")
}

model PrayerUpdate {
  id               String         @id @default(cuid())
  prayerRequestId  String
  content          String
  author           String
  createdAt        DateTime       @default(now())
  prayerRequest    PrayerRequest  @relation(fields: [prayerRequestId], references: [id], onDelete: Cascade)

  @@map("prayer_updates")
}

model BugReport {
  id               String    @id @default(cuid())
  title            String
  description      String
  steps            String?
  expectedBehavior String?
  actualBehavior   String?
  browserInfo      String?
  userEmail        String
  userId           String?
  churchId         String?
  churchName       String?
  severity         String    @default("medium")
  category         String    @default("general")
  status           String    @default("open")
  priority         String    @default("normal")
  submittedAt      DateTime  @default(now())
  reportedUrl      String?
  stackTrace       String?
  viewport         Json?
  platform         String?
  isAutomatic      Boolean   @default(false)
  resolvedAt       DateTime?
  resolvedBy       String?
  resolution       String?

  @@map("bug_reports")
}

model CounselingSession {
  id            String    @id @default(cuid())
  memberName    String
  counselorName String
  sessionType   String
  status        String    @default("scheduled")
  scheduledDate DateTime
  duration      Int       @default(60)
  notes         String?
  memberId      String?
  counselorId   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  member        Member?   @relation(fields: [memberId], references: [id])

  @@map("counseling_sessions")
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  title       String
  description String?
  memberId    String?
  userId      String?
  metadata    Json?
  createdAt   DateTime @default(now())
  member      Member?  @relation(fields: [memberId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("activities")
}

