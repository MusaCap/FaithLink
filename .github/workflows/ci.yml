name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./src/frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./src/frontend
      run: npm run lint
      
    - name: Run frontend unit tests
      working-directory: ./src/frontend
      run: npm test -- --coverage --watchAll=false
      
    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./src/frontend/coverage
        flags: frontend
        
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./src/backend
      run: npm ci
      
    - name: Generate Prisma client for testing
      working-directory: ./src/backend
      run: npm run test:setup
      
    - name: Run backend unit tests
      working-directory: ./src/backend
      run: npm run test:unit -- --coverage
      
    - name: Run backend integration tests
      working-directory: ./src/backend
      run: npm run test:integration -- --coverage
      
    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./src/backend/coverage
        flags: backend
        
  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd src/frontend && npm ci
        cd ../backend && npm ci
        
    - name: Setup test database
      working-directory: ./src/backend
      run: |
        npm run test:setup
        npm run db:generate
        
    - name: Start backend server
      working-directory: ./src/backend
      run: |
        npm run build
        npm start &
        sleep 10
        
    - name: Build frontend
      working-directory: ./src/frontend
      run: npm run build
      
    - name: Install Playwright
      run: npx playwright install --with-deps
      
    - name: Run E2E tests
      working-directory: ./tests
      run: npx playwright test
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: tests/playwright-report/
        
  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit (frontend)
      working-directory: ./src/frontend
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run npm audit (backend)
      working-directory: ./src/backend
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  # Build and Deploy (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Build frontend
      working-directory: ./src/frontend
      run: |
        npm ci
        npm run build
        
    - name: Build backend
      working-directory: ./src/backend
      run: |
        npm ci
        npm run build
        
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add your deployment commands here
        # Examples:
        # - Deploy to Vercel, Netlify, or other platforms
        # - Build and push Docker containers
        # - Deploy to cloud providers (AWS, Azure, GCP)
        
    - name: Run smoke tests
      run: |
        echo "ðŸ§ª Running smoke tests on staging..."
        # Add smoke test commands here
        # curl -f https://staging.faithlink360.com/api/health
        
    - name: Notify deployment status
      run: |
        echo "âœ… Deployment completed successfully!"
        # Add notification logic (Slack, email, etc.)
